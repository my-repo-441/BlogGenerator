[
    {
        "url": "https://www.cloudbuilders.jp/articles/5185/",
        "status": "success",
        "content": "\n\n\n\n\n                          【Amazon Nova】全モデル比較してみた！！                        \n\n\n\n\n\n\n\n\n            AWS          \n\n\n\n\n\n\n\n            bedrock          \n\n\n\n\n\n\n\n            nova          \n\n\n\n\n\n\n                          2024.12.04                        \n\n\n\n\n\n\n\n    この記事をシェアする\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n目次\nはじめにAmazon Novaって何？モデルの種類Amazon Nova モデル総合比較表主な特徴現在の利用可能地域料金モデル比較クイックまとめ質問回答画像認識画像生成動画生成動画解析文書解析モデル比較総括各モデルの特性評価と所感実用面での比較さいごに\nはじめに\nはじめまして！クラウドビルダーズのKawabataと申します。\nre:Invent 2024でBedrockで利用できる新LLMモデル、Amazon Novaが発表されたので早速検証検証！\nAmazon Novaって何？\n本日、Amazon Novaを発表できることを嬉しく思います。Amazon Novaは、最先端のインテリジェンスと業界をリードする価格性能を提供する新世代の基盤モデル（FM）であり、Amazon Bedrockでのみ利用可能です。\n\nAmazon Novaを使用することで、ほとんどすべての生成AIタスクのコストとレイテンシを削減することができます。エンタープライズ・ワークロードに最適化された様々なインテリジェンス・クラスから、複雑なドキュメントやビデオの分析、チャートやダイアグラムの理解、魅力的なビデオコンテンツの生成、洗練されたAIエージェントの構築などをAmazon Nova上で構築することができます。\n\n画像やテキストを処理する必要があるドキュメント処理アプリケーションを開発する場合でも、マーケティングコンテンツを大規模に作成する場合でも、視覚情報を理解して行動できるAIアシスタントを構築する場合でも、Amazon Novaは、理解モデルとクリエイティブコンテンツ生成モデルの2つのカテゴリーで、必要なインテリジェンスと柔軟性を提供します。\n\nAmazon Novaの理解モデルは、テキスト、画像、動画の入力を受け付け、テキスト出力を生成します。アマゾンのクリエイティブ・コンテンツ生成モデルは、テキストと画像の入力を受け付け、画像または動画の出力を生成します。\n\nhttps://aws.amazon.com/jp/blogs/aws/introducing-amazon-nova-frontier-intelligence-and-industry-leading-price-performance/\nより和訳\nコストとレイテンシは押さえて、生成AIタスクいろいろできるよ～って感じみたいですね！これは期待大！！！\nモデルの種類\n6種類のNovaモデルが発表され、現在は5種類が提供されています。Premierのみ2025年初旬に提供予定とのこと。\nAmazon Nova モデル総合比較表\n機能/特徴Nova MicroNova LiteNova ProNova PremierNova CanvasNova Reel処理タイプテキストのみマルチモーダルマルチモーダルマルチモーダル画像生成動画生成応答速度最速高速標準–––コンテキスト長128Kトークン300Kトークン300Kトークン–––得意分野– テキスト要約– 翻訳– 分類– チャット– コーディング– リアルタイム顧客対応– 文書分析– 画像・動画分析– 基本的なQA– 複雑な文書分析– 高度な画像理解– API連携処理– 詳細な推論– 複雑な推論– モデル蒸留の教師– 画像生成– 画像編集– スタイル制御– インペインティング– アウトペインティング– 動画生成– シーン制御– カメラワーク– 動画編集マルチモーダル非対応– 画像処理– 動画処理（最大30分）– 高度な画像処理– 詳細な動画分析– 複雑な図表理解–– 画像入力– テキスト入力– 画像入力– テキスト入力カスタマイズ– ファインチューニング– モデル蒸留– テキスト/マルチモーダルファインチューニング– 高度なファインチューニング– 教師モデルとして利用可–– – コスト効率最も効率的良好中程度–––推奨用途– チャットボット– 高速レスポンス要件– 基本的な文書処理– 基本的な画像認識– 一般的な文書分析– 顧客対応– 複雑な分析タスク– 専門文書の理解– 高度な推論–– マーケティング素材– 商品画像– アート制作– 広告動画– プロモーション– 教育コンテンツリリース状況利用可能利用可能利用可能2025年初旬予定利用可能利用可能出力形式テキストテキストテキストテキスト画像動画\n主な特徴\n\n200以上の言語に対応（特に15の主要言語で高性能）\n組み込みの安全性制御\n生成されるすべての画像と動画にデジタルウォーターマーク\nカスタマイズ可能（ファインチューニング対応）\nAmazon Bedrockの機能（Knowledge Bases、Agents、Guardrails）と統合\n\n現在の利用可能地域\n\nUS East（バージニア北部）\nUS West（オレゴン）\nMicro, Lite, ProはUS East（オハイオ）でクロスリージョン推論が可能\n\n料金\n確認でき次第更新します\nモデル比較\nクイックまとめ\nUnderstanding models\n\n応答速度: Micro > Lite > Pro > Sonnet 3.5 v2\n精度と品質: Pro ≈ 3.5 Sonnet v2 > Lite > Micro\n\n応答速度がとにかくよかったです！生成される内容も申し分ないかとただ、たまに英語で回答されることがあるので、プロンプトでの制御が必要かも！？\nCreative content generation\nプロンプト通りのものを作成してくれました！ただ、ものによっては全然なこともあったので、こちらもプロンプトで制御する必要があるかもしれません（サーフィンするカンガルーと入力したら、普通に人がサーフィンしてました…）\n質問回答\n質問は以下です。\n\nAmazon Bedrockについて教えて\n\n\n\nAmazon Nova Micro実行時間: 3080 ms回答:\n\nAmazon Bedrockは、Amazon Web Services (AWS) が提供する基盤となるサービスであり、高度な機械学習（ML）モデルと生成AI（Artificial Intelligence）を構築、デプロイ、および管理するためのプラットフォームです。以下に、Amazon Bedrockに関する重要なポイントを紹介します。\n\n### 主要機能と特徴\n\n1. **基盤となるMLモデルの提供**\n   - Amazon Bedrockは、大規模な言語モデル（LLM）やその他の機械学習モデルを提供します。これらのモデルは、テキスト生成、翻訳、質問応答、データ分析など、様々なアプリケーションに利用できます。\n\n2. **カスタマイズとトレーニング**\n   - カスタマイズされたモデルを作成し、特定の用語集やデータセットに合わせてトレーニングすることができます。これにより、特定の業界や用途に合わせたパーソナライズされたAIソリューションを提供します。\n\n3. **インテグレーションとデプロイメント**\n   - Amazon Bedrockは、AWSの他のサービスとシームレスに統合され、AWSのグローバルインフラストラクチャを活用してスケール可能です。また、モデルを簡単にデプロイし、オンデマンドで利用できるように設計されています。\n\n4. **セキュリティとプライバシー**\n   - データのプライバシーとセキュリティに重点を置いており、データの管理、アクセス制御、データの保護に関連するAWSのベストプラクティスを採用しています。\n\n5. **コスト効率**\n   - オンデマンドの課金モデルを採用しており、ユーザーは実際に使用したリソースに対して支払います。これにより、コストを管理しやすくなります。\n\n### 利用シーン\n\n1. **コンテンツ生成**\n   - 自動記事生成、脚本作成、翻訳、およびその他のコンテンツ生成タスクに適用できます。\n\n2. **カスタマーサポート**\n   - チャットボットや問い合わせ対応システムに組み込むことで、高度な質問応答機能を提供できます。\n\n3. **データ分析**\n   - データの分析、要約、および洞察の抽出に使用できます。\n\n4. **特定業界向けアプリケーション**\n   - 医療、法律、金融などの特定業界で専門的な情報の生成や分析に活用できます。\n\nAmazon Nova Lite実行時間: 4124 ms回答:\n\nAmazon Bedrock は、Amazon Web Services (AWS) が提供する機械学習モデルを開発、トレーニング、デプロイするための新しいサービスです。これは、開発者が強力なAIモデルを構築し、カスタマイズするために必要なツールとインフラストラクチャを提供します。以下に、Amazon Bedrock の主要な機能と特徴を詳しく説明します。\n\n### 主要機能\n\n1. **カスタムモデルの開発とトレーニング**\n   - **ツールとライブラリのサポート**: Amazon Bedrock は、PyTorch、TensorFlow、およびその他の主要な機械学習フレームワークをサポートしています。これにより、開発者は既存のツールと統合し、好みのライブラリを使用してモデルを開発できます。\n   - **自動機械学習 (AutoML)**: 自動化されたモデルのトレーニングとチューニングをサポートし、データサイエンティストのスキルレベルに関係なく、高度なモデルの構築を容易にします。\n\n2. **高度なモデルの利用**\n   - **AWS の機械学習モデルライブラリ**: Amazon Bedrock は、AWS が提供する幅広い機械学習モデルにアクセスできるようにします。これには、画像認識、自然言語処理、時系列予測などのさまざまなタスクに適用可能なモデルが含まれます。\n   - **サードパーティモデルのサポート**: 開発者は、サードパーティのモデルも利用できるようにし、より幅広い選択肢を提供します。\n\n3. **モデルのデプロイとスケーリング**\n   - **クラウドベースのインフラストラクチャ**: 高度な計算能力と柔軟なスケーリングを提供し、モデルのトレーニングとデプロイにおいて柔軟性と効率性を確保します。\n   - **容易な統合**: Amazon Bedrock は、AWS の他のサービス（例：Amazon SageMaker、AWS Lambda）とシームレスに統合され、開発者にとってスムーズな開発とデプロイの体験を提供します。\n\n4. **セキュリティとコンプライアンス**\n   - **データ保護**: モデルの開発とデプロイにおけるデータのセキュリティとプライバシーを重視し、業界標準のセキュリティプロトコルに準拠しています。\n   - **コンプライアンスサポート**:\n\nAmazon Nova Pro実行時間: 6358 ms回答:\n\nAmazon Bedrockは、Amazon Web Services（AWS）が提供するサービスで、主に機械学習モデルの開発、デプロイ、管理を簡素化する目的で設計されています。以下にAmazon Bedrockの主な特徴と機能について説明します。\n\n### 主な特徴\n\n1. **統合された開発環境**:\n   - 機械学習モデルの構築、トレーニング、デプロイを一元化されたプラットフォームで行うことができます。\n\n2. **幅広いモデルサポート**:\n   - 様々な種類の機械学習モデル（例：自然言語処理、コンピュータビジョン、予測分析など）をサポートしています。\n\n3. **自動化された機械学習（AutoML）**:\n   - データサイエンティストでなくても、自動化されたツールを使用して高性能なモデルを構築できます。\n\n4. **スケーラビリティ**:\n   - AWSのインフラストラクチャを活用して、需要に合わせて容易にスケールアップまたはスケールダウンできます。\n\n5. **コスト効率**:\n   - ペイ・アス・ユー・ゴーの課金モデルで、実際に使用したリソースに対してのみ課金されます。\n\n### 主要な機能\n\n1. **モデルの選択と準備**:\n   - 既存のAWS提供モデルから選択したり、カスタムのデータセットを使用して新しいモデルをトレーニングすることができます。\n\n2. **データの前処理**:\n   - データクリーニング、特徴量エンジニアリング、データ分割などの前処理ステップを効率的に行うことができます。\n\n3. **モデルのトレーニング**:\n   - ハイパーパラメータのチューニング、モデルの最適化などのトレーニングプロセスを自動化または手動で行うことができます。\n\n4. **モデルの評価**:\n   - モデルの性能を評価するための様々なメトリック（例：精度、リコール、F1スコアなど）を提供します。\n\n5. **モデルのデプロイ**:\n   - トレーニング済みのモデルを簡単にデプロイし、リアルタイムまたはバッチ予測を実行できます。\n\n6. **モニタリングと管理**:\n   - デプロイされたモデルのパフォーマンスを継続的にモニタリングし、必要に応じて再トレーニングや調整を行うことができます。\n\n### ユースケース\n\n- **自然言語処理（NLP）**:\n\nClaude 3.5 Sonnet v2実行時間: 13745 ms回答:\n\nAmazon Bedrockは、AWSが提供する生成AIのフルマネージドサービスです。主な特徴について説明します：\n\n主な特徴：\n\n1. 複数のファウンデーションモデルへのアクセス\n- Anthropic Claude\n- Meta Llama 2\n- AI21 Labs\n- Stability AI\n- Amazon Titan\nなどの様々なモデルを単一のAPIで利用可能\n\n2. セキュリティとプライバシー\n- AWSのセキュリティ基準に準拠\n- データは暗号化され、モデルプロバイダーとも共有されない\n- VPCエンドポイントのサポート\n\n3. カスタマイズ機能\n- モデルのファインチューニング\n- プロンプトエンジニアリング\n- カスタムモデルの作成が可能\n\n4. 主な用途：\n- テキスト生成\n- コード生成\n- 画像生成\n- 要約\n- 質問応答\n- データ分析\n\n5. 利点：\n- サーバーレス\n- スケーラブル\n- 従量課金制\n- 低レイテンシー\n- APIを通じた簡単な統合\n\n6. 開発ツール：\n- SDK対応（Python, Java等）\n- AWS Console\n- CLI\n- APIリファレンス\n\n7. コスト管理：\n- 使用量ベースの課金\n- モデルごとの料金設定\n- 使用量の監視と制御が可能\n\nこれらの特徴により、企業は自社のアプリケーションに容易にAI機能を統合することができます。\nLiteとProで回答が切れてしまっていますが、たぶんプレイグラウンドの設定の問題だと思います\n所感ですが、Microがとにかく速い！！普段3.5 Sonnet使いなので、その速さに驚きました…\n回答の精度も悪くないと思います（もうちょっと差の付きそうな質問考えればよかった）\n画像認識\n質問は以下です。\n\n画像について解説して\n\n利用した画像は以下です。\n\n\n\nAmazon Nova Lite実行時間: 6219 ms回答:\n\nこの図は、AWS（Amazon Web Services）のクラウド環境におけるインフラストラクチャとサービスの配置を示しています。以下に、図に示されている主要な要素とそれらの役割について解説します。\n\n1. **AWS Cloud**: AWSクラウドサービス全体を表しています。\n\n2. **CodePipeline**: AWSのサービスで、ソフトウェアの開発、デプロイ、および継続的インテグレーション/継続的デリバリー（CI/CD）プロセスを自動化します。\n\n3. **ECS**: Amazon Elastic Container Serviceで、コンテナ化されたアプリケーションを管理するためのサービスです。\n\n4. **CloudWatch**: AWSのサービスで、リソースの監視、ログの収集、アラートの設定を行います。\n\n5. **ECR**: Amazon Elastic Container Registryで、Dockerイメージを保存および取得するためのサービスです。\n\n6. **CodeBuild**: AWSのサービスで、コードのビルド、テスト、およびパッケージングを行うサービスです。\n\n7. **CodeDeploy**: AWSのサービスで、アプリケーションのデプロイを自動化し、更新を管理します。\n\n8. **VPC**: Virtual Private Cloudで、AWSリソースをプライベートなネットワーク内に配置するためのサービスです。\n\n9. **NAT gateway**: NAT（Network Address Translation）ゲートウェイで、プライベートサブネットのインスタンスがインターネットにアクセスするためのサービスです。\n\n10. **ALB**: Application Load Balancerで、アプリケーショントラフィックを複数のターゲットに分散するサービスです。\n\n11. **Fargate**: AWS Fargateは、コンテナをECSやEKSで実行する際に、サーバーレスコンピューティングモデルを提供します。\n\n12. **RDS**: Amazon Relational Database Serviceで、管理されたデータベースサービスを提供します。\n\n13. **SystemManager ParameterStore**: AWS Systems Managerのサービスで、アプリケーションの設定や秘密情報を安全に保存および管理します。\n\nこれらの要素は、AWSのサービスを利用して、アプリケーションの開発、デプロイ、および運用を自動化し、効率的に管理するためのインフラストラクチャを形成しています。\n\nAmazon Nova Pro実行時間: 13686 ms回答:\n\nこの画像は、AWS（Amazon Web Services）環境におけるソフトウェア開発およびデプロイメントのプロセスを示す図です。以下にその要素を詳しく説明します。\n\n1. **GitHub**:\n   - プロジェクトのソースコードがホストされているリポジトリ。\n   - 開発者はここにコードをコミットし、プルリクエストを通じてコードの変更をレビューします。\n\n2. **AWS Cloud**:\n   - クラウドサービスを提供するAmazonのサービス群。\n   - この図では、AWSのさまざまなサービスがソフトウェア開発ライフサイクル（SDLC）でどのように使用されているかを示しています。\n\n3. **CloudWatch**:\n   - AWSのモニタリングサービス。\n   - アプリケーションのパフォーマンスやメトリクスを監視します。\n\n4. **ECR（Elastic Container Registry）**:\n   - コンテナイメージを保存するためのAWSのレジストリサービス。\n   - 開発されたアプリケーションをコンテナ化し、ここに格納します。\n\n5. **CodePipeline**:\n   - AWSの継続的デリバリーサービス。\n   - ソースコードの変更を検出し、ビルド、テスト、デプロイのプロセスを自動化します。\n\n6. **CodeBuild**:\n   - AWSのビルドサービス。\n   - ソースコードをコンパイルし、テストを実行します。\n\n7. **CodeDeploy**:\n   - AWSのデプロイメントサービス。\n   - アプリケーションをAWSのインフラストラクチャにデプロイします。\n\n8. **ECS（Elastic Container Service）**:\n   - AWSのコンテナオーケストレーションサービス。\n   - コンテナ化されたアプリケーションを管理します。\n\n9. **SystemManager ParameterStore**:\n   - AWSの設定管理サービス。\n   - アプリケーションの設定やシークレットを安全に管理します。\n\n10. **VPC（Virtual Private Cloud）**:\n    - AWSの仮想プライベートネットワーク。\n    - アプリケーションをプライベートなネットワーク環境で実行します。\n\n11. **Availability Zone**:\n    - AWSのデータセンターの物理的な場所。\n    - アプリケーションの高可用性と耐障害性を確保するために使用されます。\n\n12. **Public Subnet**:\n    - インターネットに直接接続可能なサブネット。\n    - パブリックIPアドレスを持ち、インターネット\n\nClaude 3.5 Sonnet v2実行時間: 10754 ms回答:\n\nこの画像はAWSのアーキテクチャ図で、CI/CDパイプラインとECSを使用したコンテナ環境の構成を示しています。\n主な構成要素は以下の通りです：\n1. CI/CD部分:\n- GitHubからのソースコード管理\n- CodePipelineによるパイプライン管理\n- CodeBuildによるビルドプロセス\n- CodeDeployによるデプロイ管理\n2. インフラ構成:\nVPC内に複数のAvailability Zone（1a、1c）\n- 各AZに Public SubnetとPrivate Subnet\n- NAT GatewayとInternet Gatewayによるネットワーク制御\n- ALB（Application Load Balancer）による負荷分散\n3. コンテナ環境:\n- ECSクラスターでのコンテナ管理\n- Fargateによるサーバーレスコンテナ実行\n- RDSによるデータベース管理\n4. モニタリングと管理:\n- CloudWatchによる監視\n- Systems Manager Parameter Storeによる設定管理\n- ECRによるコンテナイメージの保管\nこの構成は高可用性と安全性を考慮した設計になっており、マイクロサービスアーキテクチャの実装に適しています。\nLiteのレスポンスがいいですね～\n回答の中身に関しては、僕はProが好みですねいつも思うんですけど、3.5 Sonnetはすごい簡潔に回答してくるので、Proぐらいの人間味（？）がある方がいいですｗ\n画像生成\n質問は以下です。\n\n空飛ぶ車\n\n\nAmazon Nova Canvas実行時間: 1分弱生成された画像:\n\n\nおおおおおおちゃんと空飛んでますね画像生成系のAIは初めて使いましたが、いい感じですね！\n動画生成\n質問は以下です。\n\n空飛ぶ車\n\n\nAmazon Nova Reel実行時間: 4分ぐらい生成された動画:\n\n\nおおおおおおおおおお飛んでる！！6秒動画しか作成できなかったのですが、今後長尺の動画も生成できるようになると思うので、いろんな用途で使えそうですね\n動画解析\n質問は以下で先ほど生成した動画を解析させています。\n\n動画について解説して\n\n\n\nAmazon Nova Lite実行時間: 2212 ms回答:\n\nこの動画は、先進的な飛行機が雲の上を飛んでいる様子をシミュレーションしています。\n機体は黒色で、円筒形のエンジンを機体両側に備えています。\nまた、機体上部に小さな翼がついています。\nこの飛行機は、ジェット機のような外観を持ち、先進的な技術やデザインを示しています。\n雲の中の飛行機は、太陽光の下で輝いており、その美しい外観と動きが際立っています。\n\nAmazon Nova Pro実行時間: 3258 ms回答:\n\nこの動画は、空中を飛ぶ架空の飛行機のCGアニメーションです。\n翼は長方形で、中央にプロペラがついています。\n翼の先端には小さな翼があり、飛行機の尾部には垂直尾翼がついています。\n飛行機のデザインは未来的で、空中での安定性を高めるための工夫が施されています。\n内容を適切に把握していてどちらもいい回答ですね！この精度であれば、レスポンスとコスト的にLiteがよさそう\n文書解析\n質問は以下でfargateのBlack Beltを読み込ませています。\nhttps://pages.awscloud.com/rs/112-TZM-766/images/AWS-Black-Belt_2024_AWS-Fargate-Introduction_1031_v1.pdf\n\n文書について解説して\n\n\n※スクショ撮り忘れたので、画像と以下結果には相違があります\n\nAmazon Nova Lite実行時間: 5152 ms回答:\n\nこの文書は、2024年10月に開催された「AWS Black Belt Online Seminar」のセミナー資料の一部です。資料は、ソリューションアーキテクトの吉田英史によって作成されました。このセミナーでは、AWS Fargate というサービスに焦点を当て、その概要、特徴、開始方法、そして他のコンテナ実行環境との比較などについて説明しています。以下に、文書の内容を詳しく解説します。\n\n### 1. 自己紹介\n\n**吉田英史**  \nアマゾンウェブサービスジャパンでソリューションアーキテクトを務める。主に小売・消費財業界のお客様を支援し、クラウド技術を用いてビジネスの加速を支援することを楽しんでいる。特に好きなAWSサービスはAWS Fargate。\n\n### 2. セミナーの主な対象者\n\n- AWSをこれから利用しようとしているアプリケーションおよびインフラ担当者\n- AWS Fargateの概要や開始方法に興味がある人\n- クラウド上の既存ワークロードのコンテナ化を検討している人\n- オンプレミスの既存コンテナワークロードのクラウド移行を検討している人\n\n### 3. アジェンダ\n\n- AWS Fargateとは\n- AWS FargateとAmazon EC2の違い\n- AWS Fargateの始め方\n- まとめ\n\n### 4. AWS Fargateとは\n\nAWS Fargateは、サーバレスのコンテナ実行環境です。以下のような特徴があります：\n\n- ホストのアップグレードやパッチ適用は不要\n- クラスターのキャパシティ管理は不要\n- 設計による分離とセキュリティの担保\n- 前払い料金なし、使用したリソースに応じて従量課金\n- Fargate SpotとFargate Gravitonによるコスト削減\n\n### 5. AWS FargateとAmazon EC2の違い\n\nAWS FargateとAmazon EC2には、以下の5つの観点で違いがあります：\n\n1. **vCPUとメモリ**  \n   AWS Fargateでは、74種類のvCPUとメモリの組み合わせから選択できます。\n\n2. **ホスト**  \n   AWS Fargateでは、ホストの管理はAWSが行います。\n\n3. **ネットワークモード**  \n   AWS Fargate\n\nAmazon Nova Pro実行時間: 7426 ms回答:\n\nCertainly! Here's a detailed explanation of the document:\n\n---\n\n### AWS Fargate Introduction\n\n**Presenter:**  \n吉田 英史 (Hideshi Yoshida)  \nSolutions Architect at Amazon Web Services Japan  \nFocuses on supporting retail and consumer goods customers.  \nFavorite AWS Service: AWS Fargate\n\n---\n\n### Seminar Overview\n\n**Target Audience:**  \n- Individuals planning to use AWS  \n- Those interested in learning about AWS Fargate, a serverless container runtime environment  \n- Those considering containerizing existing workloads in the cloud  \n- Those considering migrating existing on-premises container workloads to the cloud\n\n---\n\n### Agenda\n\n1. **What is AWS Fargate?**  \n2. **Differences between AWS Fargate and Amazon EC2**  \n3. **Getting Started with AWS Fargate**  \n4. **Summary**\n\n---\n\n### What is AWS Fargate?\n\n**AWS Container Services:**  \n- **Orchestration:** Deployment, scheduling, and scaling of containers  \n- **Image Registry:** Storage for container images  \n- **Hosting:** Container runtime environments  \n- **Other Related Services:** Amazon CloudWatch Container Insights\n\n**Container Runtime Environment Options:**  \n- Amazon ECS  \n- Amazon EC2  \n- AWS Fargate  \n- Amazon EKS  \n- AWS App Runner\n\n**AWS Fargate:**  \n- Serverless container runtime environment  \n- No need for host upgrades or patch applications  \n- No cluster capacity management required  \n- Design ensures isolation and security  \n- Pay-per-use pricing model with no upfront fees  \n- Cost savings with Fargate Spot and Fargate Graviton  \n  (Note: Fargate Graviton is not supported on Amazon EKS and is subject to Compute Savings Plans)\n\n**AWS Fargate Spot (ECS only):**  \n- Option for running fault-tolerant workloads on AWS Fargate  \n- Up to 70% discount compared to regular Fargate pricing  \n- Usable as FARGATE_SPOT capacity provider  \n- Supports AWS Graviton\n\n---\n\n### Differences Between AWS Fargate and Amazon EC2\n\n**Five Key Differences:**  \n1. **vCPU and Memory**  \n2. **Host**  \n3. **Network Mode**  \n4. **Data Volume**  \n5. **Security**\n\n**vCPU and Memory:**  \n- Flexible options: 74 combinations of vCPU and memory  \n- Examples:  \n  - 256 (.25 vCPU): 0.5GB, 1GB, 2GB  \n  - 512 (.\n\nClaude 3.5 Sonnet実行時間: 16380 ms回答:\n\nこの文書は、AWS Black Belt Online Seminarの一環として、AWS Fargateについて解説したプレゼンテーション資料です。主な内容は以下の通りです：\n\n主要なポイント：\n\n1. AWS Fargateの概要\n- サーバーレスのコンテナ実行環境\n- ホスト管理が不要で、従量課金制\n- Fargate SpotとFargate Gravitonによるコスト削減オプションあり\n\n2. Amazon EC2との主な違い（5つの観点）\n- vCPUとメモリの設定オプション\n- ホスト環境の特徴と制約\n- ネットワークモード\n- データボリュームの選択肢\n- セキュリティ面での特徴\n\n3. 特徴的な機能：\n- 74パターンのvCPU/メモリ組み合わせから選択可能\n- awsvpcネットワークモードの採用\n- タスク/Podごとの実行環境分離\n- ECS Execによるデバッグツールのサポートなど\n\n対象読者：\n- AWSこれから利用予定のアプリケーション・インフラ担当者\n- サーバーレスコンテナ環境に関心のある方\n- 既存ワークロードのコンテナ化を検討している方\n- オンプレミスからクラウドへの移行を検討している方\n\n文書の形式：\n- AWS公式のトレーニング資料\n- 2024年作成\n- スライド形式で構成\n- 図表や実例を交えた説明\n\nなお、この資料は2024年9月時点の情報に基づいており、AWS サービスは常にアップデートされるため、最新情報は公式ウェブサイトで確認することが推奨されています。\n途中で回答が途切れているので何とも言い難いですが、内容はちゃんと拾えているように見えますただ、3.5 Sonnet は全体をまとめてくれてますが、Nova達は上から丁寧に説明していますねあと、Proに関しては英語で出力されています\nProに限らず、Novaでは時々英語で出力する挙動が見られました！\nここら辺はプロンプトの制御していくのがよさそうですね\nモデル比較総括\n各モデルの特性評価と所感\nUnderstanding models\n\nAmazon Nova Micro\n\n\n特徴：\n\n爆速レスポンス！！！\n\n\n性能：\n\n申し分ないかと\n\n\n所感：\n\n速い！安い！美味い！（？）ですね\n\n\n\n     2. Amazon Nova Lite\n\n特徴：\n\nマルチモーダル処理で最速\n\n\n性能：\n\n質問への回答もマルチモーダルの読み込みも問題なし\n\n\n所感：\n\nとりあえずの画像や動画の解析で利用するときはこれでよし\n\n\n\n     3. Amazon Nova Pro\n\n特徴：\n\n高度な分析能力\n詳細なマルチモーダル処理\n\n\n性能：\n\n今回の比較では他の2モデルと明確な差が出なかったのでプログラミングなどで要検証\n\n\n所感：\n\n今後もう少し使ってみて判断したいところですね\n\n\n\nCreative content generation\n\nNova Canvas（画像生成）\n\n\n特徴：\n\n高品質な画像生成が可能\n\n\n性能：\n\n1分程度で3つの画像を生成\n\n\n所感：\n\nスライドの画像作ってもらうのとかで使えそう\n\n\n\n      2. Nova Reel（動画生成）\n\n特徴：\n\nテキストや画像から動画生成が可能\n\n\n性能：\n\n4~5分で動画が作成できる\n\n\n所感：\n\n動画が欲しい時は是非使いたいな\n\n\n\n実用面での比較\n\n応答速度\n\n\nMicro > Lite > Pro > Claude\n用途に応じて適切なモデルを選択が重要\n\n      2. 精度と品質\n\nPro ≈ 3.5 Sonnet v2 > Lite > Micro\nより複雑なタスクには上位モデルが必要\n\nさいごに\nとにかく速いのがいいと思いました！今まで回答速度の問題がネックになっていたものがことごとく解決するのではないかと\nまだ精度や癖などが見えていないので、当分使い倒してプロンプトで最適化していければと思います！！！\n新モデルありがとう！！！\n\n\n\n\n    この記事をシェアする\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n                                ←前の記事\n                                \n\n\n\n\n\n\n                                次の記事→\n                                \n\n\n\n\n\n\n\n\n\n\n\n                                著者：kawabata                              \n\n                                2023年 Jr.Champions選出\r\n2023, 2024年 All Certificate選出\r\n最近はもっぱらCDKとAIばかりです                              \n\n\n\n\n\n\n\n\n\n\n\n\n      関連記事\n    \n\n\n\n\n\n\n\n\n\n\n      AWS Security HubとBedrock AIで実現するセキュリティ通知システム    \n\n \n        2024.07.01      \n\n\n\n\n\n\n            AWS          \n\n\n\n\n\n\n\n            bedrock          \n\n\n\n\n\n\n\n            EventBridge          \n\n\n\n\n\n\n\n            Lambda          \n\n\n\n\n\n\n\n            Security Hub          \n\n\n\n\n\n\n\n            Slack          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      【Amazon Bedrockエージェント】AWS Chatbotを利用してSlackからBedrockを使えるようになったのでやってみた    \n\n \n        2024.09.18      \n\n\n\n\n\n\n            AWS          \n\n\n\n\n\n\n\n            bedrock          \n\n\n\n\n\n\n\n            Chatbot          \n\n\n\n\n\n\n\n            Slack          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      AWS東京オフィスにコワーキングスペースがあるらしいので潜入調査してきた    \n\n \n        2023.01.30      \n\n\n\n\n\n\n            AWS          \n\n\n\n\n\n\n\n            コワーキングスペース          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n                          【Amazon Nova】全モデル比較してみた！！                        \n\n\n\n\n\n\n\n\n            AWS          \n\n\n\n\n\n\n\n            bedrock          \n\n\n\n\n\n\n\n            nova          \n\n\n\n\n\n\n                          2024.12.04                        \n\n\n\n\n\n\n\n    この記事をシェアする\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n \n\n\n                          【Amazon Nova】全モデル比較してみた！！                        \n\n\n\n\n\n\n\n\n            AWS          \n\n\n\n\n\n\n\n            bedrock          \n\n\n\n\n\n\n\n            nova          \n\n\n\n\n\n\n                          2024.12.04                        \n\n\n\n\n\n\n\n    この記事をシェアする\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n \n\n                          【Amazon Nova】全モデル比較してみた！！                        \n \n\n\n\n\n\n\n            AWS          \n\n\n\n\n\n\n\n            bedrock          \n\n\n\n\n\n\n\n            nova          \n\n\n\n\n\n\n                          2024.12.04                        \n \n\n\n\n\n\n            AWS          \n\n\n\n\n\n\n\n            bedrock          \n\n\n\n\n\n\n\n            nova          \n\n\n\n\n \n            AWS           \n            bedrock           \n            nova           \n                          2024.12.04                         \n\n \n\n\n    この記事をシェアする\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n    この記事をシェアする\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n    この記事をシェアする\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n目次\nはじめにAmazon Novaって何？モデルの種類Amazon Nova モデル総合比較表主な特徴現在の利用可能地域料金モデル比較クイックまとめ質問回答画像認識画像生成動画生成動画解析文書解析モデル比較総括各モデルの特性評価と所感実用面での比較さいごに\nはじめに\nはじめまして！クラウドビルダーズのKawabataと申します。\nre:Invent 2024でBedrockで利用できる新LLMモデル、Amazon Novaが発表されたので早速検証検証！\nAmazon Novaって何？\n本日、Amazon Novaを発表できることを嬉しく思います。Amazon Novaは、最先端のインテリジェンスと業界をリードする価格性能を提供する新世代の基盤モデル（FM）であり、Amazon Bedrockでのみ利用可能です。\n\nAmazon Novaを使用することで、ほとんどすべての生成AIタスクのコストとレイテンシを削減することができます。エンタープライズ・ワークロードに最適化された様々なインテリジェンス・クラスから、複雑なドキュメントやビデオの分析、チャートやダイアグラムの理解、魅力的なビデオコンテンツの生成、洗練されたAIエージェントの構築などをAmazon Nova上で構築することができます。\n\n画像やテキストを処理する必要があるドキュメント処理アプリケーションを開発する場合でも、マーケティングコンテンツを大規模に作成する場合でも、視覚情報を理解して行動できるAIアシスタントを構築する場合でも、Amazon Novaは、理解モデルとクリエイティブコンテンツ生成モデルの2つのカテゴリーで、必要なインテリジェンスと柔軟性を提供します。\n\nAmazon Novaの理解モデルは、テキスト、画像、動画の入力を受け付け、テキスト出力を生成します。アマゾンのクリエイティブ・コンテンツ生成モデルは、テキストと画像の入力を受け付け、画像または動画の出力を生成します。\n\nhttps://aws.amazon.com/jp/blogs/aws/introducing-amazon-nova-frontier-intelligence-and-industry-leading-price-performance/\nより和訳\nコストとレイテンシは押さえて、生成AIタスクいろいろできるよ～って感じみたいですね！これは期待大！！！\nモデルの種類\n6種類のNovaモデルが発表され、現在は5種類が提供されています。Premierのみ2025年初旬に提供予定とのこと。\nAmazon Nova モデル総合比較表\n機能/特徴Nova MicroNova LiteNova ProNova PremierNova CanvasNova Reel処理タイプテキストのみマルチモーダルマルチモーダルマルチモーダル画像生成動画生成応答速度最速高速標準–––コンテキスト長128Kトークン300Kトークン300Kトークン–––得意分野– テキスト要約– 翻訳– 分類– チャット– コーディング– リアルタイム顧客対応– 文書分析– 画像・動画分析– 基本的なQA– 複雑な文書分析– 高度な画像理解– API連携処理– 詳細な推論– 複雑な推論– モデル蒸留の教師– 画像生成– 画像編集– スタイル制御– インペインティング– アウトペインティング– 動画生成– シーン制御– カメラワーク– 動画編集マルチモーダル非対応– 画像処理– 動画処理（最大30分）– 高度な画像処理– 詳細な動画分析– 複雑な図表理解–– 画像入力– テキスト入力– 画像入力– テキスト入力カスタマイズ– ファインチューニング– モデル蒸留– テキスト/マルチモーダルファインチューニング– 高度なファインチューニング– 教師モデルとして利用可–– – コスト効率最も効率的良好中程度–––推奨用途– チャットボット– 高速レスポンス要件– 基本的な文書処理– 基本的な画像認識– 一般的な文書分析– 顧客対応– 複雑な分析タスク– 専門文書の理解– 高度な推論–– マーケティング素材– 商品画像– アート制作– 広告動画– プロモーション– 教育コンテンツリリース状況利用可能利用可能利用可能2025年初旬予定利用可能利用可能出力形式テキストテキストテキストテキスト画像動画\n主な特徴\n\n200以上の言語に対応（特に15の主要言語で高性能）\n組み込みの安全性制御\n生成されるすべての画像と動画にデジタルウォーターマーク\nカスタマイズ可能（ファインチューニング対応）\nAmazon Bedrockの機能（Knowledge Bases、Agents、Guardrails）と統合\n\n現在の利用可能地域\n\nUS East（バージニア北部）\nUS West（オレゴン）\nMicro, Lite, ProはUS East（オハイオ）でクロスリージョン推論が可能\n\n料金\n確認でき次第更新します\nモデル比較\nクイックまとめ\nUnderstanding models\n\n応答速度: Micro > Lite > Pro > Sonnet 3.5 v2\n精度と品質: Pro ≈ 3.5 Sonnet v2 > Lite > Micro\n\n応答速度がとにかくよかったです！生成される内容も申し分ないかとただ、たまに英語で回答されることがあるので、プロンプトでの制御が必要かも！？\nCreative content generation\nプロンプト通りのものを作成してくれました！ただ、ものによっては全然なこともあったので、こちらもプロンプトで制御する必要があるかもしれません（サーフィンするカンガルーと入力したら、普通に人がサーフィンしてました…）\n質問回答\n質問は以下です。\n\nAmazon Bedrockについて教えて\n\n\n\nAmazon Nova Micro実行時間: 3080 ms回答:\n\nAmazon Bedrockは、Amazon Web Services (AWS) が提供する基盤となるサービスであり、高度な機械学習（ML）モデルと生成AI（Artificial Intelligence）を構築、デプロイ、および管理するためのプラットフォームです。以下に、Amazon Bedrockに関する重要なポイントを紹介します。\n\n### 主要機能と特徴\n\n1. **基盤となるMLモデルの提供**\n   - Amazon Bedrockは、大規模な言語モデル（LLM）やその他の機械学習モデルを提供します。これらのモデルは、テキスト生成、翻訳、質問応答、データ分析など、様々なアプリケーションに利用できます。\n\n2. **カスタマイズとトレーニング**\n   - カスタマイズされたモデルを作成し、特定の用語集やデータセットに合わせてトレーニングすることができます。これにより、特定の業界や用途に合わせたパーソナライズされたAIソリューションを提供します。\n\n3. **インテグレーションとデプロイメント**\n   - Amazon Bedrockは、AWSの他のサービスとシームレスに統合され、AWSのグローバルインフラストラクチャを活用してスケール可能です。また、モデルを簡単にデプロイし、オンデマンドで利用できるように設計されています。\n\n4. **セキュリティとプライバシー**\n   - データのプライバシーとセキュリティに重点を置いており、データの管理、アクセス制御、データの保護に関連するAWSのベストプラクティスを採用しています。\n\n5. **コスト効率**\n   - オンデマンドの課金モデルを採用しており、ユーザーは実際に使用したリソースに対して支払います。これにより、コストを管理しやすくなります。\n\n### 利用シーン\n\n1. **コンテンツ生成**\n   - 自動記事生成、脚本作成、翻訳、およびその他のコンテンツ生成タスクに適用できます。\n\n2. **カスタマーサポート**\n   - チャットボットや問い合わせ対応システムに組み込むことで、高度な質問応答機能を提供できます。\n\n3. **データ分析**\n   - データの分析、要約、および洞察の抽出に使用できます。\n\n4. **特定業界向けアプリケーション**\n   - 医療、法律、金融などの特定業界で専門的な情報の生成や分析に活用できます。\n\nAmazon Nova Lite実行時間: 4124 ms回答:\n\nAmazon Bedrock は、Amazon Web Services (AWS) が提供する機械学習モデルを開発、トレーニング、デプロイするための新しいサービスです。これは、開発者が強力なAIモデルを構築し、カスタマイズするために必要なツールとインフラストラクチャを提供します。以下に、Amazon Bedrock の主要な機能と特徴を詳しく説明します。\n\n### 主要機能\n\n1. **カスタムモデルの開発とトレーニング**\n   - **ツールとライブラリのサポート**: Amazon Bedrock は、PyTorch、TensorFlow、およびその他の主要な機械学習フレームワークをサポートしています。これにより、開発者は既存のツールと統合し、好みのライブラリを使用してモデルを開発できます。\n   - **自動機械学習 (AutoML)**: 自動化されたモデルのトレーニングとチューニングをサポートし、データサイエンティストのスキルレベルに関係なく、高度なモデルの構築を容易にします。\n\n2. **高度なモデルの利用**\n   - **AWS の機械学習モデルライブラリ**: Amazon Bedrock は、AWS が提供する幅広い機械学習モデルにアクセスできるようにします。これには、画像認識、自然言語処理、時系列予測などのさまざまなタスクに適用可能なモデルが含まれます。\n   - **サードパーティモデルのサポート**: 開発者は、サードパーティのモデルも利用できるようにし、より幅広い選択肢を提供します。\n\n3. **モデルのデプロイとスケーリング**\n   - **クラウドベースのインフラストラクチャ**: 高度な計算能力と柔軟なスケーリングを提供し、モデルのトレーニングとデプロイにおいて柔軟性と効率性を確保します。\n   - **容易な統合**: Amazon Bedrock は、AWS の他のサービス（例：Amazon SageMaker、AWS Lambda）とシームレスに統合され、開発者にとってスムーズな開発とデプロイの体験を提供します。\n\n4. **セキュリティとコンプライアンス**\n   - **データ保護**: モデルの開発とデプロイにおけるデータのセキュリティとプライバシーを重視し、業界標準のセキュリティプロトコルに準拠しています。\n   - **コンプライアンスサポート**:\n\nAmazon Nova Pro実行時間: 6358 ms回答:\n\nAmazon Bedrockは、Amazon Web Services（AWS）が提供するサービスで、主に機械学習モデルの開発、デプロイ、管理を簡素化する目的で設計されています。以下にAmazon Bedrockの主な特徴と機能について説明します。\n\n### 主な特徴\n\n1. **統合された開発環境**:\n   - 機械学習モデルの構築、トレーニング、デプロイを一元化されたプラットフォームで行うことができます。\n\n2. **幅広いモデルサポート**:\n   - 様々な種類の機械学習モデル（例：自然言語処理、コンピュータビジョン、予測分析など）をサポートしています。\n\n3. **自動化された機械学習（AutoML）**:\n   - データサイエンティストでなくても、自動化されたツールを使用して高性能なモデルを構築できます。\n\n4. **スケーラビリティ**:\n   - AWSのインフラストラクチャを活用して、需要に合わせて容易にスケールアップまたはスケールダウンできます。\n\n5. **コスト効率**:\n   - ペイ・アス・ユー・ゴーの課金モデルで、実際に使用したリソースに対してのみ課金されます。\n\n### 主要な機能\n\n1. **モデルの選択と準備**:\n   - 既存のAWS提供モデルから選択したり、カスタムのデータセットを使用して新しいモデルをトレーニングすることができます。\n\n2. **データの前処理**:\n   - データクリーニング、特徴量エンジニアリング、データ分割などの前処理ステップを効率的に行うことができます。\n\n3. **モデルのトレーニング**:\n   - ハイパーパラメータのチューニング、モデルの最適化などのトレーニングプロセスを自動化または手動で行うことができます。\n\n4. **モデルの評価**:\n   - モデルの性能を評価するための様々なメトリック（例：精度、リコール、F1スコアなど）を提供します。\n\n5. **モデルのデプロイ**:\n   - トレーニング済みのモデルを簡単にデプロイし、リアルタイムまたはバッチ予測を実行できます。\n\n6. **モニタリングと管理**:\n   - デプロイされたモデルのパフォーマンスを継続的にモニタリングし、必要に応じて再トレーニングや調整を行うことができます。\n\n### ユースケース\n\n- **自然言語処理（NLP）**:\n\nClaude 3.5 Sonnet v2実行時間: 13745 ms回答:\n\nAmazon Bedrockは、AWSが提供する生成AIのフルマネージドサービスです。主な特徴について説明します：\n\n主な特徴：\n\n1. 複数のファウンデーションモデルへのアクセス\n- Anthropic Claude\n- Meta Llama 2\n- AI21 Labs\n- Stability AI\n- Amazon Titan\nなどの様々なモデルを単一のAPIで利用可能\n\n2. セキュリティとプライバシー\n- AWSのセキュリティ基準に準拠\n- データは暗号化され、モデルプロバイダーとも共有されない\n- VPCエンドポイントのサポート\n\n3. カスタマイズ機能\n- モデルのファインチューニング\n- プロンプトエンジニアリング\n- カスタムモデルの作成が可能\n\n4. 主な用途：\n- テキスト生成\n- コード生成\n- 画像生成\n- 要約\n- 質問応答\n- データ分析\n\n5. 利点：\n- サーバーレス\n- スケーラブル\n- 従量課金制\n- 低レイテンシー\n- APIを通じた簡単な統合\n\n6. 開発ツール：\n- SDK対応（Python, Java等）\n- AWS Console\n- CLI\n- APIリファレンス\n\n7. コスト管理：\n- 使用量ベースの課金\n- モデルごとの料金設定\n- 使用量の監視と制御が可能\n\nこれらの特徴により、企業は自社のアプリケーションに容易にAI機能を統合することができます。\nLiteとProで回答が切れてしまっていますが、たぶんプレイグラウンドの設定の問題だと思います\n所感ですが、Microがとにかく速い！！普段3.5 Sonnet使いなので、その速さに驚きました…\n回答の精度も悪くないと思います（もうちょっと差の付きそうな質問考えればよかった）\n画像認識\n質問は以下です。\n\n画像について解説して\n\n利用した画像は以下です。\n\n\n\nAmazon Nova Lite実行時間: 6219 ms回答:\n\nこの図は、AWS（Amazon Web Services）のクラウド環境におけるインフラストラクチャとサービスの配置を示しています。以下に、図に示されている主要な要素とそれらの役割について解説します。\n\n1. **AWS Cloud**: AWSクラウドサービス全体を表しています。\n\n2. **CodePipeline**: AWSのサービスで、ソフトウェアの開発、デプロイ、および継続的インテグレーション/継続的デリバリー（CI/CD）プロセスを自動化します。\n\n3. **ECS**: Amazon Elastic Container Serviceで、コンテナ化されたアプリケーションを管理するためのサービスです。\n\n4. **CloudWatch**: AWSのサービスで、リソースの監視、ログの収集、アラートの設定を行います。\n\n5. **ECR**: Amazon Elastic Container Registryで、Dockerイメージを保存および取得するためのサービスです。\n\n6. **CodeBuild**: AWSのサービスで、コードのビルド、テスト、およびパッケージングを行うサービスです。\n\n7. **CodeDeploy**: AWSのサービスで、アプリケーションのデプロイを自動化し、更新を管理します。\n\n8. **VPC**: Virtual Private Cloudで、AWSリソースをプライベートなネットワーク内に配置するためのサービスです。\n\n9. **NAT gateway**: NAT（Network Address Translation）ゲートウェイで、プライベートサブネットのインスタンスがインターネットにアクセスするためのサービスです。\n\n10. **ALB**: Application Load Balancerで、アプリケーショントラフィックを複数のターゲットに分散するサービスです。\n\n11. **Fargate**: AWS Fargateは、コンテナをECSやEKSで実行する際に、サーバーレスコンピューティングモデルを提供します。\n\n12. **RDS**: Amazon Relational Database Serviceで、管理されたデータベースサービスを提供します。\n\n13. **SystemManager ParameterStore**: AWS Systems Managerのサービスで、アプリケーションの設定や秘密情報を安全に保存および管理します。\n\nこれらの要素は、AWSのサービスを利用して、アプリケーションの開発、デプロイ、および運用を自動化し、効率的に管理するためのインフラストラクチャを形成しています。\n\nAmazon Nova Pro実行時間: 13686 ms回答:\n\nこの画像は、AWS（Amazon Web Services）環境におけるソフトウェア開発およびデプロイメントのプロセスを示す図です。以下にその要素を詳しく説明します。\n\n1. **GitHub**:\n   - プロジェクトのソースコードがホストされているリポジトリ。\n   - 開発者はここにコードをコミットし、プルリクエストを通じてコードの変更をレビューします。\n\n2. **AWS Cloud**:\n   - クラウドサービスを提供するAmazonのサービス群。\n   - この図では、AWSのさまざまなサービスがソフトウェア開発ライフサイクル（SDLC）でどのように使用されているかを示しています。\n\n3. **CloudWatch**:\n   - AWSのモニタリングサービス。\n   - アプリケーションのパフォーマンスやメトリクスを監視します。\n\n4. **ECR（Elastic Container Registry）**:\n   - コンテナイメージを保存するためのAWSのレジストリサービス。\n   - 開発されたアプリケーションをコンテナ化し、ここに格納します。\n\n5. **CodePipeline**:\n   - AWSの継続的デリバリーサービス。\n   - ソースコードの変更を検出し、ビルド、テスト、デプロイのプロセスを自動化します。\n\n6. **CodeBuild**:\n   - AWSのビルドサービス。\n   - ソースコードをコンパイルし、テストを実行します。\n\n7. **CodeDeploy**:\n   - AWSのデプロイメントサービス。\n   - アプリケーションをAWSのインフラストラクチャにデプロイします。\n\n8. **ECS（Elastic Container Service）**:\n   - AWSのコンテナオーケストレーションサービス。\n   - コンテナ化されたアプリケーションを管理します。\n\n9. **SystemManager ParameterStore**:\n   - AWSの設定管理サービス。\n   - アプリケーションの設定やシークレットを安全に管理します。\n\n10. **VPC（Virtual Private Cloud）**:\n    - AWSの仮想プライベートネットワーク。\n    - アプリケーションをプライベートなネットワーク環境で実行します。\n\n11. **Availability Zone**:\n    - AWSのデータセンターの物理的な場所。\n    - アプリケーションの高可用性と耐障害性を確保するために使用されます。\n\n12. **Public Subnet**:\n    - インターネットに直接接続可能なサブネット。\n    - パブリックIPアドレスを持ち、インターネット\n\nClaude 3.5 Sonnet v2実行時間: 10754 ms回答:\n\nこの画像はAWSのアーキテクチャ図で、CI/CDパイプラインとECSを使用したコンテナ環境の構成を示しています。\n主な構成要素は以下の通りです：\n1. CI/CD部分:\n- GitHubからのソースコード管理\n- CodePipelineによるパイプライン管理\n- CodeBuildによるビルドプロセス\n- CodeDeployによるデプロイ管理\n2. インフラ構成:\nVPC内に複数のAvailability Zone（1a、1c）\n- 各AZに Public SubnetとPrivate Subnet\n- NAT GatewayとInternet Gatewayによるネットワーク制御\n- ALB（Application Load Balancer）による負荷分散\n3. コンテナ環境:\n- ECSクラスターでのコンテナ管理\n- Fargateによるサーバーレスコンテナ実行\n- RDSによるデータベース管理\n4. モニタリングと管理:\n- CloudWatchによる監視\n- Systems Manager Parameter Storeによる設定管理\n- ECRによるコンテナイメージの保管\nこの構成は高可用性と安全性を考慮した設計になっており、マイクロサービスアーキテクチャの実装に適しています。\nLiteのレスポンスがいいですね～\n回答の中身に関しては、僕はProが好みですねいつも思うんですけど、3.5 Sonnetはすごい簡潔に回答してくるので、Proぐらいの人間味（？）がある方がいいですｗ\n画像生成\n質問は以下です。\n\n空飛ぶ車\n\n\nAmazon Nova Canvas実行時間: 1分弱生成された画像:\n\n\nおおおおおおちゃんと空飛んでますね画像生成系のAIは初めて使いましたが、いい感じですね！\n動画生成\n質問は以下です。\n\n空飛ぶ車\n\n\nAmazon Nova Reel実行時間: 4分ぐらい生成された動画:\n\n\nおおおおおおおおおお飛んでる！！6秒動画しか作成できなかったのですが、今後長尺の動画も生成できるようになると思うので、いろんな用途で使えそうですね\n動画解析\n質問は以下で先ほど生成した動画を解析させています。\n\n動画について解説して\n\n\n\nAmazon Nova Lite実行時間: 2212 ms回答:\n\nこの動画は、先進的な飛行機が雲の上を飛んでいる様子をシミュレーションしています。\n機体は黒色で、円筒形のエンジンを機体両側に備えています。\nまた、機体上部に小さな翼がついています。\nこの飛行機は、ジェット機のような外観を持ち、先進的な技術やデザインを示しています。\n雲の中の飛行機は、太陽光の下で輝いており、その美しい外観と動きが際立っています。\n\nAmazon Nova Pro実行時間: 3258 ms回答:\n\nこの動画は、空中を飛ぶ架空の飛行機のCGアニメーションです。\n翼は長方形で、中央にプロペラがついています。\n翼の先端には小さな翼があり、飛行機の尾部には垂直尾翼がついています。\n飛行機のデザインは未来的で、空中での安定性を高めるための工夫が施されています。\n内容を適切に把握していてどちらもいい回答ですね！この精度であれば、レスポンスとコスト的にLiteがよさそう\n文書解析\n質問は以下でfargateのBlack Beltを読み込ませています。\nhttps://pages.awscloud.com/rs/112-TZM-766/images/AWS-Black-Belt_2024_AWS-Fargate-Introduction_1031_v1.pdf\n\n文書について解説して\n\n\n※スクショ撮り忘れたので、画像と以下結果には相違があります\n\nAmazon Nova Lite実行時間: 5152 ms回答:\n\nこの文書は、2024年10月に開催された「AWS Black Belt Online Seminar」のセミナー資料の一部です。資料は、ソリューションアーキテクトの吉田英史によって作成されました。このセミナーでは、AWS Fargate というサービスに焦点を当て、その概要、特徴、開始方法、そして他のコンテナ実行環境との比較などについて説明しています。以下に、文書の内容を詳しく解説します。\n\n### 1. 自己紹介\n\n**吉田英史**  \nアマゾンウェブサービスジャパンでソリューションアーキテクトを務める。主に小売・消費財業界のお客様を支援し、クラウド技術を用いてビジネスの加速を支援することを楽しんでいる。特に好きなAWSサービスはAWS Fargate。\n\n### 2. セミナーの主な対象者\n\n- AWSをこれから利用しようとしているアプリケーションおよびインフラ担当者\n- AWS Fargateの概要や開始方法に興味がある人\n- クラウド上の既存ワークロードのコンテナ化を検討している人\n- オンプレミスの既存コンテナワークロードのクラウド移行を検討している人\n\n### 3. アジェンダ\n\n- AWS Fargateとは\n- AWS FargateとAmazon EC2の違い\n- AWS Fargateの始め方\n- まとめ\n\n### 4. AWS Fargateとは\n\nAWS Fargateは、サーバレスのコンテナ実行環境です。以下のような特徴があります：\n\n- ホストのアップグレードやパッチ適用は不要\n- クラスターのキャパシティ管理は不要\n- 設計による分離とセキュリティの担保\n- 前払い料金なし、使用したリソースに応じて従量課金\n- Fargate SpotとFargate Gravitonによるコスト削減\n\n### 5. AWS FargateとAmazon EC2の違い\n\nAWS FargateとAmazon EC2には、以下の5つの観点で違いがあります：\n\n1. **vCPUとメモリ**  \n   AWS Fargateでは、74種類のvCPUとメモリの組み合わせから選択できます。\n\n2. **ホスト**  \n   AWS Fargateでは、ホストの管理はAWSが行います。\n\n3. **ネットワークモード**  \n   AWS Fargate\n\nAmazon Nova Pro実行時間: 7426 ms回答:\n\nCertainly! Here's a detailed explanation of the document:\n\n---\n\n### AWS Fargate Introduction\n\n**Presenter:**  \n吉田 英史 (Hideshi Yoshida)  \nSolutions Architect at Amazon Web Services Japan  \nFocuses on supporting retail and consumer goods customers.  \nFavorite AWS Service: AWS Fargate\n\n---\n\n### Seminar Overview\n\n**Target Audience:**  \n- Individuals planning to use AWS  \n- Those interested in learning about AWS Fargate, a serverless container runtime environment  \n- Those considering containerizing existing workloads in the cloud  \n- Those considering migrating existing on-premises container workloads to the cloud\n\n---\n\n### Agenda\n\n1. **What is AWS Fargate?**  \n2. **Differences between AWS Fargate and Amazon EC2**  \n3. **Getting Started with AWS Fargate**  \n4. **Summary**\n\n---\n\n### What is AWS Fargate?\n\n**AWS Container Services:**  \n- **Orchestration:** Deployment, scheduling, and scaling of containers  \n- **Image Registry:** Storage for container images  \n- **Hosting:** Container runtime environments  \n- **Other Related Services:** Amazon CloudWatch Container Insights\n\n**Container Runtime Environment Options:**  \n- Amazon ECS  \n- Amazon EC2  \n- AWS Fargate  \n- Amazon EKS  \n- AWS App Runner\n\n**AWS Fargate:**  \n- Serverless container runtime environment  \n- No need for host upgrades or patch applications  \n- No cluster capacity management required  \n- Design ensures isolation and security  \n- Pay-per-use pricing model with no upfront fees  \n- Cost savings with Fargate Spot and Fargate Graviton  \n  (Note: Fargate Graviton is not supported on Amazon EKS and is subject to Compute Savings Plans)\n\n**AWS Fargate Spot (ECS only):**  \n- Option for running fault-tolerant workloads on AWS Fargate  \n- Up to 70% discount compared to regular Fargate pricing  \n- Usable as FARGATE_SPOT capacity provider  \n- Supports AWS Graviton\n\n---\n\n### Differences Between AWS Fargate and Amazon EC2\n\n**Five Key Differences:**  \n1. **vCPU and Memory**  \n2. **Host**  \n3. **Network Mode**  \n4. **Data Volume**  \n5. **Security**\n\n**vCPU and Memory:**  \n- Flexible options: 74 combinations of vCPU and memory  \n- Examples:  \n  - 256 (.25 vCPU): 0.5GB, 1GB, 2GB  \n  - 512 (.\n\nClaude 3.5 Sonnet実行時間: 16380 ms回答:\n\nこの文書は、AWS Black Belt Online Seminarの一環として、AWS Fargateについて解説したプレゼンテーション資料です。主な内容は以下の通りです：\n\n主要なポイント：\n\n1. AWS Fargateの概要\n- サーバーレスのコンテナ実行環境\n- ホスト管理が不要で、従量課金制\n- Fargate SpotとFargate Gravitonによるコスト削減オプションあり\n\n2. Amazon EC2との主な違い（5つの観点）\n- vCPUとメモリの設定オプション\n- ホスト環境の特徴と制約\n- ネットワークモード\n- データボリュームの選択肢\n- セキュリティ面での特徴\n\n3. 特徴的な機能：\n- 74パターンのvCPU/メモリ組み合わせから選択可能\n- awsvpcネットワークモードの採用\n- タスク/Podごとの実行環境分離\n- ECS Execによるデバッグツールのサポートなど\n\n対象読者：\n- AWSこれから利用予定のアプリケーション・インフラ担当者\n- サーバーレスコンテナ環境に関心のある方\n- 既存ワークロードのコンテナ化を検討している方\n- オンプレミスからクラウドへの移行を検討している方\n\n文書の形式：\n- AWS公式のトレーニング資料\n- 2024年作成\n- スライド形式で構成\n- 図表や実例を交えた説明\n\nなお、この資料は2024年9月時点の情報に基づいており、AWS サービスは常にアップデートされるため、最新情報は公式ウェブサイトで確認することが推奨されています。\n途中で回答が途切れているので何とも言い難いですが、内容はちゃんと拾えているように見えますただ、3.5 Sonnet は全体をまとめてくれてますが、Nova達は上から丁寧に説明していますねあと、Proに関しては英語で出力されています\nProに限らず、Novaでは時々英語で出力する挙動が見られました！\nここら辺はプロンプトの制御していくのがよさそうですね\nモデル比較総括\n各モデルの特性評価と所感\nUnderstanding models\n\nAmazon Nova Micro\n\n\n特徴：\n\n爆速レスポンス！！！\n\n\n性能：\n\n申し分ないかと\n\n\n所感：\n\n速い！安い！美味い！（？）ですね\n\n\n\n     2. Amazon Nova Lite\n\n特徴：\n\nマルチモーダル処理で最速\n\n\n性能：\n\n質問への回答もマルチモーダルの読み込みも問題なし\n\n\n所感：\n\nとりあえずの画像や動画の解析で利用するときはこれでよし\n\n\n\n     3. Amazon Nova Pro\n\n特徴：\n\n高度な分析能力\n詳細なマルチモーダル処理\n\n\n性能：\n\n今回の比較では他の2モデルと明確な差が出なかったのでプログラミングなどで要検証\n\n\n所感：\n\n今後もう少し使ってみて判断したいところですね\n\n\n\nCreative content generation\n\nNova Canvas（画像生成）\n\n\n特徴：\n\n高品質な画像生成が可能\n\n\n性能：\n\n1分程度で3つの画像を生成\n\n\n所感：\n\nスライドの画像作ってもらうのとかで使えそう\n\n\n\n      2. Nova Reel（動画生成）\n\n特徴：\n\nテキストや画像から動画生成が可能\n\n\n性能：\n\n4~5分で動画が作成できる\n\n\n所感：\n\n動画が欲しい時は是非使いたいな\n\n\n\n実用面での比較\n\n応答速度\n\n\nMicro > Lite > Pro > Claude\n用途に応じて適切なモデルを選択が重要\n\n      2. 精度と品質\n\nPro ≈ 3.5 Sonnet v2 > Lite > Micro\nより複雑なタスクには上位モデルが必要\n\nさいごに\nとにかく速いのがいいと思いました！今まで回答速度の問題がネックになっていたものがことごとく解決するのではないかと\nまだ精度や癖などが見えていないので、当分使い倒してプロンプトで最適化していければと思います！！！\n新モデルありがとう！！！\n\n\n\n\n    この記事をシェアする\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n                                ←前の記事\n                                \n\n\n\n\n\n\n                                次の記事→\n                                \n\n\n\n\n\n\n\n\n\n\n\n                                著者：kawabata                              \n\n                                2023年 Jr.Champions選出\r\n2023, 2024年 All Certificate選出\r\n最近はもっぱらCDKとAIばかりです                              \n\n\n\n\n\n \n\n\n\n\n\n目次\nはじめにAmazon Novaって何？モデルの種類Amazon Nova モデル総合比較表主な特徴現在の利用可能地域料金モデル比較クイックまとめ質問回答画像認識画像生成動画生成動画解析文書解析モデル比較総括各モデルの特性評価と所感実用面での比較さいごに\nはじめに\nはじめまして！クラウドビルダーズのKawabataと申します。\nre:Invent 2024でBedrockで利用できる新LLMモデル、Amazon Novaが発表されたので早速検証検証！\nAmazon Novaって何？\n本日、Amazon Novaを発表できることを嬉しく思います。Amazon Novaは、最先端のインテリジェンスと業界をリードする価格性能を提供する新世代の基盤モデル（FM）であり、Amazon Bedrockでのみ利用可能です。\n\nAmazon Novaを使用することで、ほとんどすべての生成AIタスクのコストとレイテンシを削減することができます。エンタープライズ・ワークロードに最適化された様々なインテリジェンス・クラスから、複雑なドキュメントやビデオの分析、チャートやダイアグラムの理解、魅力的なビデオコンテンツの生成、洗練されたAIエージェントの構築などをAmazon Nova上で構築することができます。\n\n画像やテキストを処理する必要があるドキュメント処理アプリケーションを開発する場合でも、マーケティングコンテンツを大規模に作成する場合でも、視覚情報を理解して行動できるAIアシスタントを構築する場合でも、Amazon Novaは、理解モデルとクリエイティブコンテンツ生成モデルの2つのカテゴリーで、必要なインテリジェンスと柔軟性を提供します。\n\nAmazon Novaの理解モデルは、テキスト、画像、動画の入力を受け付け、テキスト出力を生成します。アマゾンのクリエイティブ・コンテンツ生成モデルは、テキストと画像の入力を受け付け、画像または動画の出力を生成します。\n\nhttps://aws.amazon.com/jp/blogs/aws/introducing-amazon-nova-frontier-intelligence-and-industry-leading-price-performance/\nより和訳\nコストとレイテンシは押さえて、生成AIタスクいろいろできるよ～って感じみたいですね！これは期待大！！！\nモデルの種類\n6種類のNovaモデルが発表され、現在は5種類が提供されています。Premierのみ2025年初旬に提供予定とのこと。\nAmazon Nova モデル総合比較表\n機能/特徴Nova MicroNova LiteNova ProNova PremierNova CanvasNova Reel処理タイプテキストのみマルチモーダルマルチモーダルマルチモーダル画像生成動画生成応答速度最速高速標準–––コンテキスト長128Kトークン300Kトークン300Kトークン–––得意分野– テキスト要約– 翻訳– 分類– チャット– コーディング– リアルタイム顧客対応– 文書分析– 画像・動画分析– 基本的なQA– 複雑な文書分析– 高度な画像理解– API連携処理– 詳細な推論– 複雑な推論– モデル蒸留の教師– 画像生成– 画像編集– スタイル制御– インペインティング– アウトペインティング– 動画生成– シーン制御– カメラワーク– 動画編集マルチモーダル非対応– 画像処理– 動画処理（最大30分）– 高度な画像処理– 詳細な動画分析– 複雑な図表理解–– 画像入力– テキスト入力– 画像入力– テキスト入力カスタマイズ– ファインチューニング– モデル蒸留– テキスト/マルチモーダルファインチューニング– 高度なファインチューニング– 教師モデルとして利用可–– – コスト効率最も効率的良好中程度–––推奨用途– チャットボット– 高速レスポンス要件– 基本的な文書処理– 基本的な画像認識– 一般的な文書分析– 顧客対応– 複雑な分析タスク– 専門文書の理解– 高度な推論–– マーケティング素材– 商品画像– アート制作– 広告動画– プロモーション– 教育コンテンツリリース状況利用可能利用可能利用可能2025年初旬予定利用可能利用可能出力形式テキストテキストテキストテキスト画像動画\n主な特徴\n\n200以上の言語に対応（特に15の主要言語で高性能）\n組み込みの安全性制御\n生成されるすべての画像と動画にデジタルウォーターマーク\nカスタマイズ可能（ファインチューニング対応）\nAmazon Bedrockの機能（Knowledge Bases、Agents、Guardrails）と統合\n\n現在の利用可能地域\n\nUS East（バージニア北部）\nUS West（オレゴン）\nMicro, Lite, ProはUS East（オハイオ）でクロスリージョン推論が可能\n\n料金\n確認でき次第更新します\nモデル比較\nクイックまとめ\nUnderstanding models\n\n応答速度: Micro > Lite > Pro > Sonnet 3.5 v2\n精度と品質: Pro ≈ 3.5 Sonnet v2 > Lite > Micro\n\n応答速度がとにかくよかったです！生成される内容も申し分ないかとただ、たまに英語で回答されることがあるので、プロンプトでの制御が必要かも！？\nCreative content generation\nプロンプト通りのものを作成してくれました！ただ、ものによっては全然なこともあったので、こちらもプロンプトで制御する必要があるかもしれません（サーフィンするカンガルーと入力したら、普通に人がサーフィンしてました…）\n質問回答\n質問は以下です。\n\nAmazon Bedrockについて教えて\n\n\n\nAmazon Nova Micro実行時間: 3080 ms回答:\n\nAmazon Bedrockは、Amazon Web Services (AWS) が提供する基盤となるサービスであり、高度な機械学習（ML）モデルと生成AI（Artificial Intelligence）を構築、デプロイ、および管理するためのプラットフォームです。以下に、Amazon Bedrockに関する重要なポイントを紹介します。\n\n### 主要機能と特徴\n\n1. **基盤となるMLモデルの提供**\n   - Amazon Bedrockは、大規模な言語モデル（LLM）やその他の機械学習モデルを提供します。これらのモデルは、テキスト生成、翻訳、質問応答、データ分析など、様々なアプリケーションに利用できます。\n\n2. **カスタマイズとトレーニング**\n   - カスタマイズされたモデルを作成し、特定の用語集やデータセットに合わせてトレーニングすることができます。これにより、特定の業界や用途に合わせたパーソナライズされたAIソリューションを提供します。\n\n3. **インテグレーションとデプロイメント**\n   - Amazon Bedrockは、AWSの他のサービスとシームレスに統合され、AWSのグローバルインフラストラクチャを活用してスケール可能です。また、モデルを簡単にデプロイし、オンデマンドで利用できるように設計されています。\n\n4. **セキュリティとプライバシー**\n   - データのプライバシーとセキュリティに重点を置いており、データの管理、アクセス制御、データの保護に関連するAWSのベストプラクティスを採用しています。\n\n5. **コスト効率**\n   - オンデマンドの課金モデルを採用しており、ユーザーは実際に使用したリソースに対して支払います。これにより、コストを管理しやすくなります。\n\n### 利用シーン\n\n1. **コンテンツ生成**\n   - 自動記事生成、脚本作成、翻訳、およびその他のコンテンツ生成タスクに適用できます。\n\n2. **カスタマーサポート**\n   - チャットボットや問い合わせ対応システムに組み込むことで、高度な質問応答機能を提供できます。\n\n3. **データ分析**\n   - データの分析、要約、および洞察の抽出に使用できます。\n\n4. **特定業界向けアプリケーション**\n   - 医療、法律、金融などの特定業界で専門的な情報の生成や分析に活用できます。\n\nAmazon Nova Lite実行時間: 4124 ms回答:\n\nAmazon Bedrock は、Amazon Web Services (AWS) が提供する機械学習モデルを開発、トレーニング、デプロイするための新しいサービスです。これは、開発者が強力なAIモデルを構築し、カスタマイズするために必要なツールとインフラストラクチャを提供します。以下に、Amazon Bedrock の主要な機能と特徴を詳しく説明します。\n\n### 主要機能\n\n1. **カスタムモデルの開発とトレーニング**\n   - **ツールとライブラリのサポート**: Amazon Bedrock は、PyTorch、TensorFlow、およびその他の主要な機械学習フレームワークをサポートしています。これにより、開発者は既存のツールと統合し、好みのライブラリを使用してモデルを開発できます。\n   - **自動機械学習 (AutoML)**: 自動化されたモデルのトレーニングとチューニングをサポートし、データサイエンティストのスキルレベルに関係なく、高度なモデルの構築を容易にします。\n\n2. **高度なモデルの利用**\n   - **AWS の機械学習モデルライブラリ**: Amazon Bedrock は、AWS が提供する幅広い機械学習モデルにアクセスできるようにします。これには、画像認識、自然言語処理、時系列予測などのさまざまなタスクに適用可能なモデルが含まれます。\n   - **サードパーティモデルのサポート**: 開発者は、サードパーティのモデルも利用できるようにし、より幅広い選択肢を提供します。\n\n3. **モデルのデプロイとスケーリング**\n   - **クラウドベースのインフラストラクチャ**: 高度な計算能力と柔軟なスケーリングを提供し、モデルのトレーニングとデプロイにおいて柔軟性と効率性を確保します。\n   - **容易な統合**: Amazon Bedrock は、AWS の他のサービス（例：Amazon SageMaker、AWS Lambda）とシームレスに統合され、開発者にとってスムーズな開発とデプロイの体験を提供します。\n\n4. **セキュリティとコンプライアンス**\n   - **データ保護**: モデルの開発とデプロイにおけるデータのセキュリティとプライバシーを重視し、業界標準のセキュリティプロトコルに準拠しています。\n   - **コンプライアンスサポート**:\n\nAmazon Nova Pro実行時間: 6358 ms回答:\n\nAmazon Bedrockは、Amazon Web Services（AWS）が提供するサービスで、主に機械学習モデルの開発、デプロイ、管理を簡素化する目的で設計されています。以下にAmazon Bedrockの主な特徴と機能について説明します。\n\n### 主な特徴\n\n1. **統合された開発環境**:\n   - 機械学習モデルの構築、トレーニング、デプロイを一元化されたプラットフォームで行うことができます。\n\n2. **幅広いモデルサポート**:\n   - 様々な種類の機械学習モデル（例：自然言語処理、コンピュータビジョン、予測分析など）をサポートしています。\n\n3. **自動化された機械学習（AutoML）**:\n   - データサイエンティストでなくても、自動化されたツールを使用して高性能なモデルを構築できます。\n\n4. **スケーラビリティ**:\n   - AWSのインフラストラクチャを活用して、需要に合わせて容易にスケールアップまたはスケールダウンできます。\n\n5. **コスト効率**:\n   - ペイ・アス・ユー・ゴーの課金モデルで、実際に使用したリソースに対してのみ課金されます。\n\n### 主要な機能\n\n1. **モデルの選択と準備**:\n   - 既存のAWS提供モデルから選択したり、カスタムのデータセットを使用して新しいモデルをトレーニングすることができます。\n\n2. **データの前処理**:\n   - データクリーニング、特徴量エンジニアリング、データ分割などの前処理ステップを効率的に行うことができます。\n\n3. **モデルのトレーニング**:\n   - ハイパーパラメータのチューニング、モデルの最適化などのトレーニングプロセスを自動化または手動で行うことができます。\n\n4. **モデルの評価**:\n   - モデルの性能を評価するための様々なメトリック（例：精度、リコール、F1スコアなど）を提供します。\n\n5. **モデルのデプロイ**:\n   - トレーニング済みのモデルを簡単にデプロイし、リアルタイムまたはバッチ予測を実行できます。\n\n6. **モニタリングと管理**:\n   - デプロイされたモデルのパフォーマンスを継続的にモニタリングし、必要に応じて再トレーニングや調整を行うことができます。\n\n### ユースケース\n\n- **自然言語処理（NLP）**:\n\nClaude 3.5 Sonnet v2実行時間: 13745 ms回答:\n\nAmazon Bedrockは、AWSが提供する生成AIのフルマネージドサービスです。主な特徴について説明します：\n\n主な特徴：\n\n1. 複数のファウンデーションモデルへのアクセス\n- Anthropic Claude\n- Meta Llama 2\n- AI21 Labs\n- Stability AI\n- Amazon Titan\nなどの様々なモデルを単一のAPIで利用可能\n\n2. セキュリティとプライバシー\n- AWSのセキュリティ基準に準拠\n- データは暗号化され、モデルプロバイダーとも共有されない\n- VPCエンドポイントのサポート\n\n3. カスタマイズ機能\n- モデルのファインチューニング\n- プロンプトエンジニアリング\n- カスタムモデルの作成が可能\n\n4. 主な用途：\n- テキスト生成\n- コード生成\n- 画像生成\n- 要約\n- 質問応答\n- データ分析\n\n5. 利点：\n- サーバーレス\n- スケーラブル\n- 従量課金制\n- 低レイテンシー\n- APIを通じた簡単な統合\n\n6. 開発ツール：\n- SDK対応（Python, Java等）\n- AWS Console\n- CLI\n- APIリファレンス\n\n7. コスト管理：\n- 使用量ベースの課金\n- モデルごとの料金設定\n- 使用量の監視と制御が可能\n\nこれらの特徴により、企業は自社のアプリケーションに容易にAI機能を統合することができます。\nLiteとProで回答が切れてしまっていますが、たぶんプレイグラウンドの設定の問題だと思います\n所感ですが、Microがとにかく速い！！普段3.5 Sonnet使いなので、その速さに驚きました…\n回答の精度も悪くないと思います（もうちょっと差の付きそうな質問考えればよかった）\n画像認識\n質問は以下です。\n\n画像について解説して\n\n利用した画像は以下です。\n\n\n\nAmazon Nova Lite実行時間: 6219 ms回答:\n\nこの図は、AWS（Amazon Web Services）のクラウド環境におけるインフラストラクチャとサービスの配置を示しています。以下に、図に示されている主要な要素とそれらの役割について解説します。\n\n1. **AWS Cloud**: AWSクラウドサービス全体を表しています。\n\n2. **CodePipeline**: AWSのサービスで、ソフトウェアの開発、デプロイ、および継続的インテグレーション/継続的デリバリー（CI/CD）プロセスを自動化します。\n\n3. **ECS**: Amazon Elastic Container Serviceで、コンテナ化されたアプリケーションを管理するためのサービスです。\n\n4. **CloudWatch**: AWSのサービスで、リソースの監視、ログの収集、アラートの設定を行います。\n\n5. **ECR**: Amazon Elastic Container Registryで、Dockerイメージを保存および取得するためのサービスです。\n\n6. **CodeBuild**: AWSのサービスで、コードのビルド、テスト、およびパッケージングを行うサービスです。\n\n7. **CodeDeploy**: AWSのサービスで、アプリケーションのデプロイを自動化し、更新を管理します。\n\n8. **VPC**: Virtual Private Cloudで、AWSリソースをプライベートなネットワーク内に配置するためのサービスです。\n\n9. **NAT gateway**: NAT（Network Address Translation）ゲートウェイで、プライベートサブネットのインスタンスがインターネットにアクセスするためのサービスです。\n\n10. **ALB**: Application Load Balancerで、アプリケーショントラフィックを複数のターゲットに分散するサービスです。\n\n11. **Fargate**: AWS Fargateは、コンテナをECSやEKSで実行する際に、サーバーレスコンピューティングモデルを提供します。\n\n12. **RDS**: Amazon Relational Database Serviceで、管理されたデータベースサービスを提供します。\n\n13. **SystemManager ParameterStore**: AWS Systems Managerのサービスで、アプリケーションの設定や秘密情報を安全に保存および管理します。\n\nこれらの要素は、AWSのサービスを利用して、アプリケーションの開発、デプロイ、および運用を自動化し、効率的に管理するためのインフラストラクチャを形成しています。\n\nAmazon Nova Pro実行時間: 13686 ms回答:\n\nこの画像は、AWS（Amazon Web Services）環境におけるソフトウェア開発およびデプロイメントのプロセスを示す図です。以下にその要素を詳しく説明します。\n\n1. **GitHub**:\n   - プロジェクトのソースコードがホストされているリポジトリ。\n   - 開発者はここにコードをコミットし、プルリクエストを通じてコードの変更をレビューします。\n\n2. **AWS Cloud**:\n   - クラウドサービスを提供するAmazonのサービス群。\n   - この図では、AWSのさまざまなサービスがソフトウェア開発ライフサイクル（SDLC）でどのように使用されているかを示しています。\n\n3. **CloudWatch**:\n   - AWSのモニタリングサービス。\n   - アプリケーションのパフォーマンスやメトリクスを監視します。\n\n4. **ECR（Elastic Container Registry）**:\n   - コンテナイメージを保存するためのAWSのレジストリサービス。\n   - 開発されたアプリケーションをコンテナ化し、ここに格納します。\n\n5. **CodePipeline**:\n   - AWSの継続的デリバリーサービス。\n   - ソースコードの変更を検出し、ビルド、テスト、デプロイのプロセスを自動化します。\n\n6. **CodeBuild**:\n   - AWSのビルドサービス。\n   - ソースコードをコンパイルし、テストを実行します。\n\n7. **CodeDeploy**:\n   - AWSのデプロイメントサービス。\n   - アプリケーションをAWSのインフラストラクチャにデプロイします。\n\n8. **ECS（Elastic Container Service）**:\n   - AWSのコンテナオーケストレーションサービス。\n   - コンテナ化されたアプリケーションを管理します。\n\n9. **SystemManager ParameterStore**:\n   - AWSの設定管理サービス。\n   - アプリケーションの設定やシークレットを安全に管理します。\n\n10. **VPC（Virtual Private Cloud）**:\n    - AWSの仮想プライベートネットワーク。\n    - アプリケーションをプライベートなネットワーク環境で実行します。\n\n11. **Availability Zone**:\n    - AWSのデータセンターの物理的な場所。\n    - アプリケーションの高可用性と耐障害性を確保するために使用されます。\n\n12. **Public Subnet**:\n    - インターネットに直接接続可能なサブネット。\n    - パブリックIPアドレスを持ち、インターネット\n\nClaude 3.5 Sonnet v2実行時間: 10754 ms回答:\n\nこの画像はAWSのアーキテクチャ図で、CI/CDパイプラインとECSを使用したコンテナ環境の構成を示しています。\n主な構成要素は以下の通りです：\n1. CI/CD部分:\n- GitHubからのソースコード管理\n- CodePipelineによるパイプライン管理\n- CodeBuildによるビルドプロセス\n- CodeDeployによるデプロイ管理\n2. インフラ構成:\nVPC内に複数のAvailability Zone（1a、1c）\n- 各AZに Public SubnetとPrivate Subnet\n- NAT GatewayとInternet Gatewayによるネットワーク制御\n- ALB（Application Load Balancer）による負荷分散\n3. コンテナ環境:\n- ECSクラスターでのコンテナ管理\n- Fargateによるサーバーレスコンテナ実行\n- RDSによるデータベース管理\n4. モニタリングと管理:\n- CloudWatchによる監視\n- Systems Manager Parameter Storeによる設定管理\n- ECRによるコンテナイメージの保管\nこの構成は高可用性と安全性を考慮した設計になっており、マイクロサービスアーキテクチャの実装に適しています。\nLiteのレスポンスがいいですね～\n回答の中身に関しては、僕はProが好みですねいつも思うんですけど、3.5 Sonnetはすごい簡潔に回答してくるので、Proぐらいの人間味（？）がある方がいいですｗ\n画像生成\n質問は以下です。\n\n空飛ぶ車\n\n\nAmazon Nova Canvas実行時間: 1分弱生成された画像:\n\n\nおおおおおおちゃんと空飛んでますね画像生成系のAIは初めて使いましたが、いい感じですね！\n動画生成\n質問は以下です。\n\n空飛ぶ車\n\n\nAmazon Nova Reel実行時間: 4分ぐらい生成された動画:\n\n\nおおおおおおおおおお飛んでる！！6秒動画しか作成できなかったのですが、今後長尺の動画も生成できるようになると思うので、いろんな用途で使えそうですね\n動画解析\n質問は以下で先ほど生成した動画を解析させています。\n\n動画について解説して\n\n\n\nAmazon Nova Lite実行時間: 2212 ms回答:\n\nこの動画は、先進的な飛行機が雲の上を飛んでいる様子をシミュレーションしています。\n機体は黒色で、円筒形のエンジンを機体両側に備えています。\nまた、機体上部に小さな翼がついています。\nこの飛行機は、ジェット機のような外観を持ち、先進的な技術やデザインを示しています。\n雲の中の飛行機は、太陽光の下で輝いており、その美しい外観と動きが際立っています。\n\nAmazon Nova Pro実行時間: 3258 ms回答:\n\nこの動画は、空中を飛ぶ架空の飛行機のCGアニメーションです。\n翼は長方形で、中央にプロペラがついています。\n翼の先端には小さな翼があり、飛行機の尾部には垂直尾翼がついています。\n飛行機のデザインは未来的で、空中での安定性を高めるための工夫が施されています。\n内容を適切に把握していてどちらもいい回答ですね！この精度であれば、レスポンスとコスト的にLiteがよさそう\n文書解析\n質問は以下でfargateのBlack Beltを読み込ませています。\nhttps://pages.awscloud.com/rs/112-TZM-766/images/AWS-Black-Belt_2024_AWS-Fargate-Introduction_1031_v1.pdf\n\n文書について解説して\n\n\n※スクショ撮り忘れたので、画像と以下結果には相違があります\n\nAmazon Nova Lite実行時間: 5152 ms回答:\n\nこの文書は、2024年10月に開催された「AWS Black Belt Online Seminar」のセミナー資料の一部です。資料は、ソリューションアーキテクトの吉田英史によって作成されました。このセミナーでは、AWS Fargate というサービスに焦点を当て、その概要、特徴、開始方法、そして他のコンテナ実行環境との比較などについて説明しています。以下に、文書の内容を詳しく解説します。\n\n### 1. 自己紹介\n\n**吉田英史**  \nアマゾンウェブサービスジャパンでソリューションアーキテクトを務める。主に小売・消費財業界のお客様を支援し、クラウド技術を用いてビジネスの加速を支援することを楽しんでいる。特に好きなAWSサービスはAWS Fargate。\n\n### 2. セミナーの主な対象者\n\n- AWSをこれから利用しようとしているアプリケーションおよびインフラ担当者\n- AWS Fargateの概要や開始方法に興味がある人\n- クラウド上の既存ワークロードのコンテナ化を検討している人\n- オンプレミスの既存コンテナワークロードのクラウド移行を検討している人\n\n### 3. アジェンダ\n\n- AWS Fargateとは\n- AWS FargateとAmazon EC2の違い\n- AWS Fargateの始め方\n- まとめ\n\n### 4. AWS Fargateとは\n\nAWS Fargateは、サーバレスのコンテナ実行環境です。以下のような特徴があります：\n\n- ホストのアップグレードやパッチ適用は不要\n- クラスターのキャパシティ管理は不要\n- 設計による分離とセキュリティの担保\n- 前払い料金なし、使用したリソースに応じて従量課金\n- Fargate SpotとFargate Gravitonによるコスト削減\n\n### 5. AWS FargateとAmazon EC2の違い\n\nAWS FargateとAmazon EC2には、以下の5つの観点で違いがあります：\n\n1. **vCPUとメモリ**  \n   AWS Fargateでは、74種類のvCPUとメモリの組み合わせから選択できます。\n\n2. **ホスト**  \n   AWS Fargateでは、ホストの管理はAWSが行います。\n\n3. **ネットワークモード**  \n   AWS Fargate\n\nAmazon Nova Pro実行時間: 7426 ms回答:\n\nCertainly! Here's a detailed explanation of the document:\n\n---\n\n### AWS Fargate Introduction\n\n**Presenter:**  \n吉田 英史 (Hideshi Yoshida)  \nSolutions Architect at Amazon Web Services Japan  \nFocuses on supporting retail and consumer goods customers.  \nFavorite AWS Service: AWS Fargate\n\n---\n\n### Seminar Overview\n\n**Target Audience:**  \n- Individuals planning to use AWS  \n- Those interested in learning about AWS Fargate, a serverless container runtime environment  \n- Those considering containerizing existing workloads in the cloud  \n- Those considering migrating existing on-premises container workloads to the cloud\n\n---\n\n### Agenda\n\n1. **What is AWS Fargate?**  \n2. **Differences between AWS Fargate and Amazon EC2**  \n3. **Getting Started with AWS Fargate**  \n4. **Summary**\n\n---\n\n### What is AWS Fargate?\n\n**AWS Container Services:**  \n- **Orchestration:** Deployment, scheduling, and scaling of containers  \n- **Image Registry:** Storage for container images  \n- **Hosting:** Container runtime environments  \n- **Other Related Services:** Amazon CloudWatch Container Insights\n\n**Container Runtime Environment Options:**  \n- Amazon ECS  \n- Amazon EC2  \n- AWS Fargate  \n- Amazon EKS  \n- AWS App Runner\n\n**AWS Fargate:**  \n- Serverless container runtime environment  \n- No need for host upgrades or patch applications  \n- No cluster capacity management required  \n- Design ensures isolation and security  \n- Pay-per-use pricing model with no upfront fees  \n- Cost savings with Fargate Spot and Fargate Graviton  \n  (Note: Fargate Graviton is not supported on Amazon EKS and is subject to Compute Savings Plans)\n\n**AWS Fargate Spot (ECS only):**  \n- Option for running fault-tolerant workloads on AWS Fargate  \n- Up to 70% discount compared to regular Fargate pricing  \n- Usable as FARGATE_SPOT capacity provider  \n- Supports AWS Graviton\n\n---\n\n### Differences Between AWS Fargate and Amazon EC2\n\n**Five Key Differences:**  \n1. **vCPU and Memory**  \n2. **Host**  \n3. **Network Mode**  \n4. **Data Volume**  \n5. **Security**\n\n**vCPU and Memory:**  \n- Flexible options: 74 combinations of vCPU and memory  \n- Examples:  \n  - 256 (.25 vCPU): 0.5GB, 1GB, 2GB  \n  - 512 (.\n\nClaude 3.5 Sonnet実行時間: 16380 ms回答:\n\nこの文書は、AWS Black Belt Online Seminarの一環として、AWS Fargateについて解説したプレゼンテーション資料です。主な内容は以下の通りです：\n\n主要なポイント：\n\n1. AWS Fargateの概要\n- サーバーレスのコンテナ実行環境\n- ホスト管理が不要で、従量課金制\n- Fargate SpotとFargate Gravitonによるコスト削減オプションあり\n\n2. Amazon EC2との主な違い（5つの観点）\n- vCPUとメモリの設定オプション\n- ホスト環境の特徴と制約\n- ネットワークモード\n- データボリュームの選択肢\n- セキュリティ面での特徴\n\n3. 特徴的な機能：\n- 74パターンのvCPU/メモリ組み合わせから選択可能\n- awsvpcネットワークモードの採用\n- タスク/Podごとの実行環境分離\n- ECS Execによるデバッグツールのサポートなど\n\n対象読者：\n- AWSこれから利用予定のアプリケーション・インフラ担当者\n- サーバーレスコンテナ環境に関心のある方\n- 既存ワークロードのコンテナ化を検討している方\n- オンプレミスからクラウドへの移行を検討している方\n\n文書の形式：\n- AWS公式のトレーニング資料\n- 2024年作成\n- スライド形式で構成\n- 図表や実例を交えた説明\n\nなお、この資料は2024年9月時点の情報に基づいており、AWS サービスは常にアップデートされるため、最新情報は公式ウェブサイトで確認することが推奨されています。\n途中で回答が途切れているので何とも言い難いですが、内容はちゃんと拾えているように見えますただ、3.5 Sonnet は全体をまとめてくれてますが、Nova達は上から丁寧に説明していますねあと、Proに関しては英語で出力されています\nProに限らず、Novaでは時々英語で出力する挙動が見られました！\nここら辺はプロンプトの制御していくのがよさそうですね\nモデル比較総括\n各モデルの特性評価と所感\nUnderstanding models\n\nAmazon Nova Micro\n\n\n特徴：\n\n爆速レスポンス！！！\n\n\n性能：\n\n申し分ないかと\n\n\n所感：\n\n速い！安い！美味い！（？）ですね\n\n\n\n     2. Amazon Nova Lite\n\n特徴：\n\nマルチモーダル処理で最速\n\n\n性能：\n\n質問への回答もマルチモーダルの読み込みも問題なし\n\n\n所感：\n\nとりあえずの画像や動画の解析で利用するときはこれでよし\n\n\n\n     3. Amazon Nova Pro\n\n特徴：\n\n高度な分析能力\n詳細なマルチモーダル処理\n\n\n性能：\n\n今回の比較では他の2モデルと明確な差が出なかったのでプログラミングなどで要検証\n\n\n所感：\n\n今後もう少し使ってみて判断したいところですね\n\n\n\nCreative content generation\n\nNova Canvas（画像生成）\n\n\n特徴：\n\n高品質な画像生成が可能\n\n\n性能：\n\n1分程度で3つの画像を生成\n\n\n所感：\n\nスライドの画像作ってもらうのとかで使えそう\n\n\n\n      2. Nova Reel（動画生成）\n\n特徴：\n\nテキストや画像から動画生成が可能\n\n\n性能：\n\n4~5分で動画が作成できる\n\n\n所感：\n\n動画が欲しい時は是非使いたいな\n\n\n\n実用面での比較\n\n応答速度\n\n\nMicro > Lite > Pro > Claude\n用途に応じて適切なモデルを選択が重要\n\n      2. 精度と品質\n\nPro ≈ 3.5 Sonnet v2 > Lite > Micro\nより複雑なタスクには上位モデルが必要\n\nさいごに\nとにかく速いのがいいと思いました！今まで回答速度の問題がネックになっていたものがことごとく解決するのではないかと\nまだ精度や癖などが見えていないので、当分使い倒してプロンプトで最適化していければと思います！！！\n新モデルありがとう！！！\n\n\n\n\n    この記事をシェアする\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n                                ←前の記事\n                                \n\n\n\n\n\n\n                                次の記事→\n                                \n\n\n\n\n\n\n\n\n\n\n\n                                著者：kawabata                              \n\n                                2023年 Jr.Champions選出\r\n2023, 2024年 All Certificate選出\r\n最近はもっぱらCDKとAIばかりです                              \n\n\n\n \n\n \n\n目次\nはじめにAmazon Novaって何？モデルの種類Amazon Nova モデル総合比較表主な特徴現在の利用可能地域料金モデル比較クイックまとめ質問回答画像認識画像生成動画生成動画解析文書解析モデル比較総括各モデルの特性評価と所感実用面での比較さいごに\nはじめに\nはじめまして！クラウドビルダーズのKawabataと申します。\nre:Invent 2024でBedrockで利用できる新LLMモデル、Amazon Novaが発表されたので早速検証検証！\nAmazon Novaって何？\n本日、Amazon Novaを発表できることを嬉しく思います。Amazon Novaは、最先端のインテリジェンスと業界をリードする価格性能を提供する新世代の基盤モデル（FM）であり、Amazon Bedrockでのみ利用可能です。\n\nAmazon Novaを使用することで、ほとんどすべての生成AIタスクのコストとレイテンシを削減することができます。エンタープライズ・ワークロードに最適化された様々なインテリジェンス・クラスから、複雑なドキュメントやビデオの分析、チャートやダイアグラムの理解、魅力的なビデオコンテンツの生成、洗練されたAIエージェントの構築などをAmazon Nova上で構築することができます。\n\n画像やテキストを処理する必要があるドキュメント処理アプリケーションを開発する場合でも、マーケティングコンテンツを大規模に作成する場合でも、視覚情報を理解して行動できるAIアシスタントを構築する場合でも、Amazon Novaは、理解モデルとクリエイティブコンテンツ生成モデルの2つのカテゴリーで、必要なインテリジェンスと柔軟性を提供します。\n\nAmazon Novaの理解モデルは、テキスト、画像、動画の入力を受け付け、テキスト出力を生成します。アマゾンのクリエイティブ・コンテンツ生成モデルは、テキストと画像の入力を受け付け、画像または動画の出力を生成します。\n\nhttps://aws.amazon.com/jp/blogs/aws/introducing-amazon-nova-frontier-intelligence-and-industry-leading-price-performance/\nより和訳\nコストとレイテンシは押さえて、生成AIタスクいろいろできるよ～って感じみたいですね！これは期待大！！！\nモデルの種類\n6種類のNovaモデルが発表され、現在は5種類が提供されています。Premierのみ2025年初旬に提供予定とのこと。\nAmazon Nova モデル総合比較表\n機能/特徴Nova MicroNova LiteNova ProNova PremierNova CanvasNova Reel処理タイプテキストのみマルチモーダルマルチモーダルマルチモーダル画像生成動画生成応答速度最速高速標準–––コンテキスト長128Kトークン300Kトークン300Kトークン–––得意分野– テキスト要約– 翻訳– 分類– チャット– コーディング– リアルタイム顧客対応– 文書分析– 画像・動画分析– 基本的なQA– 複雑な文書分析– 高度な画像理解– API連携処理– 詳細な推論– 複雑な推論– モデル蒸留の教師– 画像生成– 画像編集– スタイル制御– インペインティング– アウトペインティング– 動画生成– シーン制御– カメラワーク– 動画編集マルチモーダル非対応– 画像処理– 動画処理（最大30分）– 高度な画像処理– 詳細な動画分析– 複雑な図表理解–– 画像入力– テキスト入力– 画像入力– テキスト入力カスタマイズ– ファインチューニング– モデル蒸留– テキスト/マルチモーダルファインチューニング– 高度なファインチューニング– 教師モデルとして利用可–– – コスト効率最も効率的良好中程度–––推奨用途– チャットボット– 高速レスポンス要件– 基本的な文書処理– 基本的な画像認識– 一般的な文書分析– 顧客対応– 複雑な分析タスク– 専門文書の理解– 高度な推論–– マーケティング素材– 商品画像– アート制作– 広告動画– プロモーション– 教育コンテンツリリース状況利用可能利用可能利用可能2025年初旬予定利用可能利用可能出力形式テキストテキストテキストテキスト画像動画\n主な特徴\n\n200以上の言語に対応（特に15の主要言語で高性能）\n組み込みの安全性制御\n生成されるすべての画像と動画にデジタルウォーターマーク\nカスタマイズ可能（ファインチューニング対応）\nAmazon Bedrockの機能（Knowledge Bases、Agents、Guardrails）と統合\n\n現在の利用可能地域\n\nUS East（バージニア北部）\nUS West（オレゴン）\nMicro, Lite, ProはUS East（オハイオ）でクロスリージョン推論が可能\n\n料金\n確認でき次第更新します\nモデル比較\nクイックまとめ\nUnderstanding models\n\n応答速度: Micro > Lite > Pro > Sonnet 3.5 v2\n精度と品質: Pro ≈ 3.5 Sonnet v2 > Lite > Micro\n\n応答速度がとにかくよかったです！生成される内容も申し分ないかとただ、たまに英語で回答されることがあるので、プロンプトでの制御が必要かも！？\nCreative content generation\nプロンプト通りのものを作成してくれました！ただ、ものによっては全然なこともあったので、こちらもプロンプトで制御する必要があるかもしれません（サーフィンするカンガルーと入力したら、普通に人がサーフィンしてました…）\n質問回答\n質問は以下です。\n\nAmazon Bedrockについて教えて\n\n\n\nAmazon Nova Micro実行時間: 3080 ms回答:\n\nAmazon Bedrockは、Amazon Web Services (AWS) が提供する基盤となるサービスであり、高度な機械学習（ML）モデルと生成AI（Artificial Intelligence）を構築、デプロイ、および管理するためのプラットフォームです。以下に、Amazon Bedrockに関する重要なポイントを紹介します。\n\n### 主要機能と特徴\n\n1. **基盤となるMLモデルの提供**\n   - Amazon Bedrockは、大規模な言語モデル（LLM）やその他の機械学習モデルを提供します。これらのモデルは、テキスト生成、翻訳、質問応答、データ分析など、様々なアプリケーションに利用できます。\n\n2. **カスタマイズとトレーニング**\n   - カスタマイズされたモデルを作成し、特定の用語集やデータセットに合わせてトレーニングすることができます。これにより、特定の業界や用途に合わせたパーソナライズされたAIソリューションを提供します。\n\n3. **インテグレーションとデプロイメント**\n   - Amazon Bedrockは、AWSの他のサービスとシームレスに統合され、AWSのグローバルインフラストラクチャを活用してスケール可能です。また、モデルを簡単にデプロイし、オンデマンドで利用できるように設計されています。\n\n4. **セキュリティとプライバシー**\n   - データのプライバシーとセキュリティに重点を置いており、データの管理、アクセス制御、データの保護に関連するAWSのベストプラクティスを採用しています。\n\n5. **コスト効率**\n   - オンデマンドの課金モデルを採用しており、ユーザーは実際に使用したリソースに対して支払います。これにより、コストを管理しやすくなります。\n\n### 利用シーン\n\n1. **コンテンツ生成**\n   - 自動記事生成、脚本作成、翻訳、およびその他のコンテンツ生成タスクに適用できます。\n\n2. **カスタマーサポート**\n   - チャットボットや問い合わせ対応システムに組み込むことで、高度な質問応答機能を提供できます。\n\n3. **データ分析**\n   - データの分析、要約、および洞察の抽出に使用できます。\n\n4. **特定業界向けアプリケーション**\n   - 医療、法律、金融などの特定業界で専門的な情報の生成や分析に活用できます。\n\nAmazon Nova Lite実行時間: 4124 ms回答:\n\nAmazon Bedrock は、Amazon Web Services (AWS) が提供する機械学習モデルを開発、トレーニング、デプロイするための新しいサービスです。これは、開発者が強力なAIモデルを構築し、カスタマイズするために必要なツールとインフラストラクチャを提供します。以下に、Amazon Bedrock の主要な機能と特徴を詳しく説明します。\n\n### 主要機能\n\n1. **カスタムモデルの開発とトレーニング**\n   - **ツールとライブラリのサポート**: Amazon Bedrock は、PyTorch、TensorFlow、およびその他の主要な機械学習フレームワークをサポートしています。これにより、開発者は既存のツールと統合し、好みのライブラリを使用してモデルを開発できます。\n   - **自動機械学習 (AutoML)**: 自動化されたモデルのトレーニングとチューニングをサポートし、データサイエンティストのスキルレベルに関係なく、高度なモデルの構築を容易にします。\n\n2. **高度なモデルの利用**\n   - **AWS の機械学習モデルライブラリ**: Amazon Bedrock は、AWS が提供する幅広い機械学習モデルにアクセスできるようにします。これには、画像認識、自然言語処理、時系列予測などのさまざまなタスクに適用可能なモデルが含まれます。\n   - **サードパーティモデルのサポート**: 開発者は、サードパーティのモデルも利用できるようにし、より幅広い選択肢を提供します。\n\n3. **モデルのデプロイとスケーリング**\n   - **クラウドベースのインフラストラクチャ**: 高度な計算能力と柔軟なスケーリングを提供し、モデルのトレーニングとデプロイにおいて柔軟性と効率性を確保します。\n   - **容易な統合**: Amazon Bedrock は、AWS の他のサービス（例：Amazon SageMaker、AWS Lambda）とシームレスに統合され、開発者にとってスムーズな開発とデプロイの体験を提供します。\n\n4. **セキュリティとコンプライアンス**\n   - **データ保護**: モデルの開発とデプロイにおけるデータのセキュリティとプライバシーを重視し、業界標準のセキュリティプロトコルに準拠しています。\n   - **コンプライアンスサポート**:\n\nAmazon Nova Pro実行時間: 6358 ms回答:\n\nAmazon Bedrockは、Amazon Web Services（AWS）が提供するサービスで、主に機械学習モデルの開発、デプロイ、管理を簡素化する目的で設計されています。以下にAmazon Bedrockの主な特徴と機能について説明します。\n\n### 主な特徴\n\n1. **統合された開発環境**:\n   - 機械学習モデルの構築、トレーニング、デプロイを一元化されたプラットフォームで行うことができます。\n\n2. **幅広いモデルサポート**:\n   - 様々な種類の機械学習モデル（例：自然言語処理、コンピュータビジョン、予測分析など）をサポートしています。\n\n3. **自動化された機械学習（AutoML）**:\n   - データサイエンティストでなくても、自動化されたツールを使用して高性能なモデルを構築できます。\n\n4. **スケーラビリティ**:\n   - AWSのインフラストラクチャを活用して、需要に合わせて容易にスケールアップまたはスケールダウンできます。\n\n5. **コスト効率**:\n   - ペイ・アス・ユー・ゴーの課金モデルで、実際に使用したリソースに対してのみ課金されます。\n\n### 主要な機能\n\n1. **モデルの選択と準備**:\n   - 既存のAWS提供モデルから選択したり、カスタムのデータセットを使用して新しいモデルをトレーニングすることができます。\n\n2. **データの前処理**:\n   - データクリーニング、特徴量エンジニアリング、データ分割などの前処理ステップを効率的に行うことができます。\n\n3. **モデルのトレーニング**:\n   - ハイパーパラメータのチューニング、モデルの最適化などのトレーニングプロセスを自動化または手動で行うことができます。\n\n4. **モデルの評価**:\n   - モデルの性能を評価するための様々なメトリック（例：精度、リコール、F1スコアなど）を提供します。\n\n5. **モデルのデプロイ**:\n   - トレーニング済みのモデルを簡単にデプロイし、リアルタイムまたはバッチ予測を実行できます。\n\n6. **モニタリングと管理**:\n   - デプロイされたモデルのパフォーマンスを継続的にモニタリングし、必要に応じて再トレーニングや調整を行うことができます。\n\n### ユースケース\n\n- **自然言語処理（NLP）**:\n\nClaude 3.5 Sonnet v2実行時間: 13745 ms回答:\n\nAmazon Bedrockは、AWSが提供する生成AIのフルマネージドサービスです。主な特徴について説明します：\n\n主な特徴：\n\n1. 複数のファウンデーションモデルへのアクセス\n- Anthropic Claude\n- Meta Llama 2\n- AI21 Labs\n- Stability AI\n- Amazon Titan\nなどの様々なモデルを単一のAPIで利用可能\n\n2. セキュリティとプライバシー\n- AWSのセキュリティ基準に準拠\n- データは暗号化され、モデルプロバイダーとも共有されない\n- VPCエンドポイントのサポート\n\n3. カスタマイズ機能\n- モデルのファインチューニング\n- プロンプトエンジニアリング\n- カスタムモデルの作成が可能\n\n4. 主な用途：\n- テキスト生成\n- コード生成\n- 画像生成\n- 要約\n- 質問応答\n- データ分析\n\n5. 利点：\n- サーバーレス\n- スケーラブル\n- 従量課金制\n- 低レイテンシー\n- APIを通じた簡単な統合\n\n6. 開発ツール：\n- SDK対応（Python, Java等）\n- AWS Console\n- CLI\n- APIリファレンス\n\n7. コスト管理：\n- 使用量ベースの課金\n- モデルごとの料金設定\n- 使用量の監視と制御が可能\n\nこれらの特徴により、企業は自社のアプリケーションに容易にAI機能を統合することができます。\nLiteとProで回答が切れてしまっていますが、たぶんプレイグラウンドの設定の問題だと思います\n所感ですが、Microがとにかく速い！！普段3.5 Sonnet使いなので、その速さに驚きました…\n回答の精度も悪くないと思います（もうちょっと差の付きそうな質問考えればよかった）\n画像認識\n質問は以下です。\n\n画像について解説して\n\n利用した画像は以下です。\n\n\n\nAmazon Nova Lite実行時間: 6219 ms回答:\n\nこの図は、AWS（Amazon Web Services）のクラウド環境におけるインフラストラクチャとサービスの配置を示しています。以下に、図に示されている主要な要素とそれらの役割について解説します。\n\n1. **AWS Cloud**: AWSクラウドサービス全体を表しています。\n\n2. **CodePipeline**: AWSのサービスで、ソフトウェアの開発、デプロイ、および継続的インテグレーション/継続的デリバリー（CI/CD）プロセスを自動化します。\n\n3. **ECS**: Amazon Elastic Container Serviceで、コンテナ化されたアプリケーションを管理するためのサービスです。\n\n4. **CloudWatch**: AWSのサービスで、リソースの監視、ログの収集、アラートの設定を行います。\n\n5. **ECR**: Amazon Elastic Container Registryで、Dockerイメージを保存および取得するためのサービスです。\n\n6. **CodeBuild**: AWSのサービスで、コードのビルド、テスト、およびパッケージングを行うサービスです。\n\n7. **CodeDeploy**: AWSのサービスで、アプリケーションのデプロイを自動化し、更新を管理します。\n\n8. **VPC**: Virtual Private Cloudで、AWSリソースをプライベートなネットワーク内に配置するためのサービスです。\n\n9. **NAT gateway**: NAT（Network Address Translation）ゲートウェイで、プライベートサブネットのインスタンスがインターネットにアクセスするためのサービスです。\n\n10. **ALB**: Application Load Balancerで、アプリケーショントラフィックを複数のターゲットに分散するサービスです。\n\n11. **Fargate**: AWS Fargateは、コンテナをECSやEKSで実行する際に、サーバーレスコンピューティングモデルを提供します。\n\n12. **RDS**: Amazon Relational Database Serviceで、管理されたデータベースサービスを提供します。\n\n13. **SystemManager ParameterStore**: AWS Systems Managerのサービスで、アプリケーションの設定や秘密情報を安全に保存および管理します。\n\nこれらの要素は、AWSのサービスを利用して、アプリケーションの開発、デプロイ、および運用を自動化し、効率的に管理するためのインフラストラクチャを形成しています。\n\nAmazon Nova Pro実行時間: 13686 ms回答:\n\nこの画像は、AWS（Amazon Web Services）環境におけるソフトウェア開発およびデプロイメントのプロセスを示す図です。以下にその要素を詳しく説明します。\n\n1. **GitHub**:\n   - プロジェクトのソースコードがホストされているリポジトリ。\n   - 開発者はここにコードをコミットし、プルリクエストを通じてコードの変更をレビューします。\n\n2. **AWS Cloud**:\n   - クラウドサービスを提供するAmazonのサービス群。\n   - この図では、AWSのさまざまなサービスがソフトウェア開発ライフサイクル（SDLC）でどのように使用されているかを示しています。\n\n3. **CloudWatch**:\n   - AWSのモニタリングサービス。\n   - アプリケーションのパフォーマンスやメトリクスを監視します。\n\n4. **ECR（Elastic Container Registry）**:\n   - コンテナイメージを保存するためのAWSのレジストリサービス。\n   - 開発されたアプリケーションをコンテナ化し、ここに格納します。\n\n5. **CodePipeline**:\n   - AWSの継続的デリバリーサービス。\n   - ソースコードの変更を検出し、ビルド、テスト、デプロイのプロセスを自動化します。\n\n6. **CodeBuild**:\n   - AWSのビルドサービス。\n   - ソースコードをコンパイルし、テストを実行します。\n\n7. **CodeDeploy**:\n   - AWSのデプロイメントサービス。\n   - アプリケーションをAWSのインフラストラクチャにデプロイします。\n\n8. **ECS（Elastic Container Service）**:\n   - AWSのコンテナオーケストレーションサービス。\n   - コンテナ化されたアプリケーションを管理します。\n\n9. **SystemManager ParameterStore**:\n   - AWSの設定管理サービス。\n   - アプリケーションの設定やシークレットを安全に管理します。\n\n10. **VPC（Virtual Private Cloud）**:\n    - AWSの仮想プライベートネットワーク。\n    - アプリケーションをプライベートなネットワーク環境で実行します。\n\n11. **Availability Zone**:\n    - AWSのデータセンターの物理的な場所。\n    - アプリケーションの高可用性と耐障害性を確保するために使用されます。\n\n12. **Public Subnet**:\n    - インターネットに直接接続可能なサブネット。\n    - パブリックIPアドレスを持ち、インターネット\n\nClaude 3.5 Sonnet v2実行時間: 10754 ms回答:\n\nこの画像はAWSのアーキテクチャ図で、CI/CDパイプラインとECSを使用したコンテナ環境の構成を示しています。\n主な構成要素は以下の通りです：\n1. CI/CD部分:\n- GitHubからのソースコード管理\n- CodePipelineによるパイプライン管理\n- CodeBuildによるビルドプロセス\n- CodeDeployによるデプロイ管理\n2. インフラ構成:\nVPC内に複数のAvailability Zone（1a、1c）\n- 各AZに Public SubnetとPrivate Subnet\n- NAT GatewayとInternet Gatewayによるネットワーク制御\n- ALB（Application Load Balancer）による負荷分散\n3. コンテナ環境:\n- ECSクラスターでのコンテナ管理\n- Fargateによるサーバーレスコンテナ実行\n- RDSによるデータベース管理\n4. モニタリングと管理:\n- CloudWatchによる監視\n- Systems Manager Parameter Storeによる設定管理\n- ECRによるコンテナイメージの保管\nこの構成は高可用性と安全性を考慮した設計になっており、マイクロサービスアーキテクチャの実装に適しています。\nLiteのレスポンスがいいですね～\n回答の中身に関しては、僕はProが好みですねいつも思うんですけど、3.5 Sonnetはすごい簡潔に回答してくるので、Proぐらいの人間味（？）がある方がいいですｗ\n画像生成\n質問は以下です。\n\n空飛ぶ車\n\n\nAmazon Nova Canvas実行時間: 1分弱生成された画像:\n\n\nおおおおおおちゃんと空飛んでますね画像生成系のAIは初めて使いましたが、いい感じですね！\n動画生成\n質問は以下です。\n\n空飛ぶ車\n\n\nAmazon Nova Reel実行時間: 4分ぐらい生成された動画:\n\n\nおおおおおおおおおお飛んでる！！6秒動画しか作成できなかったのですが、今後長尺の動画も生成できるようになると思うので、いろんな用途で使えそうですね\n動画解析\n質問は以下で先ほど生成した動画を解析させています。\n\n動画について解説して\n\n\n\nAmazon Nova Lite実行時間: 2212 ms回答:\n\nこの動画は、先進的な飛行機が雲の上を飛んでいる様子をシミュレーションしています。\n機体は黒色で、円筒形のエンジンを機体両側に備えています。\nまた、機体上部に小さな翼がついています。\nこの飛行機は、ジェット機のような外観を持ち、先進的な技術やデザインを示しています。\n雲の中の飛行機は、太陽光の下で輝いており、その美しい外観と動きが際立っています。\n\nAmazon Nova Pro実行時間: 3258 ms回答:\n\nこの動画は、空中を飛ぶ架空の飛行機のCGアニメーションです。\n翼は長方形で、中央にプロペラがついています。\n翼の先端には小さな翼があり、飛行機の尾部には垂直尾翼がついています。\n飛行機のデザインは未来的で、空中での安定性を高めるための工夫が施されています。\n内容を適切に把握していてどちらもいい回答ですね！この精度であれば、レスポンスとコスト的にLiteがよさそう\n文書解析\n質問は以下でfargateのBlack Beltを読み込ませています。\nhttps://pages.awscloud.com/rs/112-TZM-766/images/AWS-Black-Belt_2024_AWS-Fargate-Introduction_1031_v1.pdf\n\n文書について解説して\n\n\n※スクショ撮り忘れたので、画像と以下結果には相違があります\n\nAmazon Nova Lite実行時間: 5152 ms回答:\n\nこの文書は、2024年10月に開催された「AWS Black Belt Online Seminar」のセミナー資料の一部です。資料は、ソリューションアーキテクトの吉田英史によって作成されました。このセミナーでは、AWS Fargate というサービスに焦点を当て、その概要、特徴、開始方法、そして他のコンテナ実行環境との比較などについて説明しています。以下に、文書の内容を詳しく解説します。\n\n### 1. 自己紹介\n\n**吉田英史**  \nアマゾンウェブサービスジャパンでソリューションアーキテクトを務める。主に小売・消費財業界のお客様を支援し、クラウド技術を用いてビジネスの加速を支援することを楽しんでいる。特に好きなAWSサービスはAWS Fargate。\n\n### 2. セミナーの主な対象者\n\n- AWSをこれから利用しようとしているアプリケーションおよびインフラ担当者\n- AWS Fargateの概要や開始方法に興味がある人\n- クラウド上の既存ワークロードのコンテナ化を検討している人\n- オンプレミスの既存コンテナワークロードのクラウド移行を検討している人\n\n### 3. アジェンダ\n\n- AWS Fargateとは\n- AWS FargateとAmazon EC2の違い\n- AWS Fargateの始め方\n- まとめ\n\n### 4. AWS Fargateとは\n\nAWS Fargateは、サーバレスのコンテナ実行環境です。以下のような特徴があります：\n\n- ホストのアップグレードやパッチ適用は不要\n- クラスターのキャパシティ管理は不要\n- 設計による分離とセキュリティの担保\n- 前払い料金なし、使用したリソースに応じて従量課金\n- Fargate SpotとFargate Gravitonによるコスト削減\n\n### 5. AWS FargateとAmazon EC2の違い\n\nAWS FargateとAmazon EC2には、以下の5つの観点で違いがあります：\n\n1. **vCPUとメモリ**  \n   AWS Fargateでは、74種類のvCPUとメモリの組み合わせから選択できます。\n\n2. **ホスト**  \n   AWS Fargateでは、ホストの管理はAWSが行います。\n\n3. **ネットワークモード**  \n   AWS Fargate\n\nAmazon Nova Pro実行時間: 7426 ms回答:\n\nCertainly! Here's a detailed explanation of the document:\n\n---\n\n### AWS Fargate Introduction\n\n**Presenter:**  \n吉田 英史 (Hideshi Yoshida)  \nSolutions Architect at Amazon Web Services Japan  \nFocuses on supporting retail and consumer goods customers.  \nFavorite AWS Service: AWS Fargate\n\n---\n\n### Seminar Overview\n\n**Target Audience:**  \n- Individuals planning to use AWS  \n- Those interested in learning about AWS Fargate, a serverless container runtime environment  \n- Those considering containerizing existing workloads in the cloud  \n- Those considering migrating existing on-premises container workloads to the cloud\n\n---\n\n### Agenda\n\n1. **What is AWS Fargate?**  \n2. **Differences between AWS Fargate and Amazon EC2**  \n3. **Getting Started with AWS Fargate**  \n4. **Summary**\n\n---\n\n### What is AWS Fargate?\n\n**AWS Container Services:**  \n- **Orchestration:** Deployment, scheduling, and scaling of containers  \n- **Image Registry:** Storage for container images  \n- **Hosting:** Container runtime environments  \n- **Other Related Services:** Amazon CloudWatch Container Insights\n\n**Container Runtime Environment Options:**  \n- Amazon ECS  \n- Amazon EC2  \n- AWS Fargate  \n- Amazon EKS  \n- AWS App Runner\n\n**AWS Fargate:**  \n- Serverless container runtime environment  \n- No need for host upgrades or patch applications  \n- No cluster capacity management required  \n- Design ensures isolation and security  \n- Pay-per-use pricing model with no upfront fees  \n- Cost savings with Fargate Spot and Fargate Graviton  \n  (Note: Fargate Graviton is not supported on Amazon EKS and is subject to Compute Savings Plans)\n\n**AWS Fargate Spot (ECS only):**  \n- Option for running fault-tolerant workloads on AWS Fargate  \n- Up to 70% discount compared to regular Fargate pricing  \n- Usable as FARGATE_SPOT capacity provider  \n- Supports AWS Graviton\n\n---\n\n### Differences Between AWS Fargate and Amazon EC2\n\n**Five Key Differences:**  \n1. **vCPU and Memory**  \n2. **Host**  \n3. **Network Mode**  \n4. **Data Volume**  \n5. **Security**\n\n**vCPU and Memory:**  \n- Flexible options: 74 combinations of vCPU and memory  \n- Examples:  \n  - 256 (.25 vCPU): 0.5GB, 1GB, 2GB  \n  - 512 (.\n\nClaude 3.5 Sonnet実行時間: 16380 ms回答:\n\nこの文書は、AWS Black Belt Online Seminarの一環として、AWS Fargateについて解説したプレゼンテーション資料です。主な内容は以下の通りです：\n\n主要なポイント：\n\n1. AWS Fargateの概要\n- サーバーレスのコンテナ実行環境\n- ホスト管理が不要で、従量課金制\n- Fargate SpotとFargate Gravitonによるコスト削減オプションあり\n\n2. Amazon EC2との主な違い（5つの観点）\n- vCPUとメモリの設定オプション\n- ホスト環境の特徴と制約\n- ネットワークモード\n- データボリュームの選択肢\n- セキュリティ面での特徴\n\n3. 特徴的な機能：\n- 74パターンのvCPU/メモリ組み合わせから選択可能\n- awsvpcネットワークモードの採用\n- タスク/Podごとの実行環境分離\n- ECS Execによるデバッグツールのサポートなど\n\n対象読者：\n- AWSこれから利用予定のアプリケーション・インフラ担当者\n- サーバーレスコンテナ環境に関心のある方\n- 既存ワークロードのコンテナ化を検討している方\n- オンプレミスからクラウドへの移行を検討している方\n\n文書の形式：\n- AWS公式のトレーニング資料\n- 2024年作成\n- スライド形式で構成\n- 図表や実例を交えた説明\n\nなお、この資料は2024年9月時点の情報に基づいており、AWS サービスは常にアップデートされるため、最新情報は公式ウェブサイトで確認することが推奨されています。\n途中で回答が途切れているので何とも言い難いですが、内容はちゃんと拾えているように見えますただ、3.5 Sonnet は全体をまとめてくれてますが、Nova達は上から丁寧に説明していますねあと、Proに関しては英語で出力されています\nProに限らず、Novaでは時々英語で出力する挙動が見られました！\nここら辺はプロンプトの制御していくのがよさそうですね\nモデル比較総括\n各モデルの特性評価と所感\nUnderstanding models\n\nAmazon Nova Micro\n\n\n特徴：\n\n爆速レスポンス！！！\n\n\n性能：\n\n申し分ないかと\n\n\n所感：\n\n速い！安い！美味い！（？）ですね\n\n\n\n     2. Amazon Nova Lite\n\n特徴：\n\nマルチモーダル処理で最速\n\n\n性能：\n\n質問への回答もマルチモーダルの読み込みも問題なし\n\n\n所感：\n\nとりあえずの画像や動画の解析で利用するときはこれでよし\n\n\n\n     3. Amazon Nova Pro\n\n特徴：\n\n高度な分析能力\n詳細なマルチモーダル処理\n\n\n性能：\n\n今回の比較では他の2モデルと明確な差が出なかったのでプログラミングなどで要検証\n\n\n所感：\n\n今後もう少し使ってみて判断したいところですね\n\n\n\nCreative content generation\n\nNova Canvas（画像生成）\n\n\n特徴：\n\n高品質な画像生成が可能\n\n\n性能：\n\n1分程度で3つの画像を生成\n\n\n所感：\n\nスライドの画像作ってもらうのとかで使えそう\n\n\n\n      2. Nova Reel（動画生成）\n\n特徴：\n\nテキストや画像から動画生成が可能\n\n\n性能：\n\n4~5分で動画が作成できる\n\n\n所感：\n\n動画が欲しい時は是非使いたいな\n\n\n\n実用面での比較\n\n応答速度\n\n\nMicro > Lite > Pro > Claude\n用途に応じて適切なモデルを選択が重要\n\n      2. 精度と品質\n\nPro ≈ 3.5 Sonnet v2 > Lite > Micro\nより複雑なタスクには上位モデルが必要\n\nさいごに\nとにかく速いのがいいと思いました！今まで回答速度の問題がネックになっていたものがことごとく解決するのではないかと\nまだ精度や癖などが見えていないので、当分使い倒してプロンプトで最適化していければと思います！！！\n新モデルありがとう！！！\n \n目次\nはじめにAmazon Novaって何？モデルの種類Amazon Nova モデル総合比較表主な特徴現在の利用可能地域料金モデル比較クイックまとめ質問回答画像認識画像生成動画生成動画解析文書解析モデル比較総括各モデルの特性評価と所感実用面での比較さいごに 目次   はじめまして！クラウドビルダーズのKawabataと申します。 re:Invent 2024でBedrockで利用できる新LLMモデル、Amazon Novaが発表されたので早速検証検証！   コストとレイテンシは押さえて、生成AIタスクいろいろできるよ～って感じみたいですね！これは期待大！！！   6種類のNovaモデルが発表され、現在は5種類が提供されています。Premierのみ2025年初旬に提供予定とのこと。         確認でき次第更新します     Understanding models 応答速度がとにかくよかったです！生成される内容も申し分ないかとただ、たまに英語で回答されることがあるので、プロンプトでの制御が必要かも！？ Creative content generation プロンプト通りのものを作成してくれました！ただ、ものによっては全然なこともあったので、こちらもプロンプトで制御する必要があるかもしれません（サーフィンするカンガルーと入力したら、普通に人がサーフィンしてました…）   質問は以下です。 Amazon Bedrockは、Amazon Web Services (AWS) が提供する基盤となるサービスであり、高度な機械学習（ML）モデルと生成AI（Artificial Intelligence）を構築、デプロイ、および管理するためのプラットフォームです。以下に、Amazon Bedrockに関する重要なポイントを紹介します。\n\n### 主要機能と特徴\n\n1. **基盤となるMLモデルの提供**\n   - Amazon Bedrockは、大規模な言語モデル（LLM）やその他の機械学習モデルを提供します。これらのモデルは、テキスト生成、翻訳、質問応答、データ分析など、様々なアプリケーションに利用できます。\n\n2. **カスタマイズとトレーニング**\n   - カスタマイズされたモデルを作成し、特定の用語集やデータセットに合わせてトレーニングすることができます。これにより、特定の業界や用途に合わせたパーソナライズされたAIソリューションを提供します。\n\n3. **インテグレーションとデプロイメント**\n   - Amazon Bedrockは、AWSの他のサービスとシームレスに統合され、AWSのグローバルインフラストラクチャを活用してスケール可能です。また、モデルを簡単にデプロイし、オンデマンドで利用できるように設計されています。\n\n4. **セキュリティとプライバシー**\n   - データのプライバシーとセキュリティに重点を置いており、データの管理、アクセス制御、データの保護に関連するAWSのベストプラクティスを採用しています。\n\n5. **コスト効率**\n   - オンデマンドの課金モデルを採用しており、ユーザーは実際に使用したリソースに対して支払います。これにより、コストを管理しやすくなります。\n\n### 利用シーン\n\n1. **コンテンツ生成**\n   - 自動記事生成、脚本作成、翻訳、およびその他のコンテンツ生成タスクに適用できます。\n\n2. **カスタマーサポート**\n   - チャットボットや問い合わせ対応システムに組み込むことで、高度な質問応答機能を提供できます。\n\n3. **データ分析**\n   - データの分析、要約、および洞察の抽出に使用できます。\n\n4. **特定業界向けアプリケーション**\n   - 医療、法律、金融などの特定業界で専門的な情報の生成や分析に活用できます。 Amazon Bedrock は、Amazon Web Services (AWS) が提供する機械学習モデルを開発、トレーニング、デプロイするための新しいサービスです。これは、開発者が強力なAIモデルを構築し、カスタマイズするために必要なツールとインフラストラクチャを提供します。以下に、Amazon Bedrock の主要な機能と特徴を詳しく説明します。\n\n### 主要機能\n\n1. **カスタムモデルの開発とトレーニング**\n   - **ツールとライブラリのサポート**: Amazon Bedrock は、PyTorch、TensorFlow、およびその他の主要な機械学習フレームワークをサポートしています。これにより、開発者は既存のツールと統合し、好みのライブラリを使用してモデルを開発できます。\n   - **自動機械学習 (AutoML)**: 自動化されたモデルのトレーニングとチューニングをサポートし、データサイエンティストのスキルレベルに関係なく、高度なモデルの構築を容易にします。\n\n2. **高度なモデルの利用**\n   - **AWS の機械学習モデルライブラリ**: Amazon Bedrock は、AWS が提供する幅広い機械学習モデルにアクセスできるようにします。これには、画像認識、自然言語処理、時系列予測などのさまざまなタスクに適用可能なモデルが含まれます。\n   - **サードパーティモデルのサポート**: 開発者は、サードパーティのモデルも利用できるようにし、より幅広い選択肢を提供します。\n\n3. **モデルのデプロイとスケーリング**\n   - **クラウドベースのインフラストラクチャ**: 高度な計算能力と柔軟なスケーリングを提供し、モデルのトレーニングとデプロイにおいて柔軟性と効率性を確保します。\n   - **容易な統合**: Amazon Bedrock は、AWS の他のサービス（例：Amazon SageMaker、AWS Lambda）とシームレスに統合され、開発者にとってスムーズな開発とデプロイの体験を提供します。\n\n4. **セキュリティとコンプライアンス**\n   - **データ保護**: モデルの開発とデプロイにおけるデータのセキュリティとプライバシーを重視し、業界標準のセキュリティプロトコルに準拠しています。\n   - **コンプライアンスサポート**: Amazon Bedrockは、Amazon Web Services（AWS）が提供するサービスで、主に機械学習モデルの開発、デプロイ、管理を簡素化する目的で設計されています。以下にAmazon Bedrockの主な特徴と機能について説明します。\n\n### 主な特徴\n\n1. **統合された開発環境**:\n   - 機械学習モデルの構築、トレーニング、デプロイを一元化されたプラットフォームで行うことができます。\n\n2. **幅広いモデルサポート**:\n   - 様々な種類の機械学習モデル（例：自然言語処理、コンピュータビジョン、予測分析など）をサポートしています。\n\n3. **自動化された機械学習（AutoML）**:\n   - データサイエンティストでなくても、自動化されたツールを使用して高性能なモデルを構築できます。\n\n4. **スケーラビリティ**:\n   - AWSのインフラストラクチャを活用して、需要に合わせて容易にスケールアップまたはスケールダウンできます。\n\n5. **コスト効率**:\n   - ペイ・アス・ユー・ゴーの課金モデルで、実際に使用したリソースに対してのみ課金されます。\n\n### 主要な機能\n\n1. **モデルの選択と準備**:\n   - 既存のAWS提供モデルから選択したり、カスタムのデータセットを使用して新しいモデルをトレーニングすることができます。\n\n2. **データの前処理**:\n   - データクリーニング、特徴量エンジニアリング、データ分割などの前処理ステップを効率的に行うことができます。\n\n3. **モデルのトレーニング**:\n   - ハイパーパラメータのチューニング、モデルの最適化などのトレーニングプロセスを自動化または手動で行うことができます。\n\n4. **モデルの評価**:\n   - モデルの性能を評価するための様々なメトリック（例：精度、リコール、F1スコアなど）を提供します。\n\n5. **モデルのデプロイ**:\n   - トレーニング済みのモデルを簡単にデプロイし、リアルタイムまたはバッチ予測を実行できます。\n\n6. **モニタリングと管理**:\n   - デプロイされたモデルのパフォーマンスを継続的にモニタリングし、必要に応じて再トレーニングや調整を行うことができます。\n\n### ユースケース\n\n- **自然言語処理（NLP）**: Amazon Bedrockは、AWSが提供する生成AIのフルマネージドサービスです。主な特徴について説明します：\n\n主な特徴：\n\n1. 複数のファウンデーションモデルへのアクセス\n- Anthropic Claude\n- Meta Llama 2\n- AI21 Labs\n- Stability AI\n- Amazon Titan\nなどの様々なモデルを単一のAPIで利用可能\n\n2. セキュリティとプライバシー\n- AWSのセキュリティ基準に準拠\n- データは暗号化され、モデルプロバイダーとも共有されない\n- VPCエンドポイントのサポート\n\n3. カスタマイズ機能\n- モデルのファインチューニング\n- プロンプトエンジニアリング\n- カスタムモデルの作成が可能\n\n4. 主な用途：\n- テキスト生成\n- コード生成\n- 画像生成\n- 要約\n- 質問応答\n- データ分析\n\n5. 利点：\n- サーバーレス\n- スケーラブル\n- 従量課金制\n- 低レイテンシー\n- APIを通じた簡単な統合\n\n6. 開発ツール：\n- SDK対応（Python, Java等）\n- AWS Console\n- CLI\n- APIリファレンス\n\n7. コスト管理：\n- 使用量ベースの課金\n- モデルごとの料金設定\n- 使用量の監視と制御が可能\n\nこれらの特徴により、企業は自社のアプリケーションに容易にAI機能を統合することができます。 LiteとProで回答が切れてしまっていますが、たぶんプレイグラウンドの設定の問題だと思います 所感ですが、Microがとにかく速い！！普段3.5 Sonnet使いなので、その速さに驚きました… 回答の精度も悪くないと思います（もうちょっと差の付きそうな質問考えればよかった）   質問は以下です。 利用した画像は以下です。 この図は、AWS（Amazon Web Services）のクラウド環境におけるインフラストラクチャとサービスの配置を示しています。以下に、図に示されている主要な要素とそれらの役割について解説します。\n\n1. **AWS Cloud**: AWSクラウドサービス全体を表しています。\n\n2. **CodePipeline**: AWSのサービスで、ソフトウェアの開発、デプロイ、および継続的インテグレーション/継続的デリバリー（CI/CD）プロセスを自動化します。\n\n3. **ECS**: Amazon Elastic Container Serviceで、コンテナ化されたアプリケーションを管理するためのサービスです。\n\n4. **CloudWatch**: AWSのサービスで、リソースの監視、ログの収集、アラートの設定を行います。\n\n5. **ECR**: Amazon Elastic Container Registryで、Dockerイメージを保存および取得するためのサービスです。\n\n6. **CodeBuild**: AWSのサービスで、コードのビルド、テスト、およびパッケージングを行うサービスです。\n\n7. **CodeDeploy**: AWSのサービスで、アプリケーションのデプロイを自動化し、更新を管理します。\n\n8. **VPC**: Virtual Private Cloudで、AWSリソースをプライベートなネットワーク内に配置するためのサービスです。\n\n9. **NAT gateway**: NAT（Network Address Translation）ゲートウェイで、プライベートサブネットのインスタンスがインターネットにアクセスするためのサービスです。\n\n10. **ALB**: Application Load Balancerで、アプリケーショントラフィックを複数のターゲットに分散するサービスです。\n\n11. **Fargate**: AWS Fargateは、コンテナをECSやEKSで実行する際に、サーバーレスコンピューティングモデルを提供します。\n\n12. **RDS**: Amazon Relational Database Serviceで、管理されたデータベースサービスを提供します。\n\n13. **SystemManager ParameterStore**: AWS Systems Managerのサービスで、アプリケーションの設定や秘密情報を安全に保存および管理します。\n\nこれらの要素は、AWSのサービスを利用して、アプリケーションの開発、デプロイ、および運用を自動化し、効率的に管理するためのインフラストラクチャを形成しています。 この画像は、AWS（Amazon Web Services）環境におけるソフトウェア開発およびデプロイメントのプロセスを示す図です。以下にその要素を詳しく説明します。\n\n1. **GitHub**:\n   - プロジェクトのソースコードがホストされているリポジトリ。\n   - 開発者はここにコードをコミットし、プルリクエストを通じてコードの変更をレビューします。\n\n2. **AWS Cloud**:\n   - クラウドサービスを提供するAmazonのサービス群。\n   - この図では、AWSのさまざまなサービスがソフトウェア開発ライフサイクル（SDLC）でどのように使用されているかを示しています。\n\n3. **CloudWatch**:\n   - AWSのモニタリングサービス。\n   - アプリケーションのパフォーマンスやメトリクスを監視します。\n\n4. **ECR（Elastic Container Registry）**:\n   - コンテナイメージを保存するためのAWSのレジストリサービス。\n   - 開発されたアプリケーションをコンテナ化し、ここに格納します。\n\n5. **CodePipeline**:\n   - AWSの継続的デリバリーサービス。\n   - ソースコードの変更を検出し、ビルド、テスト、デプロイのプロセスを自動化します。\n\n6. **CodeBuild**:\n   - AWSのビルドサービス。\n   - ソースコードをコンパイルし、テストを実行します。\n\n7. **CodeDeploy**:\n   - AWSのデプロイメントサービス。\n   - アプリケーションをAWSのインフラストラクチャにデプロイします。\n\n8. **ECS（Elastic Container Service）**:\n   - AWSのコンテナオーケストレーションサービス。\n   - コンテナ化されたアプリケーションを管理します。\n\n9. **SystemManager ParameterStore**:\n   - AWSの設定管理サービス。\n   - アプリケーションの設定やシークレットを安全に管理します。\n\n10. **VPC（Virtual Private Cloud）**:\n    - AWSの仮想プライベートネットワーク。\n    - アプリケーションをプライベートなネットワーク環境で実行します。\n\n11. **Availability Zone**:\n    - AWSのデータセンターの物理的な場所。\n    - アプリケーションの高可用性と耐障害性を確保するために使用されます。\n\n12. **Public Subnet**:\n    - インターネットに直接接続可能なサブネット。\n    - パブリックIPアドレスを持ち、インターネット この画像はAWSのアーキテクチャ図で、CI/CDパイプラインとECSを使用したコンテナ環境の構成を示しています。\n主な構成要素は以下の通りです：\n1. CI/CD部分:\n- GitHubからのソースコード管理\n- CodePipelineによるパイプライン管理\n- CodeBuildによるビルドプロセス\n- CodeDeployによるデプロイ管理\n2. インフラ構成:\nVPC内に複数のAvailability Zone（1a、1c）\n- 各AZに Public SubnetとPrivate Subnet\n- NAT GatewayとInternet Gatewayによるネットワーク制御\n- ALB（Application Load Balancer）による負荷分散\n3. コンテナ環境:\n- ECSクラスターでのコンテナ管理\n- Fargateによるサーバーレスコンテナ実行\n- RDSによるデータベース管理\n4. モニタリングと管理:\n- CloudWatchによる監視\n- Systems Manager Parameter Storeによる設定管理\n- ECRによるコンテナイメージの保管\nこの構成は高可用性と安全性を考慮した設計になっており、マイクロサービスアーキテクチャの実装に適しています。 Liteのレスポンスがいいですね～ 回答の中身に関しては、僕はProが好みですねいつも思うんですけど、3.5 Sonnetはすごい簡潔に回答してくるので、Proぐらいの人間味（？）がある方がいいですｗ   質問は以下です。 おおおおおおちゃんと空飛んでますね画像生成系のAIは初めて使いましたが、いい感じですね！   質問は以下です。 おおおおおおおおおお飛んでる！！6秒動画しか作成できなかったのですが、今後長尺の動画も生成できるようになると思うので、いろんな用途で使えそうですね   質問は以下で先ほど生成した動画を解析させています。 この動画は、先進的な飛行機が雲の上を飛んでいる様子をシミュレーションしています。\n機体は黒色で、円筒形のエンジンを機体両側に備えています。\nまた、機体上部に小さな翼がついています。\nこの飛行機は、ジェット機のような外観を持ち、先進的な技術やデザインを示しています。\n雲の中の飛行機は、太陽光の下で輝いており、その美しい外観と動きが際立っています。 この動画は、空中を飛ぶ架空の飛行機のCGアニメーションです。\n翼は長方形で、中央にプロペラがついています。\n翼の先端には小さな翼があり、飛行機の尾部には垂直尾翼がついています。\n飛行機のデザインは未来的で、空中での安定性を高めるための工夫が施されています。 内容を適切に把握していてどちらもいい回答ですね！この精度であれば、レスポンスとコスト的にLiteがよさそう   質問は以下でfargateのBlack Beltを読み込ませています。 https://pages.awscloud.com/rs/112-TZM-766/images/AWS-Black-Belt_2024_AWS-Fargate-Introduction_1031_v1.pdf ※スクショ撮り忘れたので、画像と以下結果には相違があります この文書は、2024年10月に開催された「AWS Black Belt Online Seminar」のセミナー資料の一部です。資料は、ソリューションアーキテクトの吉田英史によって作成されました。このセミナーでは、AWS Fargate というサービスに焦点を当て、その概要、特徴、開始方法、そして他のコンテナ実行環境との比較などについて説明しています。以下に、文書の内容を詳しく解説します。\n\n### 1. 自己紹介\n\n**吉田英史**  \nアマゾンウェブサービスジャパンでソリューションアーキテクトを務める。主に小売・消費財業界のお客様を支援し、クラウド技術を用いてビジネスの加速を支援することを楽しんでいる。特に好きなAWSサービスはAWS Fargate。\n\n### 2. セミナーの主な対象者\n\n- AWSをこれから利用しようとしているアプリケーションおよびインフラ担当者\n- AWS Fargateの概要や開始方法に興味がある人\n- クラウド上の既存ワークロードのコンテナ化を検討している人\n- オンプレミスの既存コンテナワークロードのクラウド移行を検討している人\n\n### 3. アジェンダ\n\n- AWS Fargateとは\n- AWS FargateとAmazon EC2の違い\n- AWS Fargateの始め方\n- まとめ\n\n### 4. AWS Fargateとは\n\nAWS Fargateは、サーバレスのコンテナ実行環境です。以下のような特徴があります：\n\n- ホストのアップグレードやパッチ適用は不要\n- クラスターのキャパシティ管理は不要\n- 設計による分離とセキュリティの担保\n- 前払い料金なし、使用したリソースに応じて従量課金\n- Fargate SpotとFargate Gravitonによるコスト削減\n\n### 5. AWS FargateとAmazon EC2の違い\n\nAWS FargateとAmazon EC2には、以下の5つの観点で違いがあります：\n\n1. **vCPUとメモリ**  \n   AWS Fargateでは、74種類のvCPUとメモリの組み合わせから選択できます。\n\n2. **ホスト**  \n   AWS Fargateでは、ホストの管理はAWSが行います。\n\n3. **ネットワークモード**  \n   AWS Fargate Certainly! Here's a detailed explanation of the document:\n\n---\n\n### AWS Fargate Introduction\n\n**Presenter:**  \n吉田 英史 (Hideshi Yoshida)  \nSolutions Architect at Amazon Web Services Japan  \nFocuses on supporting retail and consumer goods customers.  \nFavorite AWS Service: AWS Fargate\n\n---\n\n### Seminar Overview\n\n**Target Audience:**  \n- Individuals planning to use AWS  \n- Those interested in learning about AWS Fargate, a serverless container runtime environment  \n- Those considering containerizing existing workloads in the cloud  \n- Those considering migrating existing on-premises container workloads to the cloud\n\n---\n\n### Agenda\n\n1. **What is AWS Fargate?**  \n2. **Differences between AWS Fargate and Amazon EC2**  \n3. **Getting Started with AWS Fargate**  \n4. **Summary**\n\n---\n\n### What is AWS Fargate?\n\n**AWS Container Services:**  \n- **Orchestration:** Deployment, scheduling, and scaling of containers  \n- **Image Registry:** Storage for container images  \n- **Hosting:** Container runtime environments  \n- **Other Related Services:** Amazon CloudWatch Container Insights\n\n**Container Runtime Environment Options:**  \n- Amazon ECS  \n- Amazon EC2  \n- AWS Fargate  \n- Amazon EKS  \n- AWS App Runner\n\n**AWS Fargate:**  \n- Serverless container runtime environment  \n- No need for host upgrades or patch applications  \n- No cluster capacity management required  \n- Design ensures isolation and security  \n- Pay-per-use pricing model with no upfront fees  \n- Cost savings with Fargate Spot and Fargate Graviton  \n  (Note: Fargate Graviton is not supported on Amazon EKS and is subject to Compute Savings Plans)\n\n**AWS Fargate Spot (ECS only):**  \n- Option for running fault-tolerant workloads on AWS Fargate  \n- Up to 70% discount compared to regular Fargate pricing  \n- Usable as FARGATE_SPOT capacity provider  \n- Supports AWS Graviton\n\n---\n\n### Differences Between AWS Fargate and Amazon EC2\n\n**Five Key Differences:**  \n1. **vCPU and Memory**  \n2. **Host**  \n3. **Network Mode**  \n4. **Data Volume**  \n5. **Security**\n\n**vCPU and Memory:**  \n- Flexible options: 74 combinations of vCPU and memory  \n- Examples:  \n  - 256 (.25 vCPU): 0.5GB, 1GB, 2GB  \n  - 512 (. この文書は、AWS Black Belt Online Seminarの一環として、AWS Fargateについて解説したプレゼンテーション資料です。主な内容は以下の通りです：\n\n主要なポイント：\n\n1. AWS Fargateの概要\n- サーバーレスのコンテナ実行環境\n- ホスト管理が不要で、従量課金制\n- Fargate SpotとFargate Gravitonによるコスト削減オプションあり\n\n2. Amazon EC2との主な違い（5つの観点）\n- vCPUとメモリの設定オプション\n- ホスト環境の特徴と制約\n- ネットワークモード\n- データボリュームの選択肢\n- セキュリティ面での特徴\n\n3. 特徴的な機能：\n- 74パターンのvCPU/メモリ組み合わせから選択可能\n- awsvpcネットワークモードの採用\n- タスク/Podごとの実行環境分離\n- ECS Execによるデバッグツールのサポートなど\n\n対象読者：\n- AWSこれから利用予定のアプリケーション・インフラ担当者\n- サーバーレスコンテナ環境に関心のある方\n- 既存ワークロードのコンテナ化を検討している方\n- オンプレミスからクラウドへの移行を検討している方\n\n文書の形式：\n- AWS公式のトレーニング資料\n- 2024年作成\n- スライド形式で構成\n- 図表や実例を交えた説明\n\nなお、この資料は2024年9月時点の情報に基づいており、AWS サービスは常にアップデートされるため、最新情報は公式ウェブサイトで確認することが推奨されています。 途中で回答が途切れているので何とも言い難いですが、内容はちゃんと拾えているように見えますただ、3.5 Sonnet は全体をまとめてくれてますが、Nova達は上から丁寧に説明していますねあと、Proに関しては英語で出力されています Proに限らず、Novaでは時々英語で出力する挙動が見られました！ ここら辺はプロンプトの制御していくのがよさそうですね          2. Amazon Nova Lite      3. Amazon Nova Pro       2. Nova Reel（動画生成）         2. 精度と品質   とにかく速いのがいいと思いました！今まで回答速度の問題がネックになっていたものがことごとく解決するのではないかと まだ精度や癖などが見えていないので、当分使い倒してプロンプトで最適化していければと思います！！！ 新モデルありがとう！！！ \n\n\n    この記事をシェアする\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n    この記事をシェアする\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n    この記事をシェアする\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n                                ←前の記事\n                                \n\n\n\n\n\n\n                                次の記事→\n                                \n\n\n\n \n                                ←前の記事\n                                \n \n                                次の記事→\n                                \n \n\n\n\n\n\n\n                                著者：kawabata                              \n\n                                2023年 Jr.Champions選出\r\n2023, 2024年 All Certificate選出\r\n最近はもっぱらCDKとAIばかりです                              \n\n\n \n\n\n\n\n\n                                著者：kawabata                              \n\n                                2023年 Jr.Champions選出\r\n2023, 2024年 All Certificate選出\r\n最近はもっぱらCDKとAIばかりです                              \n\n \n\n \n\n                                著者：kawabata                              \n\n                                2023年 Jr.Champions選出\r\n2023, 2024年 All Certificate選出\r\n最近はもっぱらCDKとAIばかりです                              \n \n                                著者：kawabata                               \n                                2023年 Jr.Champions選出\r\n2023, 2024年 All Certificate選出\r\n最近はもっぱらCDKとAIばかりです                               \n\n\n\n\n\n      関連記事\n    \n\n\n\n\n\n\n\n\n\n\n      AWS Security HubとBedrock AIで実現するセキュリティ通知システム    \n\n \n        2024.07.01      \n\n\n\n\n\n\n            AWS          \n\n\n\n\n\n\n\n            bedrock          \n\n\n\n\n\n\n\n            EventBridge          \n\n\n\n\n\n\n\n            Lambda          \n\n\n\n\n\n\n\n            Security Hub          \n\n\n\n\n\n\n\n            Slack          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      【Amazon Bedrockエージェント】AWS Chatbotを利用してSlackからBedrockを使えるようになったのでやってみた    \n\n \n        2024.09.18      \n\n\n\n\n\n\n            AWS          \n\n\n\n\n\n\n\n            bedrock          \n\n\n\n\n\n\n\n            Chatbot          \n\n\n\n\n\n\n\n            Slack          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      AWS東京オフィスにコワーキングスペースがあるらしいので潜入調査してきた    \n\n \n        2023.01.30      \n\n\n\n\n\n\n            AWS          \n\n\n\n\n\n\n\n            コワーキングスペース          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n      関連記事\n    \n\n\n\n\n\n\n\n\n\n\n      AWS Security HubとBedrock AIで実現するセキュリティ通知システム    \n\n \n        2024.07.01      \n\n\n\n\n\n\n            AWS          \n\n\n\n\n\n\n\n            bedrock          \n\n\n\n\n\n\n\n            EventBridge          \n\n\n\n\n\n\n\n            Lambda          \n\n\n\n\n\n\n\n            Security Hub          \n\n\n\n\n\n\n\n            Slack          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      【Amazon Bedrockエージェント】AWS Chatbotを利用してSlackからBedrockを使えるようになったのでやってみた    \n\n \n        2024.09.18      \n\n\n\n\n\n\n            AWS          \n\n\n\n\n\n\n\n            bedrock          \n\n\n\n\n\n\n\n            Chatbot          \n\n\n\n\n\n\n\n            Slack          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      AWS東京オフィスにコワーキングスペースがあるらしいので潜入調査してきた    \n\n \n        2023.01.30      \n\n\n\n\n\n\n            AWS          \n\n\n\n\n\n\n\n            コワーキングスペース          \n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n      関連記事\n    \n\n\n\n\n\n\n\n\n\n\n      AWS Security HubとBedrock AIで実現するセキュリティ通知システム    \n\n \n        2024.07.01      \n\n\n\n\n\n\n            AWS          \n\n\n\n\n\n\n\n            bedrock          \n\n\n\n\n\n\n\n            EventBridge          \n\n\n\n\n\n\n\n            Lambda          \n\n\n\n\n\n\n\n            Security Hub          \n\n\n\n\n\n\n\n            Slack          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      【Amazon Bedrockエージェント】AWS Chatbotを利用してSlackからBedrockを使えるようになったのでやってみた    \n\n \n        2024.09.18      \n\n\n\n\n\n\n            AWS          \n\n\n\n\n\n\n\n            bedrock          \n\n\n\n\n\n\n\n            Chatbot          \n\n\n\n\n\n\n\n            Slack          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      AWS東京オフィスにコワーキングスペースがあるらしいので潜入調査してきた    \n\n \n        2023.01.30      \n\n\n\n\n\n\n            AWS          \n\n\n\n\n\n\n\n            コワーキングスペース          \n\n\n\n\n\n\n\n\n\n\n\n \n\n      関連記事\n    \n \n\n\n\n\n\n\n\n\n      AWS Security HubとBedrock AIで実現するセキュリティ通知システム    \n\n \n        2024.07.01      \n\n\n\n\n\n\n            AWS          \n\n\n\n\n\n\n\n            bedrock          \n\n\n\n\n\n\n\n            EventBridge          \n\n\n\n\n\n\n\n            Lambda          \n\n\n\n\n\n\n\n            Security Hub          \n\n\n\n\n\n\n\n            Slack          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      【Amazon Bedrockエージェント】AWS Chatbotを利用してSlackからBedrockを使えるようになったのでやってみた    \n\n \n        2024.09.18      \n\n\n\n\n\n\n            AWS          \n\n\n\n\n\n\n\n            bedrock          \n\n\n\n\n\n\n\n            Chatbot          \n\n\n\n\n\n\n\n            Slack          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      AWS東京オフィスにコワーキングスペースがあるらしいので潜入調査してきた    \n\n \n        2023.01.30      \n\n\n\n\n\n\n            AWS          \n\n\n\n\n\n\n\n            コワーキングスペース          \n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n      AWS Security HubとBedrock AIで実現するセキュリティ通知システム    \n\n \n        2024.07.01      \n\n\n\n\n\n\n            AWS          \n\n\n\n\n\n\n\n            bedrock          \n\n\n\n\n\n\n\n            EventBridge          \n\n\n\n\n\n\n\n            Lambda          \n\n\n\n\n\n\n\n            Security Hub          \n\n\n\n\n\n\n\n            Slack          \n\n\n\n\n\n\n\n \n\n \n\n      AWS Security HubとBedrock AIで実現するセキュリティ通知システム    \n\n \n        2024.07.01      \n\n\n\n\n\n\n            AWS          \n\n\n\n\n\n\n\n            bedrock          \n\n\n\n\n\n\n\n            EventBridge          \n\n\n\n\n\n\n\n            Lambda          \n\n\n\n\n\n\n\n            Security Hub          \n\n\n\n\n\n\n\n            Slack          \n\n\n\n\n\n\n \n      AWS Security HubとBedrock AIで実現するセキュリティ通知システム     \n \n        2024.07.01      \n\n\n\n\n\n\n            AWS          \n\n\n\n\n\n\n\n            bedrock          \n\n\n\n\n\n\n\n            EventBridge          \n\n\n\n\n\n\n\n            Lambda          \n\n\n\n\n\n\n\n            Security Hub          \n\n\n\n\n\n\n\n            Slack          \n\n\n\n\n\n \n\n\n\n\n\n            AWS          \n\n\n\n\n\n\n\n            bedrock          \n\n\n\n\n\n\n\n            EventBridge          \n\n\n\n\n\n\n\n            Lambda          \n\n\n\n\n\n\n\n            Security Hub          \n\n\n\n\n\n\n\n            Slack          \n\n\n\n\n \n            AWS           \n            bedrock           \n            EventBridge           \n            Lambda           \n            Security Hub           \n            Slack           \n\n\n\n\n\n      【Amazon Bedrockエージェント】AWS Chatbotを利用してSlackからBedrockを使えるようになったのでやってみた    \n\n \n        2024.09.18      \n\n\n\n\n\n\n            AWS          \n\n\n\n\n\n\n\n            bedrock          \n\n\n\n\n\n\n\n            Chatbot          \n\n\n\n\n\n\n\n            Slack          \n\n\n\n\n\n\n\n \n\n \n\n      【Amazon Bedrockエージェント】AWS Chatbotを利用してSlackからBedrockを使えるようになったのでやってみた    \n\n \n        2024.09.18      \n\n\n\n\n\n\n            AWS          \n\n\n\n\n\n\n\n            bedrock          \n\n\n\n\n\n\n\n            Chatbot          \n\n\n\n\n\n\n\n            Slack          \n\n\n\n\n\n\n \n      【Amazon Bedrockエージェント】AWS Chatbotを利用してSlackからBedrockを使えるようになったのでやってみた     \n \n        2024.09.18      \n\n\n\n\n\n\n            AWS          \n\n\n\n\n\n\n\n            bedrock          \n\n\n\n\n\n\n\n            Chatbot          \n\n\n\n\n\n\n\n            Slack          \n\n\n\n\n\n \n\n\n\n\n\n            AWS          \n\n\n\n\n\n\n\n            bedrock          \n\n\n\n\n\n\n\n            Chatbot          \n\n\n\n\n\n\n\n            Slack          \n\n\n\n\n \n            AWS           \n            bedrock           \n            Chatbot           \n            Slack           \n\n\n\n\n\n      AWS東京オフィスにコワーキングスペースがあるらしいので潜入調査してきた    \n\n \n        2023.01.30      \n\n\n\n\n\n\n            AWS          \n\n\n\n\n\n\n\n            コワーキングスペース          \n\n\n\n\n\n\n\n \n\n \n\n      AWS東京オフィスにコワーキングスペースがあるらしいので潜入調査してきた    \n\n \n        2023.01.30      \n\n\n\n\n\n\n            AWS          \n\n\n\n\n\n\n\n            コワーキングスペース          \n\n\n\n\n\n\n \n      AWS東京オフィスにコワーキングスペースがあるらしいので潜入調査してきた     \n \n        2023.01.30      \n\n\n\n\n\n\n            AWS          \n\n\n\n\n\n\n\n            コワーキングスペース          \n\n\n\n\n\n \n\n\n\n\n\n            AWS          \n\n\n\n\n\n\n\n            コワーキングスペース          \n\n\n\n\n \n            AWS           \n            コワーキングスペース           \n\n\n\n\n\n\n\n\n\n\n\n\n\n        お仕事をお探しの方\n      \n\n\n\n\n\n\n\n                  応募の流れ\n                \n\n\n\n\n\n\n\n\n                  お問い合わせ\n                \n\n\n\n\n\n\n\n\n\n\n\n              無料相談を申し込む\n            \n\n\n\n\n\n\n\n              採用のお問い合わせ\n            \n\n\n\n\n \n\n\n\n\n\n\n\n\n\n \n\n\n\n\n \n\n        お仕事をお探しの方\n      \n\n\n\n\n\n\n\n                  応募の流れ\n                \n\n\n\n\n\n\n\n\n                  お問い合わせ\n                \n\n\n\n\n\n \n\n\n\n\n\n\n                  応募の流れ\n                \n\n\n\n\n\n\n\n\n                  お問い合わせ\n                \n\n\n\n\n \n                  応募の流れ\n                 \n                  お問い合わせ\n                 \n              無料相談を申し込む\n             \n              採用のお問い合わせ\n             \n\n\n        AWSに関するお役立ちコンテンツ\n      \n\n\n\n\n\n\n\n\n\n\n        CDKのBootstrapをカスタマイズしてみた      \n\n        2024.12.25      \n\n\n \n\n\n\n\n\n\n\n\n        【UPDATE】AWS Backupが検索とアイテムレベルのリカバリ機能を発表しました！      \n\n        2024.12.24      \n\n\n \n\n\n\n\n\n\n\n\n        DynamoDB Mapper for Kotlin（プレビュー版）を試してみた      \n\n        2024.12.23      \n\n\n \n\n\n\n\n\n\n\n\n        ANGEL Dojo 2024 頂上決戦に登壇しました！      \n\n        2024.12.22      \n\n\n \n\n\n\n\n\n\n\n\n        GitHub Actionsの実行結果をSlackに連携してみた      \n\n        2024.12.21      \n\n\n \n\n\n\n\n \n\n        AWSに関するお役立ちコンテンツ\n      \n\n\n\n\n\n\n\n\n\n\n        CDKのBootstrapをカスタマイズしてみた      \n\n        2024.12.25      \n\n\n \n\n\n\n\n\n\n\n\n        【UPDATE】AWS Backupが検索とアイテムレベルのリカバリ機能を発表しました！      \n\n        2024.12.24      \n\n\n \n\n\n\n\n\n\n\n\n        DynamoDB Mapper for Kotlin（プレビュー版）を試してみた      \n\n        2024.12.23      \n\n\n \n\n\n\n\n\n\n\n\n        ANGEL Dojo 2024 頂上決戦に登壇しました！      \n\n        2024.12.22      \n\n\n \n\n\n\n\n\n\n\n\n        GitHub Actionsの実行結果をSlackに連携してみた      \n\n        2024.12.21      \n\n\n \n\n\n\n \n\n\n\n\n\n\n\n\n\n        CDKのBootstrapをカスタマイズしてみた      \n\n        2024.12.25      \n\n\n \n\n\n\n\n\n\n\n\n        【UPDATE】AWS Backupが検索とアイテムレベルのリカバリ機能を発表しました！      \n\n        2024.12.24      \n\n\n \n\n\n\n\n\n\n\n\n        DynamoDB Mapper for Kotlin（プレビュー版）を試してみた      \n\n        2024.12.23      \n\n\n \n\n\n\n\n\n\n\n\n        ANGEL Dojo 2024 頂上決戦に登壇しました！      \n\n        2024.12.22      \n\n\n \n\n\n\n\n\n\n\n\n        GitHub Actionsの実行結果をSlackに連携してみた      \n\n        2024.12.21      \n\n\n \n\n \n\n\n\n\n\n        CDKのBootstrapをカスタマイズしてみた      \n\n        2024.12.25      \n\n \n\n \n\n        CDKのBootstrapをカスタマイズしてみた      \n\n        2024.12.25      \n \n        CDKのBootstrapをカスタマイズしてみた       \n\n\n\n\n\n        【UPDATE】AWS Backupが検索とアイテムレベルのリカバリ機能を発表しました！      \n\n        2024.12.24      \n\n \n\n \n\n        【UPDATE】AWS Backupが検索とアイテムレベルのリカバリ機能を発表しました！      \n\n        2024.12.24      \n \n        【UPDATE】AWS Backupが検索とアイテムレベルのリカバリ機能を発表しました！       \n\n\n\n\n\n        DynamoDB Mapper for Kotlin（プレビュー版）を試してみた      \n\n        2024.12.23      \n\n \n\n \n\n        DynamoDB Mapper for Kotlin（プレビュー版）を試してみた      \n\n        2024.12.23      \n \n        DynamoDB Mapper for Kotlin（プレビュー版）を試してみた       \n\n\n\n\n\n        ANGEL Dojo 2024 頂上決戦に登壇しました！      \n\n        2024.12.22      \n\n \n\n \n\n        ANGEL Dojo 2024 頂上決戦に登壇しました！      \n\n        2024.12.22      \n \n        ANGEL Dojo 2024 頂上決戦に登壇しました！       \n\n\n\n\n\n        GitHub Actionsの実行結果をSlackに連携してみた      \n\n        2024.12.21      \n\n \n\n \n\n        GitHub Actionsの実行結果をSlackに連携してみた      \n\n        2024.12.21      \n \n        GitHub Actionsの実行結果をSlackに連携してみた      "
    },
    {
        "url": "https://www.ctc-g.co.jp/solutions/cloud/column/article/113.html",
        "status": "success",
        "content": "投稿日: 2024/12/12 はじめに こんにちは。CTCの近藤です。\r\n            ChatGPTで有名なOpenAI社が月額200ドルで「o1 Pro mode」を利用できるChatGPTProを発表、Meta社がLlama3.1の性能を継承しながらもコストを大幅に削減した新モデル「Llama3.3 70B」を発表するなど、様々な企業が基盤モデル（FMs）に関する新サービスや新機能を多数発表する中、Amazonも先日(2024/12/3)開催されたAWS re:Invent 2024内のKeynoteにてAmazon独自開発のモデル「Amazon　Nova」を発表しました。                   \r\n         https://aws.amazon.com/jp/about-aws/whats-new/2024/12/amazon-nova-foundation-models-bedrock/ そこで今回は発表されたばかりの「Amazon Nova」の説明と実際の利用方法についてご紹介したいと思います。 Amazon Novaとは AWSでAPIを介して様々な基盤モデルを使用できるフルマネージドな生成AIサービスである「Amazon Bedrock」で新しく利用可能となったAmazonが開発したモデル群であり、「Micro」「Lite」「Pro」「Premier」「Canvas」「Reel」の６種類あります。（2024/12時点） それぞれの主な特徴 テキスト生成モデル Amazon Nova Micro：\r\n            最も低コストで低レイテンシー応答を提供するテキストのみのモデル。最大トークン数は128k。 Amazon Nova Lite：\r\n            画像、ビデオ、テキスト入力を高速で処理する低コストのマルチモーダルモデル。最大トークン数は300k。 Amazon Nova Pro：\r\n            Nova Liteよりも幅広いタスクに対応する精度、速度、コストのバランスがとれた、マルチモーダルモデル。最大トークン数は300k。 Amazon Nova Premier：\r\n            Novaシリーズで最も高性能なモデル。詳細については近日公開。 画像生成モデル Amazon Nova Canvas：\r\n            プロンプトのテキストから画像を生成するモデル。テキスト入力で画像を編集できる他、配色やレイアウトの調整を行うことも可能。最大入力文字数は1024文字。 動画生成モデル Amazon Nova Reel：\r\n            テキストと画像から動画を生成するモデル。テキストだけではなく画像からも動画を生成可能。最大入力文字数は512文字。また、近日中に２分間の動画生成にも対応する。（現在は６秒間） 利用手順（試してみた） それでは実際に、「Amazon Nova」を試していきたいと思います。 モデルの有効化 まず、Amazon Bedrockで新しいモデルを利用する際はモデル一覧から有効化のリクエストを行います。 利用を行いたいモデルのStatusに表示されている「リクエスト可能」を選択し、「モデルアクセスをリクエスト」からアクセス申請を行うと、数秒～数分ほどでモデルへのアクセスが可能となり、「アクセスが付与されました」という表示となります。\r\n            この表示になればAmazon Bedrockから該当のモデルの利用が可能です。\r\n         プレイグラウンドでテキスト生成モデルを試してみる モデルが利用可能となったら早速試してみましょう。\r\n            Amazon Bedrockで最も気軽にモデルを試す方法としてプレイグラウンドを利用する方法があります。\r\n            Amazon Bedrockのコンソール画面の左ペインにある[▼プレイグラウンド]-[Chat/Text]を選択し、Modeを「Chat」モデルの選択で試したいモデルを選択し、[適用]をクリックするだけで利用可能です。\r\n         試しに「Amazon Bedrockについて概要を簡単に教えて」と入力し、実行してみましょう。\r\n            今回は「Amazon Nova Pro」の他に比較としてAmazon Bedrockでも人気のモデルである「Claude 3 Haiku」と比較モードで比較してみます。\r\n         結果は上記の通りです。非常に精度の高い回答が返ってきている印象です。また、速度の速い「Claude3 Haiku」と比較してもより速い速度で回答が返ってきていることにも驚きです。\r\n            なお、「Amazon Nova Pro」と比較して「Amazon Nova Lite」ではレイテンシーは約500ms「Amazon Nova Micro」では約1000ms少ない結果となりました。\r\n            また補足事項として「Amazon Nova Micro」だけProやLiteと比較して、Output数が少ない結果となっています。\r\n         プレイグラウンドで画像/動画生成モデルを試してみる 「Amazon Nova」にはテキスト生成モデル以外にも画像生成と動画生成のモデルも発表されているため、そちらも試してみましょう。なお、画像と動画についてもAmazon Bedrockのプレイグラウンドで試すことが可能です。\r\n            Amazon Bedrockのコンソール画面の左ペインにある[▼プレイグラウンド]-[Image/Video]を選択し、Modeを「image」モデルの選択で試したいモデルを選択し、[適用]をクリックするだけで利用可能です。\r\n         Image/Video Playgroundでは設定の[Action]にていくつかのアクションから選択可能です。 今回はアクションは[画像生成]で、試しに「A man samurai out on the streets of modern Tokyo」と入力し、実行してみましょう。 また、[設定]の[カラーパレッド]で色を指定するとカラーパレッドで指定した色も反映された画像を生成してくれます。 最後に動画生成も試してみましょう。\r\n            モデルの選択で[Video]に対応したモデルを選択し、[適用]をクリックするだけで利用可能です。\r\n            動画生成モデルを適用すると、生成された動画の保存先S3バケットが必要であるとのメッセージが表示され[確認]を選択すると自動的に動画の保存用バケットが生成されます。\r\n         「A man samurai enjoying himself out on the streets of modern Tokyo.」と入力し、実行してみましょう。\r\n            動画の生成には5分程度時間がかかります。\r\n         生成されると動画が再生可能となり、保存先のS3バケットにはmp4形式で動画が保存されています。 以下は実際に生成された動画ですが、プロンプト通り”楽しそう”にしていますでしょうか。\r\n            楽しそうかどうかはさておき、簡単にクオリティの高い動画を生成することができました。\r\n         \n\n APIでモデルを実行する  Converse APIリクエストを使用して、Amazon Novaモデルの呼び出し・実行をすることが可能です。\r\n            詳細についてはAWS公式の Amazon Nova ユーザーガイドにも掲載されています。\r\n         https://docs.aws.amazon.com/nova/latest/userguide/getting-started-api.html Python SDK(Boto3)を使用してプレイグラウンドで試したプロンプトのサンプルを以下に記述します。 まとめ いかがでしょうか。\r\n            本記事では、AWS re:Invent 2024で発表されたばかりの「Amazon Nova」を試してみました。\r\n            テキスト生成の性能向上だけではなく、画像生成や動画生成などもより簡単に行えるようになったためAmazon Bedrockの活用の幅がより増えたと感じています。\r\n            特に「Amazon Nova Pro」は「Claude 3.5 Haiku」よりも低コストかつ応答速度も高速であり、今後Amazon Bedrockを用いた生成AIアプリケーション作成時の第一選択肢ともなりうるのではないかと思います。\r\n         今回紹介したモデルの他にも「Amazon Nova」シリーズでは「Speech-to-Speechモデル」や「Any-to-Any」モデルも近日登場すると発表されているため今後も期待して注目していきたい基盤シリーズです。 CTCは、AWSのビジネス利活用に向けて、お客様のステージに合わせた幅広い構築・運用支援サービスを提供しています。\r\n            経験豊富なエンジニアが、ワンストップかつ柔軟にご支援します。\r\n          ぜひ、お気軽にお問い合わせください。 お問い合わせ \n【著者プロフィール】\n近藤　隆太（こんどう　りゅうた）\n伊藤忠テクノソリューションズ株式会社　クラウドエンジニア\n2024 Japan AWS Jr.Champions\r\n            2022年に新卒で入社し、オンプレミスネットワークの設計および構築業務を経験。\r\n            現在はAWSの設計・構築を担当。\r\n            社内活動として、西日本エリアでのAWSサービスの啓蒙活動やAI/MLサービスの評価・検証にも積極的に取り組んでいる。\n 伊藤忠テクノソリューションズ株式会社　クラウドエンジニア 2024 Japan AWS Jr.Champions\r\n            2022年に新卒で入社し、オンプレミスネットワークの設計および構築業務を経験。\r\n            現在はAWSの設計・構築を担当。\r\n            社内活動として、西日本エリアでのAWSサービスの啓蒙活動やAI/MLサービスの評価・検証にも積極的に取り組んでいる。 "
    },
    {
        "url": "https://qiita.com/yu-Matsu/items/38bc37d94e600b082e15",
        "status": "success",
        "content": "@yu-Matsu(Yuki Matsuyoshi)inKDDIアジャイル開発センター株式会社Bedrock の新モデル Amazon Nova を早速試してみた！AWSnovabedrock生成AIreInvent2024Posted at 2024-12-04 @yu-Matsu(Yuki Matsuyoshi)inKDDIアジャイル開発センター株式会社 @yu-Matsu(Yuki Matsuyoshi)inKDDIアジャイル開発センター株式会社  (Yuki Matsuyoshi) inKDDIアジャイル開発センター株式会社 in KDDIアジャイル開発センター株式会社 Posted at 2024-12-04 Posted at 2024-12-04 \nはじめに\nこんにちは！ yu-Matsuです！\n現在 AWS re:Invent 2024の真っ最中で、生成AI周りでも大量のアップデートが舞い込んできておりキャッチアップに追われています...\nそんな中、日本時刻で12/3の深夜に、KeyNoteにて Amazon Bedrock の新モデルである Nova ファミリー が発表され、利用できるようになっていたので試してみました。\n\n\n\n\nAmazon Nova とは\nAmazon Bedrockで新しく利用できるようになったモデル群であり、テキストや画像、動画を入力とし、それに対するテキストを出力する understanding models と、テキストや画像を入力とし、そこから新たな画像や動画を生成する creative content generation modelsで構成されています。\nそれぞれには、以下のようなモデルがあります。\n\nunderstanding models\n\n\nAmazon Nova Micro\n\n最も低コストだが、テキストのみ対応しており、画像や動画は取り扱えない\n\n\n\nAmazon Nova Lite\n\n低コストながらも、高速なマルチモーダルなモデル。検証などで利用する場合はこちらが良さそう\n\n\n\nAmazon Nova Pro\n\nNova Lite よりもより精度、コスト、速度のバランスが取れているモデル。複雑なワークフローにも対応可能とのこと\n\n\n\nAmazon Nova Premier\n\n最も高性能なのモデルのようだが、Comming Soon...\n\n\n\n既存のモデルとの性能比較に関しては、以下のサイトに掲載されています。\n\n\n\n\ncreative content generation models\n\n\nAmazon Nova Canvas\n\nテキスト情報から画像を生成するモデル。モデル実行の際にカラーパレットやContributing Image(おそらく基準となる画像)を指定できる\n\n\n\nAmazon Nova Reel\n\n動画生成モデル。テキスト情報だけでなく、画像も入力として扱えることが特徴\n\n\n\nなんか色々出来そうでワクワクしますね！！\nNovaといえば、某駅前留学が思い浮かぶのですが、もう古いですかね...\n\n有効化して使ってみた\n\nモデルの有効化\nそれでは実際にモデルを有効化して使ってみたいと思います！\nいつも通り、Bedrockのコンソールからモデル一覧をのぞいでみると...\n\nあった、ありました！\nそれでは早速モデルアクセスの申請をして...\n数分待つかと思いきや、ほんの数秒ほどで有効化されました！\n\n\nBedrockのコンソールから使ってみる\n\nテキスト生成/画像分析\nまずは基本（？）のテキスト生成から見てみます。\nBedrockコンソールの左メニューを見てみると、[プレイグラウンド]の下に[Chat/Text]、[Image/Video]の選択肢が出来ていることが分かります。\n\n今回はテキスト生成を試すので、[Chat/Text]を選択します。\nプレイグラウンドは以下のようになっています。\n\n[モデルを選択]から、今回試してみたいモデルである [Nova Pro]を選択し、[適用]します。\n\n小手試しとして、「Amazon Bedrockの特徴を簡潔に答えて！」と入力し、実行してみました。結果の一部が以下の画像のようになっています。かなり精度の高い回答が返ってきているように感じます。\n\n何よりも驚いたのが、その速度です。これくらいの内容であれば、ほんの一瞬で回答が返ってきました。アプリケーションからBedrockのモデルを動かす際など、今までは多少のレスポンスの悪さを感じることがありましたが、これはかなり改善されそうです。\n画像分析も試してみました。\n以下の画像について説明してもらいました。\n\n「黒い背景」というところが少し怪しく感じますが、この画像は透過処理されているものであるので、そこが関係していそうです。それ以外の説明に関しては違和感のない回答となっています。\n\n今回は時間の都合上割愛していますが、同様に動画も入力にすることができますので、ぜひお試しください！\n\n画像生成/動画生成\n次に、画像、動画生成を試してみたいと思います。\nまずは画像生成から。\n左メニューの[プレイグラウンド]から、今度は[Image/Video]を選択します。\nプレイグラウンドが開いたら、先ほどと同じように[モデルを選択]していきます。画像生成なので、今回は[Nova Canvas]を選択、適用します。\n\nカラーパレットを適当に指定して、「マウスとキーボードを操作している犬の画像を生成して！」と指示してみました。\n少し待つと、以下のような画像が出力されました。マウスが見当たりませんが、キーボードを触っていそうな犬の画像が生成されています！ カラーパレットで指定した色も反映されていそうです。\n何回か試してみましたが、アニメ調ではなく、リアル寄りの画像が生成される傾向のようです。\n\nちなみに、「Nova」なので「英語が得意そうなウサギの画像を生成して」と指示してみた結果が以下になります。\n\n某うさぎが出てこなくてよかった...\n「英語が得意そう」といったかなり抽象的になってしまう指示に関しては上手く対応出来ていなさそうです。（人間でも難しいですが...）\n最後に、動画生成を試してみます。\nモデルに[Nova Reel]を選択します。どうでも良いことなのですが、動画生成モデルに「Reel」と名前をつけるのはかなりオシャレだなと思いました...\n\n生成された動画を保存するS3バケットが必要である旨のメッセージが出るので、[確認]を押下します。この際、バケットが自動で生成されます。\n\n「Amazon Bedrockのアップデートに喜ぶ猫」というテーマで動画を作成してもらうことにします。この際、[Start frame]で画像をしてすることで、その画像に即した動画が生成されます。（今回はしない）\n\n[実行]すると、動画の生成が開始されます。生成に大体5分ほど時間がかかりますので、のんびり待ちます。画面右側には現在の生成ジョブのステータスが表示されます。\n\n動画の作成が完了しました！\n作成された動画のサムネイルが表示されています。現状は6秒の動画が生成されるようになっているようです。\n\n作成された動画を確認してみます。\n自動生成されたS3バケットを見に行ってみると、「output.mp4」という名前の動画ファイルがあることが分かります。\n\n作成された動画は以下のような感じになりました！\n少々無茶振りだったこともあり Bedrock 感はあまりないですが、喜んではいそうですね！\n\n\nアプリケーションへの応用例\nもちろんこれらのモデルは APIからも実行可能 ですので、今すぐにでもアプリケーション開発に組み込むことが出来ます！ Pythonのコードサンプルなどは、以下のドキュメントに記載があります。\n\n\n\n今回はその一例として、Streamlit(もはやお馴染み) を利用した、簡単な動画生成アプリケーションを実装してみました。\nコードな以下になります。\n\nnova_reel.py\nimport json\nimport time\nimport boto3\nimport streamlit as st\n\nbedrock_runtime = boto3.client(\"bedrock-runtime\", \"us-east-1\")\ns3_bucket = \"作成された動画が保存されるS3バケット\"\n\ndef generate_presigned_url(bucket_name, object_key, expiration=86400):\n    '''\n    作成された動画の署名付きURLを発行する\n    '''\n    \n    s3_client = boto3.client('s3', 'us-east-1')\n \n    url = s3_client.generate_presigned_url(\n        'get_object',\n        Params={'Bucket': bucket_name, 'Key': object_key},\n        ExpiresIn=expiration\n    )\n    return url\n\ndef run_nova_reel(input): \n    '''\n    動画生成を実行する\n    '''\n    \n    model_input = {\n        \"taskType\": \"TEXT_VIDEO\",\n        \"textToVideoParams\": {\n            \"text\": input\n        },\n        \"videoGenerationConfig\": {\n            \"durationSeconds\": 6,\n            \"fps\": 24,\n            \"dimension\": \"1280x720\",\n            \"seed\": 0,  # Change the seed to get a different result\n        },\n    }\n\n    invocation = bedrock_runtime.start_async_invoke(\n        modelId=\"amazon.nova-reel-v1:0\",\n        modelInput=model_input,\n        outputDataConfig={\n            \"s3OutputDataConfig\": {\n                \"s3Uri\": f\"s3://{s3_bucket}\"\n            }\n        }\n    )\n\n    status_placeholder = st.empty()\n    final_response = \"\"\n\n    invocation_arn = invocation[\"invocationArn\"]\n\n    invoke_status = \"\"\n    passed_time = 0\n\n    # 実行状況を画面に表示する\n    while True:\n        res = bedrock_runtime.get_async_invoke(\n            invocationArn=invocation_arn\n        )\n\n        invoke_status = res[\"status\"]\n        status_placeholder.write(f\"Job {invocation_arn} is in progress. {passed_time}s...\")\n\n        if invoke_status != \"InProgress\":\n            break\n\n        time.sleep(30)\n        passed_time += 30\n\n    if invoke_status == \"Completed\":\n        prefix = invocation_arn.split('/')[-1]\n        url = generate_presigned_url(s3_bucket, prefix+\"/output.mp4\")\n\n        # ボタンを押下すれば動画をDL出来るようにする \n        status_placeholder.write(\"生成完了！\")\n        st.link_button(\"ダウンロードURL\", url)\n\n\ndef main():\n    st.title(\"Nova Reel 検証アプリ\")\n    input = st.text_input(\"何か入力\")\n    \n    if st.button(\"実行！\"):\n        run_nova_reel(input)\n\nif __name__ == \"__main__\":\n    main()\n\n\nコードの簡単な解説は以下になります。\n\n動画生成モデルの実行APIは、bedrock_runtime.start_async_invokeで呼び出している\n動画の生成状況に関しては、bedrock_runtime.get_async_invokeを定期的にポーリングして確認している\n動画の生成状況が「Completed」になったら、保存された動画の署名付きURLを発行して、画面上からダウンロード出来るようにボタンを設ける\n\n以下のコマンドを実行し、アプリケーションを起動します。（ローカル環境で実行する場合は、AWSの認証情報を環境変数にexportしておく必要があります）\nstreamlit run nova_reel.py --server.port 8080\n\n以下のような画面が開いたら起動成功です！\n\nそれでは、コンソールで試してた時と同じように、「Amazon Bedrockのアップデートに喜んでいる猫」と入力し、実行してみます。\n問題なく動いているようです！ 30秒ごとにポーリングしてステータスを確認し、実行ボタンの下に表示しています。\n\n動画の生成が完了しました！\n[ダウンロードURL]ボタンをクリックし、動画をダウンロードしてみます\n\n今回生成された動画がこちらになります。\n前回よりもかなりリアル寄りになりました。そのせいもあるのか、喜んでいるのかどうかわからないですね... 　少しソワソワしているように感じるので、表情に出ていないだけと思っておきます\n\nこのように、APIを利用してアプケーションを作成、または既存のアプリケーションへの組み込みが非常に簡単に出来ます！\n\n最後に\n今回は、AWS re:Invent 2024で発表されたばかりの Amazon Nova で色々遊んでみたので記事にしました。現在re:Inventで発表されている中では、個人的にRerankモデルと同じくかなり大きなアップデートでした。従来のテキスト生成の性能向上に加え、画像生成や動画生成がより簡単に取り扱えるようになったため、アプリケーションへの組み込みの幅がかなり増えたのではないかと考えています。\nre:Inventはまだ折り返したばかりで、これからもかなり多くのアップデートが発表されると思われますので、なんとか食いついて行きたいです...\n今回の記事は以上になります。最後までご精読いただきまして、ありがとうございました！\n\n少し宣伝...\n今年も私の所属している KDDIアジャイル開発センター株式会社 のアドベントカレンダーが始まっています。ご興味がある方は是非ご覧になってください！（私も月末に何か書きます）\n\n\n\n \nはじめに\nこんにちは！ yu-Matsuです！\n現在 AWS re:Invent 2024の真っ最中で、生成AI周りでも大量のアップデートが舞い込んできておりキャッチアップに追われています...\nそんな中、日本時刻で12/3の深夜に、KeyNoteにて Amazon Bedrock の新モデルである Nova ファミリー が発表され、利用できるようになっていたので試してみました。\n\n\n\n\nAmazon Nova とは\nAmazon Bedrockで新しく利用できるようになったモデル群であり、テキストや画像、動画を入力とし、それに対するテキストを出力する understanding models と、テキストや画像を入力とし、そこから新たな画像や動画を生成する creative content generation modelsで構成されています。\nそれぞれには、以下のようなモデルがあります。\n\nunderstanding models\n\n\nAmazon Nova Micro\n\n最も低コストだが、テキストのみ対応しており、画像や動画は取り扱えない\n\n\n\nAmazon Nova Lite\n\n低コストながらも、高速なマルチモーダルなモデル。検証などで利用する場合はこちらが良さそう\n\n\n\nAmazon Nova Pro\n\nNova Lite よりもより精度、コスト、速度のバランスが取れているモデル。複雑なワークフローにも対応可能とのこと\n\n\n\nAmazon Nova Premier\n\n最も高性能なのモデルのようだが、Comming Soon...\n\n\n\n既存のモデルとの性能比較に関しては、以下のサイトに掲載されています。\n\n\n\n\ncreative content generation models\n\n\nAmazon Nova Canvas\n\nテキスト情報から画像を生成するモデル。モデル実行の際にカラーパレットやContributing Image(おそらく基準となる画像)を指定できる\n\n\n\nAmazon Nova Reel\n\n動画生成モデル。テキスト情報だけでなく、画像も入力として扱えることが特徴\n\n\n\nなんか色々出来そうでワクワクしますね！！\nNovaといえば、某駅前留学が思い浮かぶのですが、もう古いですかね...\n\n有効化して使ってみた\n\nモデルの有効化\nそれでは実際にモデルを有効化して使ってみたいと思います！\nいつも通り、Bedrockのコンソールからモデル一覧をのぞいでみると...\n\nあった、ありました！\nそれでは早速モデルアクセスの申請をして...\n数分待つかと思いきや、ほんの数秒ほどで有効化されました！\n\n\nBedrockのコンソールから使ってみる\n\nテキスト生成/画像分析\nまずは基本（？）のテキスト生成から見てみます。\nBedrockコンソールの左メニューを見てみると、[プレイグラウンド]の下に[Chat/Text]、[Image/Video]の選択肢が出来ていることが分かります。\n\n今回はテキスト生成を試すので、[Chat/Text]を選択します。\nプレイグラウンドは以下のようになっています。\n\n[モデルを選択]から、今回試してみたいモデルである [Nova Pro]を選択し、[適用]します。\n\n小手試しとして、「Amazon Bedrockの特徴を簡潔に答えて！」と入力し、実行してみました。結果の一部が以下の画像のようになっています。かなり精度の高い回答が返ってきているように感じます。\n\n何よりも驚いたのが、その速度です。これくらいの内容であれば、ほんの一瞬で回答が返ってきました。アプリケーションからBedrockのモデルを動かす際など、今までは多少のレスポンスの悪さを感じることがありましたが、これはかなり改善されそうです。\n画像分析も試してみました。\n以下の画像について説明してもらいました。\n\n「黒い背景」というところが少し怪しく感じますが、この画像は透過処理されているものであるので、そこが関係していそうです。それ以外の説明に関しては違和感のない回答となっています。\n\n今回は時間の都合上割愛していますが、同様に動画も入力にすることができますので、ぜひお試しください！\n\n画像生成/動画生成\n次に、画像、動画生成を試してみたいと思います。\nまずは画像生成から。\n左メニューの[プレイグラウンド]から、今度は[Image/Video]を選択します。\nプレイグラウンドが開いたら、先ほどと同じように[モデルを選択]していきます。画像生成なので、今回は[Nova Canvas]を選択、適用します。\n\nカラーパレットを適当に指定して、「マウスとキーボードを操作している犬の画像を生成して！」と指示してみました。\n少し待つと、以下のような画像が出力されました。マウスが見当たりませんが、キーボードを触っていそうな犬の画像が生成されています！ カラーパレットで指定した色も反映されていそうです。\n何回か試してみましたが、アニメ調ではなく、リアル寄りの画像が生成される傾向のようです。\n\nちなみに、「Nova」なので「英語が得意そうなウサギの画像を生成して」と指示してみた結果が以下になります。\n\n某うさぎが出てこなくてよかった...\n「英語が得意そう」といったかなり抽象的になってしまう指示に関しては上手く対応出来ていなさそうです。（人間でも難しいですが...）\n最後に、動画生成を試してみます。\nモデルに[Nova Reel]を選択します。どうでも良いことなのですが、動画生成モデルに「Reel」と名前をつけるのはかなりオシャレだなと思いました...\n\n生成された動画を保存するS3バケットが必要である旨のメッセージが出るので、[確認]を押下します。この際、バケットが自動で生成されます。\n\n「Amazon Bedrockのアップデートに喜ぶ猫」というテーマで動画を作成してもらうことにします。この際、[Start frame]で画像をしてすることで、その画像に即した動画が生成されます。（今回はしない）\n\n[実行]すると、動画の生成が開始されます。生成に大体5分ほど時間がかかりますので、のんびり待ちます。画面右側には現在の生成ジョブのステータスが表示されます。\n\n動画の作成が完了しました！\n作成された動画のサムネイルが表示されています。現状は6秒の動画が生成されるようになっているようです。\n\n作成された動画を確認してみます。\n自動生成されたS3バケットを見に行ってみると、「output.mp4」という名前の動画ファイルがあることが分かります。\n\n作成された動画は以下のような感じになりました！\n少々無茶振りだったこともあり Bedrock 感はあまりないですが、喜んではいそうですね！\n\n\nアプリケーションへの応用例\nもちろんこれらのモデルは APIからも実行可能 ですので、今すぐにでもアプリケーション開発に組み込むことが出来ます！ Pythonのコードサンプルなどは、以下のドキュメントに記載があります。\n\n\n\n今回はその一例として、Streamlit(もはやお馴染み) を利用した、簡単な動画生成アプリケーションを実装してみました。\nコードな以下になります。\n\nnova_reel.py\nimport json\nimport time\nimport boto3\nimport streamlit as st\n\nbedrock_runtime = boto3.client(\"bedrock-runtime\", \"us-east-1\")\ns3_bucket = \"作成された動画が保存されるS3バケット\"\n\ndef generate_presigned_url(bucket_name, object_key, expiration=86400):\n    '''\n    作成された動画の署名付きURLを発行する\n    '''\n    \n    s3_client = boto3.client('s3', 'us-east-1')\n \n    url = s3_client.generate_presigned_url(\n        'get_object',\n        Params={'Bucket': bucket_name, 'Key': object_key},\n        ExpiresIn=expiration\n    )\n    return url\n\ndef run_nova_reel(input): \n    '''\n    動画生成を実行する\n    '''\n    \n    model_input = {\n        \"taskType\": \"TEXT_VIDEO\",\n        \"textToVideoParams\": {\n            \"text\": input\n        },\n        \"videoGenerationConfig\": {\n            \"durationSeconds\": 6,\n            \"fps\": 24,\n            \"dimension\": \"1280x720\",\n            \"seed\": 0,  # Change the seed to get a different result\n        },\n    }\n\n    invocation = bedrock_runtime.start_async_invoke(\n        modelId=\"amazon.nova-reel-v1:0\",\n        modelInput=model_input,\n        outputDataConfig={\n            \"s3OutputDataConfig\": {\n                \"s3Uri\": f\"s3://{s3_bucket}\"\n            }\n        }\n    )\n\n    status_placeholder = st.empty()\n    final_response = \"\"\n\n    invocation_arn = invocation[\"invocationArn\"]\n\n    invoke_status = \"\"\n    passed_time = 0\n\n    # 実行状況を画面に表示する\n    while True:\n        res = bedrock_runtime.get_async_invoke(\n            invocationArn=invocation_arn\n        )\n\n        invoke_status = res[\"status\"]\n        status_placeholder.write(f\"Job {invocation_arn} is in progress. {passed_time}s...\")\n\n        if invoke_status != \"InProgress\":\n            break\n\n        time.sleep(30)\n        passed_time += 30\n\n    if invoke_status == \"Completed\":\n        prefix = invocation_arn.split('/')[-1]\n        url = generate_presigned_url(s3_bucket, prefix+\"/output.mp4\")\n\n        # ボタンを押下すれば動画をDL出来るようにする \n        status_placeholder.write(\"生成完了！\")\n        st.link_button(\"ダウンロードURL\", url)\n\n\ndef main():\n    st.title(\"Nova Reel 検証アプリ\")\n    input = st.text_input(\"何か入力\")\n    \n    if st.button(\"実行！\"):\n        run_nova_reel(input)\n\nif __name__ == \"__main__\":\n    main()\n\n\nコードの簡単な解説は以下になります。\n\n動画生成モデルの実行APIは、bedrock_runtime.start_async_invokeで呼び出している\n動画の生成状況に関しては、bedrock_runtime.get_async_invokeを定期的にポーリングして確認している\n動画の生成状況が「Completed」になったら、保存された動画の署名付きURLを発行して、画面上からダウンロード出来るようにボタンを設ける\n\n以下のコマンドを実行し、アプリケーションを起動します。（ローカル環境で実行する場合は、AWSの認証情報を環境変数にexportしておく必要があります）\nstreamlit run nova_reel.py --server.port 8080\n\n以下のような画面が開いたら起動成功です！\n\nそれでは、コンソールで試してた時と同じように、「Amazon Bedrockのアップデートに喜んでいる猫」と入力し、実行してみます。\n問題なく動いているようです！ 30秒ごとにポーリングしてステータスを確認し、実行ボタンの下に表示しています。\n\n動画の生成が完了しました！\n[ダウンロードURL]ボタンをクリックし、動画をダウンロードしてみます\n\n今回生成された動画がこちらになります。\n前回よりもかなりリアル寄りになりました。そのせいもあるのか、喜んでいるのかどうかわからないですね... 　少しソワソワしているように感じるので、表情に出ていないだけと思っておきます\n\nこのように、APIを利用してアプケーションを作成、または既存のアプリケーションへの組み込みが非常に簡単に出来ます！\n\n最後に\n今回は、AWS re:Invent 2024で発表されたばかりの Amazon Nova で色々遊んでみたので記事にしました。現在re:Inventで発表されている中では、個人的にRerankモデルと同じくかなり大きなアップデートでした。従来のテキスト生成の性能向上に加え、画像生成や動画生成がより簡単に取り扱えるようになったため、アプリケーションへの組み込みの幅がかなり増えたのではないかと考えています。\nre:Inventはまだ折り返したばかりで、これからもかなり多くのアップデートが発表されると思われますので、なんとか食いついて行きたいです...\n今回の記事は以上になります。最後までご精読いただきまして、ありがとうございました！\n\n少し宣伝...\n今年も私の所属している KDDIアジャイル開発センター株式会社 のアドベントカレンダーが始まっています。ご興味がある方は是非ご覧になってください！（私も月末に何か書きます）\n\n\n\n  こんにちは！ yu-Matsuです！ 現在 AWS re:Invent 2024の真っ最中で、生成AI周りでも大量のアップデートが舞い込んできておりキャッチアップに追われています... そんな中、日本時刻で12/3の深夜に、KeyNoteにて Amazon Bedrock の新モデルである Nova ファミリー が発表され、利用できるようになっていたので試してみました。 \n\n  Amazon Bedrockで新しく利用できるようになったモデル群であり、テキストや画像、動画を入力とし、それに対するテキストを出力する understanding models と、テキストや画像を入力とし、そこから新たな画像や動画を生成する creative content generation modelsで構成されています。 それぞれには、以下のようなモデルがあります。  既存のモデルとの性能比較に関しては、以下のサイトに掲載されています。 \n\n  なんか色々出来そうでワクワクしますね！！\nNovaといえば、某駅前留学が思い浮かぶのですが、もう古いですかね...   それでは実際にモデルを有効化して使ってみたいと思います！ いつも通り、Bedrockのコンソールからモデル一覧をのぞいでみると... あった、ありました！\nそれでは早速モデルアクセスの申請をして...\n数分待つかと思いきや、ほんの数秒ほどで有効化されました！    まずは基本（？）のテキスト生成から見てみます。 Bedrockコンソールの左メニューを見てみると、[プレイグラウンド]の下に[Chat/Text]、[Image/Video]の選択肢が出来ていることが分かります。 今回はテキスト生成を試すので、[Chat/Text]を選択します。\nプレイグラウンドは以下のようになっています。  [モデルを選択]から、今回試してみたいモデルである [Nova Pro]を選択し、[適用]します。  小手試しとして、「Amazon Bedrockの特徴を簡潔に答えて！」と入力し、実行してみました。結果の一部が以下の画像のようになっています。かなり精度の高い回答が返ってきているように感じます。  何よりも驚いたのが、その速度です。これくらいの内容であれば、ほんの一瞬で回答が返ってきました。アプリケーションからBedrockのモデルを動かす際など、今までは多少のレスポンスの悪さを感じることがありましたが、これはかなり改善されそうです。 画像分析も試してみました。\n以下の画像について説明してもらいました。 「黒い背景」というところが少し怪しく感じますが、この画像は透過処理されているものであるので、そこが関係していそうです。それ以外の説明に関しては違和感のない回答となっています。  今回は時間の都合上割愛していますが、同様に動画も入力にすることができますので、ぜひお試しください！  次に、画像、動画生成を試してみたいと思います。 まずは画像生成から。\n左メニューの[プレイグラウンド]から、今度は[Image/Video]を選択します。 プレイグラウンドが開いたら、先ほどと同じように[モデルを選択]していきます。画像生成なので、今回は[Nova Canvas]を選択、適用します。  カラーパレットを適当に指定して、「マウスとキーボードを操作している犬の画像を生成して！」と指示してみました。\n少し待つと、以下のような画像が出力されました。マウスが見当たりませんが、キーボードを触っていそうな犬の画像が生成されています！ カラーパレットで指定した色も反映されていそうです。\n何回か試してみましたが、アニメ調ではなく、リアル寄りの画像が生成される傾向のようです。  ちなみに、「Nova」なので「英語が得意そうなウサギの画像を生成して」と指示してみた結果が以下になります。  某うさぎが出てこなくてよかった...\n「英語が得意そう」といったかなり抽象的になってしまう指示に関しては上手く対応出来ていなさそうです。（人間でも難しいですが...） 最後に、動画生成を試してみます。\nモデルに[Nova Reel]を選択します。どうでも良いことなのですが、動画生成モデルに「Reel」と名前をつけるのはかなりオシャレだなと思いました...  生成された動画を保存するS3バケットが必要である旨のメッセージが出るので、[確認]を押下します。この際、バケットが自動で生成されます。 「Amazon Bedrockのアップデートに喜ぶ猫」というテーマで動画を作成してもらうことにします。この際、[Start frame]で画像をしてすることで、その画像に即した動画が生成されます。（今回はしない）  [実行]すると、動画の生成が開始されます。生成に大体5分ほど時間がかかりますので、のんびり待ちます。画面右側には現在の生成ジョブのステータスが表示されます。  動画の作成が完了しました！\n作成された動画のサムネイルが表示されています。現状は6秒の動画が生成されるようになっているようです。  作成された動画を確認してみます。\n自動生成されたS3バケットを見に行ってみると、「output.mp4」という名前の動画ファイルがあることが分かります。  作成された動画は以下のような感じになりました！\n少々無茶振りだったこともあり Bedrock 感はあまりないですが、喜んではいそうですね！   もちろんこれらのモデルは APIからも実行可能 ですので、今すぐにでもアプリケーション開発に組み込むことが出来ます！ Pythonのコードサンプルなどは、以下のドキュメントに記載があります。 \n\n 今回はその一例として、Streamlit(もはやお馴染み) を利用した、簡単な動画生成アプリケーションを実装してみました。 コードな以下になります。 \nnova_reel.py\nimport json\nimport time\nimport boto3\nimport streamlit as st\n\nbedrock_runtime = boto3.client(\"bedrock-runtime\", \"us-east-1\")\ns3_bucket = \"作成された動画が保存されるS3バケット\"\n\ndef generate_presigned_url(bucket_name, object_key, expiration=86400):\n    '''\n    作成された動画の署名付きURLを発行する\n    '''\n    \n    s3_client = boto3.client('s3', 'us-east-1')\n \n    url = s3_client.generate_presigned_url(\n        'get_object',\n        Params={'Bucket': bucket_name, 'Key': object_key},\n        ExpiresIn=expiration\n    )\n    return url\n\ndef run_nova_reel(input): \n    '''\n    動画生成を実行する\n    '''\n    \n    model_input = {\n        \"taskType\": \"TEXT_VIDEO\",\n        \"textToVideoParams\": {\n            \"text\": input\n        },\n        \"videoGenerationConfig\": {\n            \"durationSeconds\": 6,\n            \"fps\": 24,\n            \"dimension\": \"1280x720\",\n            \"seed\": 0,  # Change the seed to get a different result\n        },\n    }\n\n    invocation = bedrock_runtime.start_async_invoke(\n        modelId=\"amazon.nova-reel-v1:0\",\n        modelInput=model_input,\n        outputDataConfig={\n            \"s3OutputDataConfig\": {\n                \"s3Uri\": f\"s3://{s3_bucket}\"\n            }\n        }\n    )\n\n    status_placeholder = st.empty()\n    final_response = \"\"\n\n    invocation_arn = invocation[\"invocationArn\"]\n\n    invoke_status = \"\"\n    passed_time = 0\n\n    # 実行状況を画面に表示する\n    while True:\n        res = bedrock_runtime.get_async_invoke(\n            invocationArn=invocation_arn\n        )\n\n        invoke_status = res[\"status\"]\n        status_placeholder.write(f\"Job {invocation_arn} is in progress. {passed_time}s...\")\n\n        if invoke_status != \"InProgress\":\n            break\n\n        time.sleep(30)\n        passed_time += 30\n\n    if invoke_status == \"Completed\":\n        prefix = invocation_arn.split('/')[-1]\n        url = generate_presigned_url(s3_bucket, prefix+\"/output.mp4\")\n\n        # ボタンを押下すれば動画をDL出来るようにする \n        status_placeholder.write(\"生成完了！\")\n        st.link_button(\"ダウンロードURL\", url)\n\n\ndef main():\n    st.title(\"Nova Reel 検証アプリ\")\n    input = st.text_input(\"何か入力\")\n    \n    if st.button(\"実行！\"):\n        run_nova_reel(input)\n\nif __name__ == \"__main__\":\n    main()\n\n nova_reel.py nova_reel.py import json\nimport time\nimport boto3\nimport streamlit as st\n\nbedrock_runtime = boto3.client(\"bedrock-runtime\", \"us-east-1\")\ns3_bucket = \"作成された動画が保存されるS3バケット\"\n\ndef generate_presigned_url(bucket_name, object_key, expiration=86400):\n    '''\n    作成された動画の署名付きURLを発行する\n    '''\n    \n    s3_client = boto3.client('s3', 'us-east-1')\n \n    url = s3_client.generate_presigned_url(\n        'get_object',\n        Params={'Bucket': bucket_name, 'Key': object_key},\n        ExpiresIn=expiration\n    )\n    return url\n\ndef run_nova_reel(input): \n    '''\n    動画生成を実行する\n    '''\n    \n    model_input = {\n        \"taskType\": \"TEXT_VIDEO\",\n        \"textToVideoParams\": {\n            \"text\": input\n        },\n        \"videoGenerationConfig\": {\n            \"durationSeconds\": 6,\n            \"fps\": 24,\n            \"dimension\": \"1280x720\",\n            \"seed\": 0,  # Change the seed to get a different result\n        },\n    }\n\n    invocation = bedrock_runtime.start_async_invoke(\n        modelId=\"amazon.nova-reel-v1:0\",\n        modelInput=model_input,\n        outputDataConfig={\n            \"s3OutputDataConfig\": {\n                \"s3Uri\": f\"s3://{s3_bucket}\"\n            }\n        }\n    )\n\n    status_placeholder = st.empty()\n    final_response = \"\"\n\n    invocation_arn = invocation[\"invocationArn\"]\n\n    invoke_status = \"\"\n    passed_time = 0\n\n    # 実行状況を画面に表示する\n    while True:\n        res = bedrock_runtime.get_async_invoke(\n            invocationArn=invocation_arn\n        )\n\n        invoke_status = res[\"status\"]\n        status_placeholder.write(f\"Job {invocation_arn} is in progress. {passed_time}s...\")\n\n        if invoke_status != \"InProgress\":\n            break\n\n        time.sleep(30)\n        passed_time += 30\n\n    if invoke_status == \"Completed\":\n        prefix = invocation_arn.split('/')[-1]\n        url = generate_presigned_url(s3_bucket, prefix+\"/output.mp4\")\n\n        # ボタンを押下すれば動画をDL出来るようにする \n        status_placeholder.write(\"生成完了！\")\n        st.link_button(\"ダウンロードURL\", url)\n\n\ndef main():\n    st.title(\"Nova Reel 検証アプリ\")\n    input = st.text_input(\"何か入力\")\n    \n    if st.button(\"実行！\"):\n        run_nova_reel(input)\n\nif __name__ == \"__main__\":\n    main()\n import json import time import boto3 import streamlit as st bedrock_runtime = boto3 . client ( \" bedrock-runtime \" , \" us-east-1 \" ) s3_bucket = \" 作成された動画が保存されるS3バケット \" def generate_presigned_url ( bucket_name , object_key , expiration = 86400 ): ''' \n    作成された動画の署名付きURLを発行する\n     ''' s3_client = boto3 . client ( ' s3 ' , ' us-east-1 ' ) url = s3_client . generate_presigned_url ( ' get_object ' , Params = { ' Bucket ' : bucket_name , ' Key ' : object_key }, ExpiresIn = expiration ) return url def run_nova_reel ( input ): ''' \n    動画生成を実行する\n     ''' model_input = { \" taskType \" : \" TEXT_VIDEO \" , \" textToVideoParams \" : { \" text \" : input }, \" videoGenerationConfig \" : { \" durationSeconds \" : 6 , \" fps \" : 24 , \" dimension \" : \" 1280x720 \" , \" seed \" : 0 , # Change the seed to get a different result\n }, } invocation = bedrock_runtime . start_async_invoke ( modelId = \" amazon.nova-reel-v1:0 \" , modelInput = model_input , outputDataConfig = { \" s3OutputDataConfig \" : { \" s3Uri \" : f \" s3:// { s3_bucket } \" } } ) status_placeholder = st . empty () final_response = \"\" invocation_arn = invocation [ \" invocationArn \" ] invoke_status = \"\" passed_time = 0 # 実行状況を画面に表示する\n while True : res = bedrock_runtime . get_async_invoke ( invocationArn = invocation_arn ) invoke_status = res [ \" status \" ] status_placeholder . write ( f \" Job  { invocation_arn }  is in progress.  { passed_time } s... \" ) if invoke_status != \" InProgress \" : break time . sleep ( 30 ) passed_time += 30 if invoke_status == \" Completed \" : prefix = invocation_arn . split ( ' / ' )[ - 1 ] url = generate_presigned_url ( s3_bucket , prefix + \" /output.mp4 \" ) # ボタンを押下すれば動画をDL出来るようにする \n status_placeholder . write ( \" 生成完了！ \" ) st . link_button ( \" ダウンロードURL \" , url ) def main (): st . title ( \" Nova Reel 検証アプリ \" ) input = st . text_input ( \" 何か入力 \" ) if st . button ( \" 実行！ \" ): run_nova_reel ( input ) if __name__ == \" __main__ \" : main () コードの簡単な解説は以下になります。 以下のコマンドを実行し、アプリケーションを起動します。（ローカル環境で実行する場合は、AWSの認証情報を環境変数にexportしておく必要があります） streamlit run nova_reel.py --server.port 8080\n streamlit run nova_reel.py --server.port 8080\n 以下のような画面が開いたら起動成功です！  それでは、コンソールで試してた時と同じように、「Amazon Bedrockのアップデートに喜んでいる猫」と入力し、実行してみます。\n問題なく動いているようです！ 30秒ごとにポーリングしてステータスを確認し、実行ボタンの下に表示しています。  動画の生成が完了しました！\n[ダウンロードURL]ボタンをクリックし、動画をダウンロードしてみます  今回生成された動画がこちらになります。\n前回よりもかなりリアル寄りになりました。そのせいもあるのか、喜んでいるのかどうかわからないですね... 　少しソワソワしているように感じるので、表情に出ていないだけと思っておきます  このように、APIを利用してアプケーションを作成、または既存のアプリケーションへの組み込みが非常に簡単に出来ます！  今回は、AWS re:Invent 2024で発表されたばかりの Amazon Nova で色々遊んでみたので記事にしました。現在re:Inventで発表されている中では、個人的にRerankモデルと同じくかなり大きなアップデートでした。従来のテキスト生成の性能向上に加え、画像生成や動画生成がより簡単に取り扱えるようになったため、アプリケーションへの組み込みの幅がかなり増えたのではないかと考えています。\nre:Inventはまだ折り返したばかりで、これからもかなり多くのアップデートが発表されると思われますので、なんとか食いついて行きたいです... 今回の記事は以上になります。最後までご精読いただきまして、ありがとうございました！  今年も私の所属している KDDIアジャイル開発センター株式会社 のアドベントカレンダーが始まっています。ご興味がある方は是非ご覧になってください！（私も月末に何か書きます） \n\n 15Go to list of users who liked4comment0Go to list of comments 15Go to list of users who liked4comment0Go to list of comments 15Go to list of users who liked  15Go to list of users who liked 15Go to list of users who liked Go to list of users who liked 4 4 comment0Go to list of comments comment Go to list of comments  Register as a new user and use Qiita more convenientlyYou get articles that match your needsYou can efficiently read back useful informationYou can use dark themeWhat you can do with signing upSign upLogin Register as a new user and use Qiita more conveniently Sign upLogin"
    }
]