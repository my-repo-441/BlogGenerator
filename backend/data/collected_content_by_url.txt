URL: https://qiita.com/iitz-i13/items/fb5d5c01c32e98e8999c
infoMore than 1 year has passed since last update. info More than 1 year has passed since last update. @iitz-i13【AWS】Amazon EC2 を利用した Web サーバーを構築してみたAWSEC2Last updated at 2023-12-22Posted at 2023-12-22 @iitz-i13 @iitz-i13  Last updated at 2023-12-22Posted at 2023-12-22 Last updated at 2023-12-22 Posted at 2023-12-22 
はじめに
これは「imtakalab Advent Calendar 2023」の 23 日目の記事です。



こんにちは  そこらへんにいる私立理系大学の学部 4 年生です 

背景
自分が所属している研究室では Web アンケート作成ツールの Qualtrics が研究によく使われています。
とても便利ですよね〜使ったことはないですが。（アンチとかではない  ）
しかし、Qualtrics はとても使いやすく柔軟に表現可能ですが、自分が納得のいくようないい感じに実験ページを組めないことがあると思います。
その際には自分で実験ページの Web サイトを作成してしまえばいいのです。
たまたま研究開発でお手伝いする機会があったので備忘録がてら、記事にしたいと思います〜

この記事でやること
AWS (Amazon Web Services) で EC2 (Elastic Compute Cloud) を利用して仮想環境にサーバーを立てて、簡単な Web ページをデプロイするところまでやっていきたいと思います。
AWS では 12 ヶ月間無料で利用することができるので今回はその枠をありがたく使用したいと思います〜





サーバーを停止を忘れたり、IP アドレスを固定したのにサーバーをずっと停止していたりすると課金対象になります！



そもそも AWS とは？
AWS (Amazon Web Services) とは Amazon が提供しているクラウドサービスのことです 
どんなことができるのかについては下の記事を書いた方がまとめているので気になる方は見てみてください！
(料金については変動している可能性があります。)




EC2 の構築イメージ


流れ
この動画がとてもわかりやすかったので、参考にさせていただきます。



以下の流れで進めていきます

AWS アカウントの作成
キーペアの作成 ( PC ↔️ AWSサーバー)
インスタンス (EC2 から立てられるサーバー) の作成・起動
作成した仮想サーバーに SSH でアクセスする
インスタンスの停止・終了


番外編

IP アドレスの固定化
サーバーのデーモン化


1. AWS アカウントの作成
AWSを使用するにはやはりアカウントが必要なので、AWS アカウントを持っていない方は作成してください。




2. キーペアの作成 ( PC ↔️ AWSサーバー)
次に、AWS上に立てるコンピュータにアクセスするために必要な公開鍵と秘密鍵を作成します。

左上の「サービス」＞「コンピューティング」＞ 「EC2」 ＞「キーペア」 へ進み、
右上の「キーペアを作成」を選択します。
作成するコンピュータの名前やキーペアのタイプなどの選択が終わったら「キーペアを作成」を選択します。



aws_test_key がダウンロードされるのでお使いのPCの以下の場所に aws_test_key を移動してください。
# Mac
$ /Users/<ユーザー名>/.ssh
# Windows
$ C:¥Users¥<ユーザー名>¥.ssh


3. インスタンス (EC2 から立てられるサーバー) の作成・起動
次に、サーバーを立てていきたいと思います。

インスタンス：AWS クラウド上で実行される仮想マシン

左上の「EC2 ダッシュボード」＞「インスタンスを起動」を選択します。
ここで、作成するインスタンスの名前や OS イメージ等を設定します。
Key pair (login) のところで先ほど作成したキーペアを選択します。
そして、その下のネットワーク設定のところの以下の二つを選択

インターネットからの HTTPS トラフィックを許可
インターネットからの HTTP トラフィックを許可]


今回はストレージ数などはデフォルトのままで行います。
そして最後に右下の「インスタンスを起動」を選択します。
右下の「全てのインスタンスを表示」を選択すると自分が作成したインスタンスの一覧を見ることができます。


いま作成したインスタンスは実行中となり課金し続けるため、使っていないのに放置しているということがないように注意してください



4. 作成した仮想サーバーに SSH でアクセスする


AWSの無料枠では、規模が大きいと仮想サーバーを VS Code で起動すると負荷がかかりすぎて、SSH 接続タイムアウトになりやすくなって、インスタンスを停止 -> インスタンスを開始 を行う手間が増えますので、その場合は terminal 等で操作することを強くお勧めします


インスタンス ID を選択すると詳細情報を見ることができます。
「接続」＞「SSH クライアント」へ進み、SSH で作成した仮想サーバーにアクセスしていきたいと思います。
$ ssh -i <秘密鍵のファイルパス> ユーザ名@ホスト名

ホスト名が反映されたものが例として下に用意されているので、これをコピペして、秘密鍵のパスを変更するだけで OK です。
これを実行すると AWS 上の自分が作成した仮想サーバーにアクセスすることができます。
初期状態では Python3 は入っていますが、Python は入っていません。
なので、以下を実行することで Python でも動くようになります。
$ sudo apt install python-is-python3


VS Code を使ってアクセスする
ターミナル等で ssh 接続すると作業効率がとても悪いです。
そこで VS Code の拡張機能の「Remote-SSH」をインストールして、VS Code 上でも作業できるようにしていきます。
左下の「＞＜」のようなアイコンまたは左のバーにあるスクリーンのアイコンから ssh 接続することができます。


左下の「＞＜」からの場合

アイコンを選択＞「ホストに接続する」＞「新規 SSH ホストを追加する」を選択して SSH 接続コマンドを入力

左のバーにあるスクリーンのアイコンからの場合

SSH フォルダの「＋」を選択し、SSH 接続コマンドを入力

そして、SSH 接続コマンドを入力したら以下を選択します。
自分のユーザ名/.ssh/config

そして、先ほど作ったインスタンスのホスト名が表示されているのでそのウィンドウを選択すると VS Code 上で SSH 接続することができます。

簡易的な Web ページをデプロイする
作成した仮想サーバー上で簡易的な Flask で Webページを作成していきます。
まず pip が入っていないのでインストールします。
$ sudo apt update
$ sudo apt install python3-pip

次に flask をインストールします。
$ pip install flask




この動画と同じようにお試し用のWebページを作成します。
ソースコードは こちら
そして、flaskr と同じ階層にいる状態で以下のコードを実行
$ sudo flask --app flaskr run --port 80 --host 0.0.0.0




上の画像のまるで囲ったところにアクセスしても Web ページは表示されません




AWS のインスタンス詳細画面に行き、パブリック IPv4 アドレス にアクセスする必要があります
http://<パブリック IPv4 アドレス>


この URL にアクセスすることでちゃんと表示されます！


5. インスタンスの停止・終了
最後にインスタンスの停止・終了についてです。

インスタンスの画面にある、操作したいインスタンスを選択し、

「インスタンスの状態」＞「インスタンスの停止」

を選択することで、選択したインスタンスを停止させることができます。
もうこのインスタンスは使用しないなーっていうようなインスタンスは

「インスタンスの状態」＞「インスタンスの終了」

を選択することで終了することができます。
（再び起動したい場合は「インスタンスを開始」を選択）


ホスト名や IP アドレスは起動するたびに変更されます
(ElasticIP で固定することも可能)



番外編

IP アドレスの固定化
インスタンスを停止して再度開始すると IP アドレスやホスト名が新たに割り振られるため、アクセスするのに毎回設定し直すことは面倒くさいです。そこで、ElasticIP を作成することで割り振られる IP アドレスを固定化することができます。

ElasticIP の作成



ElasticIP と EC2 インスタンスを関連付ける


これで、インスタンスを停止して再度開始しても IP アドレスが不変になります！


ElasticIP を作成して関連付けているインスタンスを起動しているときはお金は請求されない




ElasticIP を作成して関連付けているインスタンスを起動していないときは微小に課金対象になるので注意
また、無料枠の ElasticIP は 12 ヶ月間で 1 時間のみ


たしか、0.005ドル / 1h とか？間違えていたらすみません。




サーバーのデーモン化
自分は Django, gunicorn, Nginx の構成で行いました。
ファイルを設定する必要があるので以下の記事を参考にやってみてください。
その際に、仮想サーバーと Git アカウントを接続しておくと作業がさらにしやすくなります。
















デーモン化で起動
$ gunicorn project_name.wsgi:application --daemon --bind=0.0.0.0:8000

また、gunicornとnginxに関する設定ファイルの変更をした場合
$ sudo systemctl restart gunicorn
$ sudo systemctl restart nginx


おわりに
いかがでしたでしょうか？
思ったより記事を書くのが楽しくなってしまい、気分が高揚してしまいました。
アウトプットするいい機会となったので、タイミングがあれば記事を投稿したいと思います〜
最後まで見ていただき、ありがとうございました！ 

参考






 
はじめに
これは「imtakalab Advent Calendar 2023」の 23 日目の記事です。



こんにちは  そこらへんにいる私立理系大学の学部 4 年生です 

背景
自分が所属している研究室では Web アンケート作成ツールの Qualtrics が研究によく使われています。
とても便利ですよね〜使ったことはないですが。（アンチとかではない  ）
しかし、Qualtrics はとても使いやすく柔軟に表現可能ですが、自分が納得のいくようないい感じに実験ページを組めないことがあると思います。
その際には自分で実験ページの Web サイトを作成してしまえばいいのです。
たまたま研究開発でお手伝いする機会があったので備忘録がてら、記事にしたいと思います〜

この記事でやること
AWS (Amazon Web Services) で EC2 (Elastic Compute Cloud) を利用して仮想環境にサーバーを立てて、簡単な Web ページをデプロイするところまでやっていきたいと思います。
AWS では 12 ヶ月間無料で利用することができるので今回はその枠をありがたく使用したいと思います〜





サーバーを停止を忘れたり、IP アドレスを固定したのにサーバーをずっと停止していたりすると課金対象になります！



そもそも AWS とは？
AWS (Amazon Web Services) とは Amazon が提供しているクラウドサービスのことです 
どんなことができるのかについては下の記事を書いた方がまとめているので気になる方は見てみてください！
(料金については変動している可能性があります。)




EC2 の構築イメージ


流れ
この動画がとてもわかりやすかったので、参考にさせていただきます。



以下の流れで進めていきます

AWS アカウントの作成
キーペアの作成 ( PC ↔️ AWSサーバー)
インスタンス (EC2 から立てられるサーバー) の作成・起動
作成した仮想サーバーに SSH でアクセスする
インスタンスの停止・終了


番外編

IP アドレスの固定化
サーバーのデーモン化


1. AWS アカウントの作成
AWSを使用するにはやはりアカウントが必要なので、AWS アカウントを持っていない方は作成してください。




2. キーペアの作成 ( PC ↔️ AWSサーバー)
次に、AWS上に立てるコンピュータにアクセスするために必要な公開鍵と秘密鍵を作成します。

左上の「サービス」＞「コンピューティング」＞ 「EC2」 ＞「キーペア」 へ進み、
右上の「キーペアを作成」を選択します。
作成するコンピュータの名前やキーペアのタイプなどの選択が終わったら「キーペアを作成」を選択します。



aws_test_key がダウンロードされるのでお使いのPCの以下の場所に aws_test_key を移動してください。
# Mac
$ /Users/<ユーザー名>/.ssh
# Windows
$ C:¥Users¥<ユーザー名>¥.ssh


3. インスタンス (EC2 から立てられるサーバー) の作成・起動
次に、サーバーを立てていきたいと思います。

インスタンス：AWS クラウド上で実行される仮想マシン

左上の「EC2 ダッシュボード」＞「インスタンスを起動」を選択します。
ここで、作成するインスタンスの名前や OS イメージ等を設定します。
Key pair (login) のところで先ほど作成したキーペアを選択します。
そして、その下のネットワーク設定のところの以下の二つを選択

インターネットからの HTTPS トラフィックを許可
インターネットからの HTTP トラフィックを許可]


今回はストレージ数などはデフォルトのままで行います。
そして最後に右下の「インスタンスを起動」を選択します。
右下の「全てのインスタンスを表示」を選択すると自分が作成したインスタンスの一覧を見ることができます。


いま作成したインスタンスは実行中となり課金し続けるため、使っていないのに放置しているということがないように注意してください



4. 作成した仮想サーバーに SSH でアクセスする


AWSの無料枠では、規模が大きいと仮想サーバーを VS Code で起動すると負荷がかかりすぎて、SSH 接続タイムアウトになりやすくなって、インスタンスを停止 -> インスタンスを開始 を行う手間が増えますので、その場合は terminal 等で操作することを強くお勧めします


インスタンス ID を選択すると詳細情報を見ることができます。
「接続」＞「SSH クライアント」へ進み、SSH で作成した仮想サーバーにアクセスしていきたいと思います。
$ ssh -i <秘密鍵のファイルパス> ユーザ名@ホスト名

ホスト名が反映されたものが例として下に用意されているので、これをコピペして、秘密鍵のパスを変更するだけで OK です。
これを実行すると AWS 上の自分が作成した仮想サーバーにアクセスすることができます。
初期状態では Python3 は入っていますが、Python は入っていません。
なので、以下を実行することで Python でも動くようになります。
$ sudo apt install python-is-python3


VS Code を使ってアクセスする
ターミナル等で ssh 接続すると作業効率がとても悪いです。
そこで VS Code の拡張機能の「Remote-SSH」をインストールして、VS Code 上でも作業できるようにしていきます。
左下の「＞＜」のようなアイコンまたは左のバーにあるスクリーンのアイコンから ssh 接続することができます。


左下の「＞＜」からの場合

アイコンを選択＞「ホストに接続する」＞「新規 SSH ホストを追加する」を選択して SSH 接続コマンドを入力

左のバーにあるスクリーンのアイコンからの場合

SSH フォルダの「＋」を選択し、SSH 接続コマンドを入力

そして、SSH 接続コマンドを入力したら以下を選択します。
自分のユーザ名/.ssh/config

そして、先ほど作ったインスタンスのホスト名が表示されているのでそのウィンドウを選択すると VS Code 上で SSH 接続することができます。

簡易的な Web ページをデプロイする
作成した仮想サーバー上で簡易的な Flask で Webページを作成していきます。
まず pip が入っていないのでインストールします。
$ sudo apt update
$ sudo apt install python3-pip

次に flask をインストールします。
$ pip install flask




この動画と同じようにお試し用のWebページを作成します。
ソースコードは こちら
そして、flaskr と同じ階層にいる状態で以下のコードを実行
$ sudo flask --app flaskr run --port 80 --host 0.0.0.0




上の画像のまるで囲ったところにアクセスしても Web ページは表示されません




AWS のインスタンス詳細画面に行き、パブリック IPv4 アドレス にアクセスする必要があります
http://<パブリック IPv4 アドレス>


この URL にアクセスすることでちゃんと表示されます！


5. インスタンスの停止・終了
最後にインスタンスの停止・終了についてです。

インスタンスの画面にある、操作したいインスタンスを選択し、

「インスタンスの状態」＞「インスタンスの停止」

を選択することで、選択したインスタンスを停止させることができます。
もうこのインスタンスは使用しないなーっていうようなインスタンスは

「インスタンスの状態」＞「インスタンスの終了」

を選択することで終了することができます。
（再び起動したい場合は「インスタンスを開始」を選択）


ホスト名や IP アドレスは起動するたびに変更されます
(ElasticIP で固定することも可能)



番外編

IP アドレスの固定化
インスタンスを停止して再度開始すると IP アドレスやホスト名が新たに割り振られるため、アクセスするのに毎回設定し直すことは面倒くさいです。そこで、ElasticIP を作成することで割り振られる IP アドレスを固定化することができます。

ElasticIP の作成



ElasticIP と EC2 インスタンスを関連付ける


これで、インスタンスを停止して再度開始しても IP アドレスが不変になります！


ElasticIP を作成して関連付けているインスタンスを起動しているときはお金は請求されない




ElasticIP を作成して関連付けているインスタンスを起動していないときは微小に課金対象になるので注意
また、無料枠の ElasticIP は 12 ヶ月間で 1 時間のみ


たしか、0.005ドル / 1h とか？間違えていたらすみません。




サーバーのデーモン化
自分は Django, gunicorn, Nginx の構成で行いました。
ファイルを設定する必要があるので以下の記事を参考にやってみてください。
その際に、仮想サーバーと Git アカウントを接続しておくと作業がさらにしやすくなります。
















デーモン化で起動
$ gunicorn project_name.wsgi:application --daemon --bind=0.0.0.0:8000

また、gunicornとnginxに関する設定ファイルの変更をした場合
$ sudo systemctl restart gunicorn
$ sudo systemctl restart nginx


おわりに
いかがでしたでしょうか？
思ったより記事を書くのが楽しくなってしまい、気分が高揚してしまいました。
アウトプットするいい機会となったので、タイミングがあれば記事を投稿したいと思います〜
最後まで見ていただき、ありがとうございました！ 

参考






  これは「imtakalab Advent Calendar 2023」の 23 日目の記事です。 

 こんにちは  そこらへんにいる私立理系大学の学部 4 年生です   自分が所属している研究室では Web アンケート作成ツールの Qualtrics が研究によく使われています。
とても便利ですよね〜使ったことはないですが。（アンチとかではない  ） しかし、Qualtrics はとても使いやすく柔軟に表現可能ですが、自分が納得のいくようないい感じに実験ページを組めないことがあると思います。
その際には自分で実験ページの Web サイトを作成してしまえばいいのです。 たまたま研究開発でお手伝いする機会があったので備忘録がてら、記事にしたいと思います〜  AWS (Amazon Web Services) で EC2 (Elastic Compute Cloud) を利用して仮想環境にサーバーを立てて、簡単な Web ページをデプロイするところまでやっていきたいと思います。 AWS では 12 ヶ月間無料で利用することができるので今回はその枠をありがたく使用したいと思います〜 

 

サーバーを停止を忘れたり、IP アドレスを固定したのにサーバーをずっと停止していたりすると課金対象になります！

  
サーバーを停止を忘れたり、IP アドレスを固定したのにサーバーをずっと停止していたりすると課金対象になります！
 サーバーを停止を忘れたり、IP アドレスを固定したのにサーバーをずっと停止していたりすると課金対象になります！  AWS (Amazon Web Services) とは Amazon が提供しているクラウドサービスのことです 
どんなことができるのかについては下の記事を書いた方がまとめているので気になる方は見てみてください！
(料金については変動している可能性があります。) 

    この動画がとてもわかりやすかったので、参考にさせていただきます。 

 以下の流れで進めていきます   AWSを使用するにはやはりアカウントが必要なので、AWS アカウントを持っていない方は作成してください。 

  次に、AWS上に立てるコンピュータにアクセスするために必要な公開鍵と秘密鍵を作成します。 aws_test_key がダウンロードされるのでお使いのPCの以下の場所に aws_test_key を移動してください。 # Mac
$ /Users/<ユーザー名>/.ssh
# Windows
$ C:¥Users¥<ユーザー名>¥.ssh
 # Mac
$ /Users/<ユーザー名>/.ssh
# Windows
$ C:¥Users¥<ユーザー名>¥.ssh
  次に、サーバーを立てていきたいと思います。 インスタンス：AWS クラウド上で実行される仮想マシン 左上の「EC2 ダッシュボード」＞「インスタンスを起動」を選択します。
ここで、作成するインスタンスの名前や OS イメージ等を設定します。 Key pair (login) のところで先ほど作成したキーペアを選択します。
そして、その下のネットワーク設定のところの以下の二つを選択  今回はストレージ数などはデフォルトのままで行います。 そして最後に右下の「インスタンスを起動」を選択します。 右下の「全てのインスタンスを表示」を選択すると自分が作成したインスタンスの一覧を見ることができます。 

いま作成したインスタンスは実行中となり課金し続けるため、使っていないのに放置しているということがないように注意してください

  
いま作成したインスタンスは実行中となり課金し続けるため、使っていないのに放置しているということがないように注意してください
 いま作成したインスタンスは実行中となり課金し続けるため、使っていないのに放置しているということがないように注意してください  

AWSの無料枠では、規模が大きいと仮想サーバーを VS Code で起動すると負荷がかかりすぎて、SSH 接続タイムアウトになりやすくなって、インスタンスを停止 -> インスタンスを開始 を行う手間が増えますので、その場合は terminal 等で操作することを強くお勧めします

  
AWSの無料枠では、規模が大きいと仮想サーバーを VS Code で起動すると負荷がかかりすぎて、SSH 接続タイムアウトになりやすくなって、インスタンスを停止 -> インスタンスを開始 を行う手間が増えますので、その場合は terminal 等で操作することを強くお勧めします
 AWSの無料枠では、規模が大きいと仮想サーバーを VS Code で起動すると負荷がかかりすぎて、SSH 接続タイムアウトになりやすくなって、インスタンスを停止 -> インスタンスを開始 を行う手間が増えますので、その場合は terminal 等で操作することを強くお勧めします インスタンス ID を選択すると詳細情報を見ることができます。
「接続」＞「SSH クライアント」へ進み、SSH で作成した仮想サーバーにアクセスしていきたいと思います。 $ ssh -i <秘密鍵のファイルパス> ユーザ名@ホスト名
 $ ssh -i <秘密鍵のファイルパス> ユーザ名@ホスト名
 $   -i ホスト名が反映されたものが例として下に用意されているので、これをコピペして、秘密鍵のパスを変更するだけで OK です。
これを実行すると AWS 上の自分が作成した仮想サーバーにアクセスすることができます。 初期状態では Python3 は入っていますが、Python は入っていません。
なので、以下を実行することで Python でも動くようになります。 $ sudo apt install python-is-python3
 $ sudo apt install python-is-python3
 $   sudo  install   ターミナル等で ssh 接続すると作業効率がとても悪いです。
そこで VS Code の拡張機能の「Remote-SSH」をインストールして、VS Code 上でも作業できるようにしていきます。 左下の「＞＜」のようなアイコンまたは左のバーにあるスクリーンのアイコンから ssh 接続することができます。  左下の「＞＜」からの場合 アイコンを選択＞「ホストに接続する」＞「新規 SSH ホストを追加する」を選択して SSH 接続コマンドを入力 左のバーにあるスクリーンのアイコンからの場合 SSH フォルダの「＋」を選択し、SSH 接続コマンドを入力  そして、SSH 接続コマンドを入力したら以下を選択します。 自分のユーザ名/.ssh/config
 自分のユーザ名/.ssh/config
 そして、先ほど作ったインスタンスのホスト名が表示されているのでそのウィンドウを選択すると VS Code 上で SSH 接続することができます。  作成した仮想サーバー上で簡易的な Flask で Webページを作成していきます。 まず pip が入っていないのでインストールします。 $ sudo apt update
$ sudo apt install python3-pip
 $ sudo apt update
$ sudo apt install python3-pip
 $   sudo  $   sudo  install  次に flask をインストールします。 $ pip install flask
 $ pip install flask
 $   install  

 この動画と同じようにお試し用のWebページを作成します。
ソースコードは こちら そして、flaskr と同じ階層にいる状態で以下のコードを実行 $ sudo flask --app flaskr run --port 80 --host 0.0.0.0
 $ sudo flask --app flaskr run --port 80 --host 0.0.0.0
 $   sudo  --app --port --host  

上の画像のまるで囲ったところにアクセスしても Web ページは表示されません

  
上の画像のまるで囲ったところにアクセスしても Web ページは表示されません
 上の画像のまるで囲ったところにアクセスしても Web ページは表示されません 

AWS のインスタンス詳細画面に行き、パブリック IPv4 アドレス にアクセスする必要があります
http://<パブリック IPv4 アドレス>

  
AWS のインスタンス詳細画面に行き、パブリック IPv4 アドレス にアクセスする必要があります
http://<パブリック IPv4 アドレス>
 AWS のインスタンス詳細画面に行き、パブリック IPv4 アドレス にアクセスする必要があります
http://<パブリック IPv4 アドレス> この URL にアクセスすることでちゃんと表示されます！   最後にインスタンスの停止・終了についてです。  インスタンスの画面にある、操作したいインスタンスを選択し、 「インスタンスの状態」＞「インスタンスの停止」 を選択することで、選択したインスタンスを停止させることができます。
もうこのインスタンスは使用しないなーっていうようなインスタンスは 「インスタンスの状態」＞「インスタンスの終了」 を選択することで終了することができます。
（再び起動したい場合は「インスタンスを開始」を選択） 

ホスト名や IP アドレスは起動するたびに変更されます
(ElasticIP で固定することも可能)

  
ホスト名や IP アドレスは起動するたびに変更されます
(ElasticIP で固定することも可能)
 ホスト名や IP アドレスは起動するたびに変更されます
(ElasticIP で固定することも可能)   インスタンスを停止して再度開始すると IP アドレスやホスト名が新たに割り振られるため、アクセスするのに毎回設定し直すことは面倒くさいです。そこで、ElasticIP を作成することで割り振られる IP アドレスを固定化することができます。   これで、インスタンスを停止して再度開始しても IP アドレスが不変になります！ 

ElasticIP を作成して関連付けているインスタンスを起動しているときはお金は請求されない

  
ElasticIP を作成して関連付けているインスタンスを起動しているときはお金は請求されない
 ElasticIP を作成して関連付けているインスタンスを起動しているときはお金は請求されない 

ElasticIP を作成して関連付けているインスタンスを起動していないときは微小に課金対象になるので注意
また、無料枠の ElasticIP は 12 ヶ月間で 1 時間のみ

  
ElasticIP を作成して関連付けているインスタンスを起動していないときは微小に課金対象になるので注意
また、無料枠の ElasticIP は 12 ヶ月間で 1 時間のみ
 ElasticIP を作成して関連付けているインスタンスを起動していないときは微小に課金対象になるので注意
また、無料枠の ElasticIP は 12 ヶ月間で 1 時間のみ たしか、0.005ドル / 1h とか？間違えていたらすみません。 

  自分は Django, gunicorn, Nginx の構成で行いました。
ファイルを設定する必要があるので以下の記事を参考にやってみてください。
その際に、仮想サーバーと Git アカウントを接続しておくと作業がさらにしやすくなります。 

 

 

 

 

  $ gunicorn project_name.wsgi:application --daemon --bind=0.0.0.0:8000
 $ gunicorn project_name.wsgi:application --daemon --bind=0.0.0.0:8000
 $   --daemon --bind = また、gunicornとnginxに関する設定ファイルの変更をした場合 $ sudo systemctl restart gunicorn
$ sudo systemctl restart nginx
 $ sudo systemctl restart gunicorn
$ sudo systemctl restart nginx
 $   sudo  $   sudo   いかがでしたでしょうか？ 思ったより記事を書くのが楽しくなってしまい、気分が高揚してしまいました。
アウトプットするいい機会となったので、タイミングがあれば記事を投稿したいと思います〜
最後まで見ていただき、ありがとうございました！   

 

 2Go to list of users who liked2comment0Go to list of comments 2Go to list of users who liked2comment0Go to list of comments 2Go to list of users who liked  2Go to list of users who liked 2Go to list of users who liked Go to list of users who liked 2 2 comment0Go to list of comments comment Go to list of comments  Register as a new user and use Qiita more convenientlyYou get articles that match your needsYou can efficiently read back useful informationYou can use dark themeWhat you can do with signing upSign upLogin Register as a new user and use Qiita more conveniently Sign upLogin

URL: https://qiita.com/stori/items/872f7acec9787a710dca
@storiin株式会社Nuco【初学者必見】これだけ分かればAWSを使える！ 10 の重要概念・サービスを徹底解説（おまけ 14選）AWS初心者Last updated at 2024-11-28Posted at 2024-10-28 @storiin株式会社Nuco @storiin株式会社Nuco  in株式会社Nuco in 株式会社Nuco Last updated at 2024-11-28Posted at 2024-10-28 Last updated at 2024-11-28 Posted at 2024-10-28 
はじめに
AWSはAmazonが提供している便利なクラウドサービスとして有名ですが、初めて使おうと思うと何やら知らない言葉が沢山出てきて圧倒されてしまう人もいるのではないでしょうか？
そのような方々のために、この記事ではAWSを使うにあたって最低限知っておきたい10の重要概念・サービスをピックアップして解説します！
紹介するのは以下の概念・サービスです。

マネジメントコンソール
リージョン
アベイラビリティゾーン
EC2
S3
VPC
RDS
Lambda
IAM
CloudWatch

ここで紹介する重要概念・サービスを理解すればAWSを使っていくための土台が出来上がります。ぜひこの機会にAWSの根幹をなす概念・サービスを抑えてみましょう！
このくらいは当然知っていると思われた方向けに、おまけとしてその他のよく使うサービスの紹介も行います。おまけで紹介しているサービスもよく使われるものばかりなので知らないものがあれば、この機会に触れてみてはいかがでしょうか？


弊社Nucoでは、他にも様々なお役立ち記事を公開しています。よろしければOrganizationのページも覗いてみてください。
また、Nucoでは一緒に働く仲間も募集しています！興味をお持ちいただいた方は、ぜひこちらまでご連絡ください。



そもそもAWSとは何か?
AWS（Amazon Web Services）は一言で説明すると、
システム運用に必要な様々な機能を提供しているクラウドサービス
です。

クラウドサービスとは？
クラウドサービスとはインターネット経由で提供されるサービスの総称です。
AWSのようなクラウドサービスは世界中にデータセンターを保有しており、これらの計算資源を適切に管理することでサービスを提供しています。これにより、サービス利用者は 自身で物理サーバなどを管理することなく計算資源にアクセスする ことが出来るようになります。
クラウドサービスには SaaS、PaaS、IaaSの分類がありますが、AWSは使う計算資源を細かく管理できる IaaS（Infrastructure as a Service）に該当します。AWSは IaaSの世界シェア1位 の最も知名度の高いクラウドサービスの一つとなっています。

具体的にはどのようなサービスがあるか？
AWSが提供しているサービスの中には

Webサーバ
IPアドレス
ドメイン
データベース
ストレージ

などのウェブアプリに必須のものだけなく、

ファイアウォールの設定
サービスのログ解析
機械学習モデルの構築
プログラムのビルドやデプロイ

を行うサービスまで用意されており、2024年10月現在では328種類ものサービスが提供されています。

10の重要概念・サービスの紹介
AWSの基本的な理解が出来たところで本題に入ります。
実際に手を動かすことが出来る方は、時間のある時にでも自分で手を動かしてみてください。自分の手で操作することで学習効果を更に高めることが出来るでしょう。

その１ AWS マネジメントコンソール
一言で言うと、マネジメントコンソールはAWSの操作画面のこと です。ここではアカウントで利用しているサービスの利用状況や設定・料金などをまとめて管理できます。
リソース（計算資源）をIaCでコード管理する場合を除けば、ほとんどのインフラ構築の作業はマネジメントコンソールで完結します。規模の大きいプロジェクトではリソースが非常に多くなり、ヒューマンエラーが増えるのでIaCでリソース管理することが推奨されます。



補足：IaCとは
Infrastructure as Codeの略で、インフラ構築の際の設定項目をコードとして管理することで開発環境から本番環境への移行時に設定ミスを減らすことなどが目的。


使い方
[このリンク](https://console.aws.amazon.com) にアクセスすると以下のようなサインイン画面が表示されます。

AWSアカウントを持っている場合はここからログインすることが出来ます。AWSアカウントを持っていない場合は 新しいAWSアカウントを作成 から作成することが出来ます。
無料枠もあるのでまだ持っていない方は一度自分でアカウントを作ってみることをおすすめします！
初めてログインすると以下のような画面が表示されます。この画面からAWSのサービスを選択して使用する方法はこれ以降の章で説明していきます。



その２と３ リージョンとアベイラビリティゾーン
AWSの仕組みを理解するための鍵となる考えにリージョンとアベイラビリティゾーンがあります。
本記事の初めで、AWSは世界中にデータセンターを保有していてそれらの計算資源を管理してユーザに提供している、という話をしました。これについて、より詳細に解説します。
リージョンとは、AWSが契約しているデータセンターが集中的に存在している地域のこと です。2024年10月現在では、世界で34の地域でAWSが提供されています。それぞれのリージョンの中には概ね3つのアベイラビリティゾーンが含まれます。
アベイラビリティゾーンとは、1つ以上のデータセンターを有するそれぞれが独立したデータセンター群のこと です。複数のデータセンター群を使うことで自然災害などの障害に強いクラウドサービスを作ることが出来ます。
これらの情報を視覚化すると以下の図のように表すことができます。
注：AZはアベイラビリティゾーン、DCはデータセンターの略




補足：データセンターとは
サーバやネットワーク機器などの装置を設置・運用することに特化した建物のこと。大量のコンピュータがラックに収納されている。



その４ Amazon EC2
EC2 は Elastic Compute Cloud の略で、その名の通り柔軟に計算資源を管理することが出来るサービス となっています。
自分で使いたい計算資源のインスタンスタイプを選択することでコストを最適化することが出来るほか、一時的なイベントのためにサイトを用意する場合にもインスタンスサイズを大きく設定することで簡単に計算資源を調達することが出来ます。
インスタンスタイプによって、CPU・メモリ・ストレージ・ネットワーク帯域幅のどれに特化しているかが変わるので用途に応じて適切なタイプを選択することが出来ます。メモリを最適化したい場合やGPUを用いた高速な計算をしたい場合などで選ぶべきインスタンスタイプは異なります。
インスタンスの性能とサイズに応じて料金は高くなりますが、見積りが難しい場合にも簡単に作って壊すことが出来る点は便利な点の一つです。
また、インスタンスの作成時にはマシンイメージを指定することでOSやアプリケーションソフトウェアを導入した状態で仮想マシンを使うことが出来ます。



補足：インスタンスとは
AWS上で稼働している仮想サーバのこと。
ユーザ視点では一つの物理サーバのように扱うことが出来る。


使い方

1. EC2 インスタンスの起動
まずマネジメントコンソールでサービス一覧または検索バーからEC2のダッシュボードを開きます。

この画面で「インスタンスを起動」をクリックします。すると以下のような画面に遷移し、インスタンスの設定を行うことが出来ます。

名前は"TestApplicationServer"とし、マシンイメージで用いるOSはデフォルトのままAmazon Linuxを使用します。さらにインスタンスタイプもt2.micro、VPCもデフォルトの設定でストレージも最小の8GBとします。
キーペアには新しく作成したキーペアを用います。また、セキュリティグループの設定はあとでSSH接続が出来るように自分のIPからのSSHを許可するようにします。

ここまでの設定が済むとEC2を作成することが出来ます。「インスタンスを起動」をクリックし、正常に起動すると以下のような画面が表示されます。


2. EC2 インスタンスへの接続
次のステップと書かれている下の「インスタンスに接続する」をクリックします。

ここではSSH接続によってアクセスを試みます。上の画像に示されているコマンドを参考にしてターミナルで以下のコマンドを入力することでインスタンスへの接続を行うことが出来ました。
> ssh -i {作成したキーペアのファイルのパス} ec2-user@{パブリック IPv4 DNS}




その５ Amazon S3
S3 は Simple Storage Service の略で、様々な用途に応じてデータを保管することが出来るサービスになっています。
機械学習などのために用いる大規模データを保存したり、ログを長期間使用しないまま保管しておいたり、すぐに使いたいデータを一時的に保存しておくといった場合でもそれぞれの用途でコスト効率の高い選択肢が用意されています。S3のコストは保存容量＋転送量で決定されるのでそれらのコストのバランスが適したストレージクラスを選ぶことが大切です。
例）長期間の保存用 →｛保存容量コスト：低，転送量コスト：高｝
S3ではバケットと呼ばれる格納場所に任意の形式のファイル（オブジェクトとも呼ばれます）を保存することが出来ます。バケットは後からスケールアップ・ダウンが可能です。
S3にはオブジェクトを静的Webサイトとして公開したり、直感的なUIでクエリ操作を行えたり、アクセス権限を細かく設定することが出来るといった便利な機能がいくつも備わっています。
使い方
#### 1. S3バケットの作成
EC2の時と同様にS3の画面に移動し、「バケットを作成」をクリックします。以下の画面に辿り着いたら設定項目を入力していきます。

バケットタイプは汎用、バケット名は"testappbucket-1"とし、ACL無効、パブリックアクセスはブロック、バージョニングは有効、暗号化はS3のマネージドキーで行うように設定をしてバケットを作成しました。


2. オブジェクトのアップロード
次にバケットの名前をクリックして以下の画面に移動します。

「アップロード」を押して以下の画面で「ファイルを追加」をクリックすることでローカルからファイルをアップロードすることが出来ます。

以下のような画面になればファイルをアップロード出来ていることになります。ここでアップロードしたファイルはローカルへのダウンロードや静的Webサイトとしてインターネット上に公開することが出来ます。



その６ Amazon VPC
VPCはAWSが提供する仮想ネットワークサービスであり、Virtual Private Cloudの略です。EC2のインスタンスなどをインターネットに接続するためのネットワークの設定を担っています 。一つのVPCの中には複数のサブネットを配置することが出来ます。
インターネットに接続するためにはインターネットゲートウェイとルーティングの設定を行う必要があります。セキュリティ対策も当然可能で、インスタンスに対するファイアウォールとして セキュリティグループ を設定し、サブネットに対する ネットワークACL を設定することが出来ます。



ファイアウォールとは
内部のネットワークに外部からアクセスする通信を許可・ブロックする仕組み。

ACLとは
Access Control Listの略。特定のデバイスに対するアクセスを制御する仕組み。


使い方
初めにVPCのダッシュボードに移動し、「VPCを作成」をクリックします。

以下の画面に移動したらVPCの設定を行います。「VPCなど」を選択するとデフォルトで2つのAZにプライベート・パブリックの2つのサブネットを配置するような構成になっています。この画面からネットワーク構成を選択するだけでDNSホスト名の有効化・DNS解決の有効化・インターネットゲートウェイの作成と配置・ルートテーブルの作成までを1クリックで行ってくれます。

先程EC2を起動した際にはデフォルトVPCを利用しましたが、今回のような手順で作成したVPCをEC2の配置場所として指定することも出来るようになります。


その７ Amazon RDS
RDSは代表的なリレーショナルデータベースのサービスである MySQL、MariaDB、PostgreSQL、Oracle Database、SQL Server、Db2、Amazon Auroraの7種類のサービスをクラウド上で利用できるサービスです。
RDSで作成できるデータベースインスタンスはEC2などのように用途に応じたインスタンスクラスとサイズを設定することが出来ます。RDSはマネージドサービスであるため、データベースサービスのアップデートは自動で行われます。
一般的なインフラ構成の例として、EC2にソフトウェアを配置してデータベースをRDSに構築してこれらを連携させるというものが考えられます。RDSの特徴としては、自動バックアップ機能と負荷分散機能による応答の高速化があります。
使い方
RDSはEC2インスタンスと同様にVPCのサブネットに配置することができます。これで適切なソフトウェアを走らせるEC2インスタンスからアクセスできるようになります。
以下はAWSの公式に想定されている一般的な構成の例です。

以下では、このような構成でインフラ構築を行う方法を解説します。

1. DBサブネットグループを作成する
前項で作成したVPCのサブネットにはインターネットからのリクエストを処理するためのパブリックサブネットとVPC内部からのリクエストを処理するプライベートサブネットが存在しています。
パブリックサブネットの設定はEC2の項で扱ったように自分のIPからSSH接続を許可するようにします。ここではプライベートサブネットの設定も行います。
VPCのダッシュボードからセキュリティグループに移動し、「セキュリティグループを作成」をクリックします。

セキュリティグループの名前を "test-private-sg" として、作成済みのVPCを選択します。

インバウンドルールを編集し、タイプに "MySQL/Aurora" を選択することでEC2インスタンスから MySQL のトラフィックを許可する設定に出来ます。
次にDBインスタンス用のサブネットグループを作成し、VPC内にRDSを配置します。まずRDSのダッシュボードを開き、サイドバーから「サブネットグループ」を選択します。

この画面から「DBサブネットグループを作成」をクリックし、以下の画面でサブネットグループの設定を行います。

名前と説明を適切に設定して、VPCの項で作成したものを選択します。更に「サブネットを追加」の項ではプライベートに設定してあるサブネットの識別子を選択します。設定が完了したら作成を行い、以下のような画面に遷移したらOKです。


2. DBインスタンスを作成する
RDSのサイドバーから「データベース」を選択し、下の画面で「データベースの作成」をクリックします。

データベースの作成では、「接続」の項で予め作成したEC2インスタンスとの接続を行い、予め作成したDBサブネットグループとVPCのセキュリティグループを設定することでEC2インスタンスとの接続が可能になります。
ここまでで初めに述べたインフラの構成が完成したことになります。ここでは解説はしませんが、この状態からEC2インスタンスにウェブサーバをインストールすることでDBインスタンスと接続することが出来ます。


その８ AWS Lambda
LambdaはAWSのサービスの中でも非常に便利なサービスの一つです。Lambdaを使うことでサーバを全く意識せずに計算資源を用いてコードを実行することが可能になります。
Lambdaの実行は予め設定したトリガーとなるイベントの発生によって自動で行われます。リクエストに応じてスケーリングは自動で行われるのでサーバの負荷などを注意深く監視しておく必要もありません。
Lambdaのようなコードを配置するだけで自動で実行してくれるサービスをFunction as a Service（FaaS）と呼ぶこともあります。管理に手間がかからないだけでなく、Lambdaは従量課金制なので使われていない間はコストもかかりません。
使い方
初めにLambdaのダッシュボードにアクセスし、「関数の作成」をクリックします。

「一から作成」を選択して関数の作成を行うと以下の画面に遷移します。

デフォルトでは以下のようなコードがLambda関数に設定されています。ここではこの関数を実行してその結果を見ます。

テストタブで空のイベントJSONを用いてテストを実行すると以下のように実行結果が返ってきます。

このLambda関数にはもちろんライブラリなどを用いることも可能になっており、様々な場面で柔軟にアプリの機能を実現させることが出来ます。


その９ AWS IAM
AWSのサービスを使う中で重要になってくる概念がこのIAMです。IAMはIdentity and Access Management の略です。
IAMはユーザやアプリケーションがどのAWSリソースにアクセスすることが出来るかを管理します。
より具体的には、リソースへのアクセスを求めるIAMユーザ・フェデレーションユーザ・IAMロール・アプリケーション（公式ドキュメントではこれらを総称してプリンシパルと呼んでいます）が各リソースへのアクセスを許可されているか確認する役割を果たしているのがIAMです。
IAMユーザとは、ルートユーザ以外のAWSアカウントに対して付与することが出来る権限で、ルートユーザやIAM管理者によって作成されます。
フェデレーションユーザとはSSOによってAWSリソースにアクセスするユーザのことです。AWSはSAML2.0の認証に対応しているので同じくSAMLに対応しているGoogle WorkspaceやSlackなどのユーザであればIAMロールを付与することが出来ます。
IAMロールとは、IAMユーザやIAMユーザグループで管理されていないプリンシパルに対して付与する権限のことを指します。
アクセス権限のデフォルトでは、ルートユーザに全てのリソースへのアクセスを許可し、それ以外のユーザには全てのリソースへのアクセスを拒否しています。最小権限の原則に基づき、必要なだけの権限を付与することが推奨されています。
アクセスの許可を付与する方法は以下の3通りです。

AWS外のユーザやアプリケーションに対してIAMロールを付与する
IAMユーザグループに対してアクセス許可を付与する
IAMユーザに対してアクセスを許可する

なお、上記のIAMロール・IAMユーザグループ・IAMユーザの権限はIAMポリシーを紐づけることで管理することが出来ます。ポリシーにはユーザに対してリソースへのアクセス権限を定義するIDベースのポリシーとリソースに対して信頼するユーザの条件を定義するリソースベースのポリシーの2種類があります。このうち、よく使われるのは直感的にも分かりやすいIDベースのポリシーです。
これらの概念を整理するために以下の図を参考にしてみてください。


その１０ Amazon CloudWatch
CloudWatchはAWSリソースの監視、異常検知と通知、最適なリソース使用の促進をするためのサービスです。
AWSでは利用する仮想的な計算資源のスペックを指定することで物理サーバと同等の可用性を確保することが出来ますが、このリソースのメモリ使用率などをモニタリングして適切なスペックを決めるために用いるのがこのCloudWatchです。
CloudWatchはマネジメントコンソール上でリアルタイムのログを表示するインタフェースであると同時にそのログから監視したいデータを自動的に数値化してくれます。更にこれらの数値変動に対してアラームを発生させるように設定することも出来ます。このアラーム機能を用いることで、他のAWSサービスと統合した際に多くの機能を実現することが出来るようになります。
使い方
CloudWatchの機能の一つであるログ機能をAWS Lambdaの例で確認します。
以下のLambdaの実行画面から「ログ」と記されている箇所をクリックします。

遷移先の画面で下にスクロールし、該当する時刻のログストリームをクリックします。

ログストリームではLambda関数の実行開始時間や終了時間、エラーがある場合はそのメッセージなども確認することが出来ます。



【おまけ】その他のサービス
おまけとして、よく使われているサービス14選を簡単に紹介します。上の10個では物足りなかったという方はこちらもチェックしてみてください。

操作ツール

1. AWS CLI
CLIはAWS特有の呼称というわけではなく、Command Line Interfaceの略です。
画面をクリックして操作する代わりに全ての操作をキーボードの操作によるコマンド入力で行うことができる操作画面のことをCLIと呼びます。逆に、画面をクリックして操作するマネジメントコンソールのような操作画面は GUI(Graphical User Interface) と呼びます。
先程インフラ構築の作業はほとんどマネジメントコンソールで完結すると言いましたが、AWS CLIを使うことでも同じ操作を実行できます。

コンピューティング

2. ECS
ECS（Elastic Container Service）は、アプリケーションをコンテナで実行するためのサービスです。コンテナとは、アプリを小さな単位でまとめて動かす技術で、ECSを使うとその管理をクラウド上で簡単に行うことが出来ます。
EC2やFargateのインスタンスから実行をすることが出来ます。

3. Fargate
Fargateは、サーバの管理が不要な場合に用いられるコンテナサービスです。アプリをコンテナで実行するときに必要なインフラを自動で管理してくれます。

データベース

4. DynamoDB
RDB（Relational Database）とは異なる、NoSQLと呼ばれるデータベースの一種で、素早くデータの読み書きができます。オンラインゲームやチャットアプリなど、多くのユーザーが同時にアクセスする場面で活躍します。

5. ElastiCache
ElastiCacheは、データを一時的に保存するキャッシュ用のサービスです。頻繁に使うデータをキャッシュに置くことで、アプリの動作を速くできます。

ネットワーク

6. CloudFront
CloudFrontは、CDN（コンテンツ配信ネットワーク）と呼ばれる仕組みで、画像や動画などのファイルを速く届けるサービスです。世界中の拠点からユーザーに近い場所から配信してくれます。

7. ELB
ELB（Elastic Load Balancer）は、アプリへのアクセスを複数のサーバーに振り分けてくれるサービスです。アクセスが集中したときも、サーバーへの負荷を分散して安定動作を保ちます。

8. Route 53
Route 53は、DNS（ドメイン名システム）のサービスで、ドメインの管理やルーティングを行います。ドメイン名にアクセスしたとき、どのサーバーに接続するかを決める役割を持っています。

セキュリティ

9. Cognito
Cognitoは、アプリにログイン機能を簡単に追加できるサービスです。ユーザーのIDを安全に管理し、GoogleやFacebookなどのアカウントでのログインもサポートします。

10. WAF
WAF（Web Application Firewall）は、ウェブサイトを攻撃から守るための防御システムです。不正なアクセスを防ぎ、アプリを安全に保ちます。

アプリ統合

11. SNS
SNS（Simple Notification Service）は、通知を送るためのサービスです。メールやSMSでユーザーにお知らせを送ったり、他のシステムと連携することができます。

12. SQS
SQS（Simple Queue Service）は、データを順番に並べて待たせるためのサービスです。複数のシステム間でデータをやり取りするときに便利で、処理が遅れてもデータを失わないようになっています。

機械学習

13. SageMaker
SageMakerは、AIモデルを作ったり学習させたりできるサービスです。AIを使ったアプリを簡単に開発し、実際に動かすための環境を提供してくれます。

14. Bedrock
Bedrockは、文章を生成するAIモデルなど、さまざまなAI技術を使いやすくするサービスです。複雑な設定なしで、大規模なAIモデルをアプリに組み込むことができます。


AWSにはここで紹介しきれないほど豊富なサービスが存在しています。使いたいサービスがある場合は公式サイトのドキュメントを参考にしてみましょう。



終わりに
いかがだったでしょうか？この記事ではAWSを使えるようになるための10の重要概念・サービスを解説しました。この記事で紹介した概念をしっかりと理解して実践に繋げてみてください！


弊社Nucoでは、他にも様々なお役立ち記事を公開しています。よろしければOrganizationのページも覗いてみてください。
また、Nucoでは一緒に働く仲間も募集しています！興味をお持ちいただいた方は、ぜひこちらまでご連絡ください。


 
はじめに
AWSはAmazonが提供している便利なクラウドサービスとして有名ですが、初めて使おうと思うと何やら知らない言葉が沢山出てきて圧倒されてしまう人もいるのではないでしょうか？
そのような方々のために、この記事ではAWSを使うにあたって最低限知っておきたい10の重要概念・サービスをピックアップして解説します！
紹介するのは以下の概念・サービスです。

マネジメントコンソール
リージョン
アベイラビリティゾーン
EC2
S3
VPC
RDS
Lambda
IAM
CloudWatch

ここで紹介する重要概念・サービスを理解すればAWSを使っていくための土台が出来上がります。ぜひこの機会にAWSの根幹をなす概念・サービスを抑えてみましょう！
このくらいは当然知っていると思われた方向けに、おまけとしてその他のよく使うサービスの紹介も行います。おまけで紹介しているサービスもよく使われるものばかりなので知らないものがあれば、この機会に触れてみてはいかがでしょうか？


弊社Nucoでは、他にも様々なお役立ち記事を公開しています。よろしければOrganizationのページも覗いてみてください。
また、Nucoでは一緒に働く仲間も募集しています！興味をお持ちいただいた方は、ぜひこちらまでご連絡ください。



そもそもAWSとは何か?
AWS（Amazon Web Services）は一言で説明すると、
システム運用に必要な様々な機能を提供しているクラウドサービス
です。

クラウドサービスとは？
クラウドサービスとはインターネット経由で提供されるサービスの総称です。
AWSのようなクラウドサービスは世界中にデータセンターを保有しており、これらの計算資源を適切に管理することでサービスを提供しています。これにより、サービス利用者は 自身で物理サーバなどを管理することなく計算資源にアクセスする ことが出来るようになります。
クラウドサービスには SaaS、PaaS、IaaSの分類がありますが、AWSは使う計算資源を細かく管理できる IaaS（Infrastructure as a Service）に該当します。AWSは IaaSの世界シェア1位 の最も知名度の高いクラウドサービスの一つとなっています。

具体的にはどのようなサービスがあるか？
AWSが提供しているサービスの中には

Webサーバ
IPアドレス
ドメイン
データベース
ストレージ

などのウェブアプリに必須のものだけなく、

ファイアウォールの設定
サービスのログ解析
機械学習モデルの構築
プログラムのビルドやデプロイ

を行うサービスまで用意されており、2024年10月現在では328種類ものサービスが提供されています。

10の重要概念・サービスの紹介
AWSの基本的な理解が出来たところで本題に入ります。
実際に手を動かすことが出来る方は、時間のある時にでも自分で手を動かしてみてください。自分の手で操作することで学習効果を更に高めることが出来るでしょう。

その１ AWS マネジメントコンソール
一言で言うと、マネジメントコンソールはAWSの操作画面のこと です。ここではアカウントで利用しているサービスの利用状況や設定・料金などをまとめて管理できます。
リソース（計算資源）をIaCでコード管理する場合を除けば、ほとんどのインフラ構築の作業はマネジメントコンソールで完結します。規模の大きいプロジェクトではリソースが非常に多くなり、ヒューマンエラーが増えるのでIaCでリソース管理することが推奨されます。



補足：IaCとは
Infrastructure as Codeの略で、インフラ構築の際の設定項目をコードとして管理することで開発環境から本番環境への移行時に設定ミスを減らすことなどが目的。


使い方
[このリンク](https://console.aws.amazon.com) にアクセスすると以下のようなサインイン画面が表示されます。

AWSアカウントを持っている場合はここからログインすることが出来ます。AWSアカウントを持っていない場合は 新しいAWSアカウントを作成 から作成することが出来ます。
無料枠もあるのでまだ持っていない方は一度自分でアカウントを作ってみることをおすすめします！
初めてログインすると以下のような画面が表示されます。この画面からAWSのサービスを選択して使用する方法はこれ以降の章で説明していきます。



その２と３ リージョンとアベイラビリティゾーン
AWSの仕組みを理解するための鍵となる考えにリージョンとアベイラビリティゾーンがあります。
本記事の初めで、AWSは世界中にデータセンターを保有していてそれらの計算資源を管理してユーザに提供している、という話をしました。これについて、より詳細に解説します。
リージョンとは、AWSが契約しているデータセンターが集中的に存在している地域のこと です。2024年10月現在では、世界で34の地域でAWSが提供されています。それぞれのリージョンの中には概ね3つのアベイラビリティゾーンが含まれます。
アベイラビリティゾーンとは、1つ以上のデータセンターを有するそれぞれが独立したデータセンター群のこと です。複数のデータセンター群を使うことで自然災害などの障害に強いクラウドサービスを作ることが出来ます。
これらの情報を視覚化すると以下の図のように表すことができます。
注：AZはアベイラビリティゾーン、DCはデータセンターの略




補足：データセンターとは
サーバやネットワーク機器などの装置を設置・運用することに特化した建物のこと。大量のコンピュータがラックに収納されている。



その４ Amazon EC2
EC2 は Elastic Compute Cloud の略で、その名の通り柔軟に計算資源を管理することが出来るサービス となっています。
自分で使いたい計算資源のインスタンスタイプを選択することでコストを最適化することが出来るほか、一時的なイベントのためにサイトを用意する場合にもインスタンスサイズを大きく設定することで簡単に計算資源を調達することが出来ます。
インスタンスタイプによって、CPU・メモリ・ストレージ・ネットワーク帯域幅のどれに特化しているかが変わるので用途に応じて適切なタイプを選択することが出来ます。メモリを最適化したい場合やGPUを用いた高速な計算をしたい場合などで選ぶべきインスタンスタイプは異なります。
インスタンスの性能とサイズに応じて料金は高くなりますが、見積りが難しい場合にも簡単に作って壊すことが出来る点は便利な点の一つです。
また、インスタンスの作成時にはマシンイメージを指定することでOSやアプリケーションソフトウェアを導入した状態で仮想マシンを使うことが出来ます。



補足：インスタンスとは
AWS上で稼働している仮想サーバのこと。
ユーザ視点では一つの物理サーバのように扱うことが出来る。


使い方

1. EC2 インスタンスの起動
まずマネジメントコンソールでサービス一覧または検索バーからEC2のダッシュボードを開きます。

この画面で「インスタンスを起動」をクリックします。すると以下のような画面に遷移し、インスタンスの設定を行うことが出来ます。

名前は"TestApplicationServer"とし、マシンイメージで用いるOSはデフォルトのままAmazon Linuxを使用します。さらにインスタンスタイプもt2.micro、VPCもデフォルトの設定でストレージも最小の8GBとします。
キーペアには新しく作成したキーペアを用います。また、セキュリティグループの設定はあとでSSH接続が出来るように自分のIPからのSSHを許可するようにします。

ここまでの設定が済むとEC2を作成することが出来ます。「インスタンスを起動」をクリックし、正常に起動すると以下のような画面が表示されます。


2. EC2 インスタンスへの接続
次のステップと書かれている下の「インスタンスに接続する」をクリックします。

ここではSSH接続によってアクセスを試みます。上の画像に示されているコマンドを参考にしてターミナルで以下のコマンドを入力することでインスタンスへの接続を行うことが出来ました。
> ssh -i {作成したキーペアのファイルのパス} ec2-user@{パブリック IPv4 DNS}




その５ Amazon S3
S3 は Simple Storage Service の略で、様々な用途に応じてデータを保管することが出来るサービスになっています。
機械学習などのために用いる大規模データを保存したり、ログを長期間使用しないまま保管しておいたり、すぐに使いたいデータを一時的に保存しておくといった場合でもそれぞれの用途でコスト効率の高い選択肢が用意されています。S3のコストは保存容量＋転送量で決定されるのでそれらのコストのバランスが適したストレージクラスを選ぶことが大切です。
例）長期間の保存用 →｛保存容量コスト：低，転送量コスト：高｝
S3ではバケットと呼ばれる格納場所に任意の形式のファイル（オブジェクトとも呼ばれます）を保存することが出来ます。バケットは後からスケールアップ・ダウンが可能です。
S3にはオブジェクトを静的Webサイトとして公開したり、直感的なUIでクエリ操作を行えたり、アクセス権限を細かく設定することが出来るといった便利な機能がいくつも備わっています。
使い方
#### 1. S3バケットの作成
EC2の時と同様にS3の画面に移動し、「バケットを作成」をクリックします。以下の画面に辿り着いたら設定項目を入力していきます。

バケットタイプは汎用、バケット名は"testappbucket-1"とし、ACL無効、パブリックアクセスはブロック、バージョニングは有効、暗号化はS3のマネージドキーで行うように設定をしてバケットを作成しました。


2. オブジェクトのアップロード
次にバケットの名前をクリックして以下の画面に移動します。

「アップロード」を押して以下の画面で「ファイルを追加」をクリックすることでローカルからファイルをアップロードすることが出来ます。

以下のような画面になればファイルをアップロード出来ていることになります。ここでアップロードしたファイルはローカルへのダウンロードや静的Webサイトとしてインターネット上に公開することが出来ます。



その６ Amazon VPC
VPCはAWSが提供する仮想ネットワークサービスであり、Virtual Private Cloudの略です。EC2のインスタンスなどをインターネットに接続するためのネットワークの設定を担っています 。一つのVPCの中には複数のサブネットを配置することが出来ます。
インターネットに接続するためにはインターネットゲートウェイとルーティングの設定を行う必要があります。セキュリティ対策も当然可能で、インスタンスに対するファイアウォールとして セキュリティグループ を設定し、サブネットに対する ネットワークACL を設定することが出来ます。



ファイアウォールとは
内部のネットワークに外部からアクセスする通信を許可・ブロックする仕組み。

ACLとは
Access Control Listの略。特定のデバイスに対するアクセスを制御する仕組み。


使い方
初めにVPCのダッシュボードに移動し、「VPCを作成」をクリックします。

以下の画面に移動したらVPCの設定を行います。「VPCなど」を選択するとデフォルトで2つのAZにプライベート・パブリックの2つのサブネットを配置するような構成になっています。この画面からネットワーク構成を選択するだけでDNSホスト名の有効化・DNS解決の有効化・インターネットゲートウェイの作成と配置・ルートテーブルの作成までを1クリックで行ってくれます。

先程EC2を起動した際にはデフォルトVPCを利用しましたが、今回のような手順で作成したVPCをEC2の配置場所として指定することも出来るようになります。


その７ Amazon RDS
RDSは代表的なリレーショナルデータベースのサービスである MySQL、MariaDB、PostgreSQL、Oracle Database、SQL Server、Db2、Amazon Auroraの7種類のサービスをクラウド上で利用できるサービスです。
RDSで作成できるデータベースインスタンスはEC2などのように用途に応じたインスタンスクラスとサイズを設定することが出来ます。RDSはマネージドサービスであるため、データベースサービスのアップデートは自動で行われます。
一般的なインフラ構成の例として、EC2にソフトウェアを配置してデータベースをRDSに構築してこれらを連携させるというものが考えられます。RDSの特徴としては、自動バックアップ機能と負荷分散機能による応答の高速化があります。
使い方
RDSはEC2インスタンスと同様にVPCのサブネットに配置することができます。これで適切なソフトウェアを走らせるEC2インスタンスからアクセスできるようになります。
以下はAWSの公式に想定されている一般的な構成の例です。

以下では、このような構成でインフラ構築を行う方法を解説します。

1. DBサブネットグループを作成する
前項で作成したVPCのサブネットにはインターネットからのリクエストを処理するためのパブリックサブネットとVPC内部からのリクエストを処理するプライベートサブネットが存在しています。
パブリックサブネットの設定はEC2の項で扱ったように自分のIPからSSH接続を許可するようにします。ここではプライベートサブネットの設定も行います。
VPCのダッシュボードからセキュリティグループに移動し、「セキュリティグループを作成」をクリックします。

セキュリティグループの名前を "test-private-sg" として、作成済みのVPCを選択します。

インバウンドルールを編集し、タイプに "MySQL/Aurora" を選択することでEC2インスタンスから MySQL のトラフィックを許可する設定に出来ます。
次にDBインスタンス用のサブネットグループを作成し、VPC内にRDSを配置します。まずRDSのダッシュボードを開き、サイドバーから「サブネットグループ」を選択します。

この画面から「DBサブネットグループを作成」をクリックし、以下の画面でサブネットグループの設定を行います。

名前と説明を適切に設定して、VPCの項で作成したものを選択します。更に「サブネットを追加」の項ではプライベートに設定してあるサブネットの識別子を選択します。設定が完了したら作成を行い、以下のような画面に遷移したらOKです。


2. DBインスタンスを作成する
RDSのサイドバーから「データベース」を選択し、下の画面で「データベースの作成」をクリックします。

データベースの作成では、「接続」の項で予め作成したEC2インスタンスとの接続を行い、予め作成したDBサブネットグループとVPCのセキュリティグループを設定することでEC2インスタンスとの接続が可能になります。
ここまでで初めに述べたインフラの構成が完成したことになります。ここでは解説はしませんが、この状態からEC2インスタンスにウェブサーバをインストールすることでDBインスタンスと接続することが出来ます。


その８ AWS Lambda
LambdaはAWSのサービスの中でも非常に便利なサービスの一つです。Lambdaを使うことでサーバを全く意識せずに計算資源を用いてコードを実行することが可能になります。
Lambdaの実行は予め設定したトリガーとなるイベントの発生によって自動で行われます。リクエストに応じてスケーリングは自動で行われるのでサーバの負荷などを注意深く監視しておく必要もありません。
Lambdaのようなコードを配置するだけで自動で実行してくれるサービスをFunction as a Service（FaaS）と呼ぶこともあります。管理に手間がかからないだけでなく、Lambdaは従量課金制なので使われていない間はコストもかかりません。
使い方
初めにLambdaのダッシュボードにアクセスし、「関数の作成」をクリックします。

「一から作成」を選択して関数の作成を行うと以下の画面に遷移します。

デフォルトでは以下のようなコードがLambda関数に設定されています。ここではこの関数を実行してその結果を見ます。

テストタブで空のイベントJSONを用いてテストを実行すると以下のように実行結果が返ってきます。

このLambda関数にはもちろんライブラリなどを用いることも可能になっており、様々な場面で柔軟にアプリの機能を実現させることが出来ます。


その９ AWS IAM
AWSのサービスを使う中で重要になってくる概念がこのIAMです。IAMはIdentity and Access Management の略です。
IAMはユーザやアプリケーションがどのAWSリソースにアクセスすることが出来るかを管理します。
より具体的には、リソースへのアクセスを求めるIAMユーザ・フェデレーションユーザ・IAMロール・アプリケーション（公式ドキュメントではこれらを総称してプリンシパルと呼んでいます）が各リソースへのアクセスを許可されているか確認する役割を果たしているのがIAMです。
IAMユーザとは、ルートユーザ以外のAWSアカウントに対して付与することが出来る権限で、ルートユーザやIAM管理者によって作成されます。
フェデレーションユーザとはSSOによってAWSリソースにアクセスするユーザのことです。AWSはSAML2.0の認証に対応しているので同じくSAMLに対応しているGoogle WorkspaceやSlackなどのユーザであればIAMロールを付与することが出来ます。
IAMロールとは、IAMユーザやIAMユーザグループで管理されていないプリンシパルに対して付与する権限のことを指します。
アクセス権限のデフォルトでは、ルートユーザに全てのリソースへのアクセスを許可し、それ以外のユーザには全てのリソースへのアクセスを拒否しています。最小権限の原則に基づき、必要なだけの権限を付与することが推奨されています。
アクセスの許可を付与する方法は以下の3通りです。

AWS外のユーザやアプリケーションに対してIAMロールを付与する
IAMユーザグループに対してアクセス許可を付与する
IAMユーザに対してアクセスを許可する

なお、上記のIAMロール・IAMユーザグループ・IAMユーザの権限はIAMポリシーを紐づけることで管理することが出来ます。ポリシーにはユーザに対してリソースへのアクセス権限を定義するIDベースのポリシーとリソースに対して信頼するユーザの条件を定義するリソースベースのポリシーの2種類があります。このうち、よく使われるのは直感的にも分かりやすいIDベースのポリシーです。
これらの概念を整理するために以下の図を参考にしてみてください。


その１０ Amazon CloudWatch
CloudWatchはAWSリソースの監視、異常検知と通知、最適なリソース使用の促進をするためのサービスです。
AWSでは利用する仮想的な計算資源のスペックを指定することで物理サーバと同等の可用性を確保することが出来ますが、このリソースのメモリ使用率などをモニタリングして適切なスペックを決めるために用いるのがこのCloudWatchです。
CloudWatchはマネジメントコンソール上でリアルタイムのログを表示するインタフェースであると同時にそのログから監視したいデータを自動的に数値化してくれます。更にこれらの数値変動に対してアラームを発生させるように設定することも出来ます。このアラーム機能を用いることで、他のAWSサービスと統合した際に多くの機能を実現することが出来るようになります。
使い方
CloudWatchの機能の一つであるログ機能をAWS Lambdaの例で確認します。
以下のLambdaの実行画面から「ログ」と記されている箇所をクリックします。

遷移先の画面で下にスクロールし、該当する時刻のログストリームをクリックします。

ログストリームではLambda関数の実行開始時間や終了時間、エラーがある場合はそのメッセージなども確認することが出来ます。



【おまけ】その他のサービス
おまけとして、よく使われているサービス14選を簡単に紹介します。上の10個では物足りなかったという方はこちらもチェックしてみてください。

操作ツール

1. AWS CLI
CLIはAWS特有の呼称というわけではなく、Command Line Interfaceの略です。
画面をクリックして操作する代わりに全ての操作をキーボードの操作によるコマンド入力で行うことができる操作画面のことをCLIと呼びます。逆に、画面をクリックして操作するマネジメントコンソールのような操作画面は GUI(Graphical User Interface) と呼びます。
先程インフラ構築の作業はほとんどマネジメントコンソールで完結すると言いましたが、AWS CLIを使うことでも同じ操作を実行できます。

コンピューティング

2. ECS
ECS（Elastic Container Service）は、アプリケーションをコンテナで実行するためのサービスです。コンテナとは、アプリを小さな単位でまとめて動かす技術で、ECSを使うとその管理をクラウド上で簡単に行うことが出来ます。
EC2やFargateのインスタンスから実行をすることが出来ます。

3. Fargate
Fargateは、サーバの管理が不要な場合に用いられるコンテナサービスです。アプリをコンテナで実行するときに必要なインフラを自動で管理してくれます。

データベース

4. DynamoDB
RDB（Relational Database）とは異なる、NoSQLと呼ばれるデータベースの一種で、素早くデータの読み書きができます。オンラインゲームやチャットアプリなど、多くのユーザーが同時にアクセスする場面で活躍します。

5. ElastiCache
ElastiCacheは、データを一時的に保存するキャッシュ用のサービスです。頻繁に使うデータをキャッシュに置くことで、アプリの動作を速くできます。

ネットワーク

6. CloudFront
CloudFrontは、CDN（コンテンツ配信ネットワーク）と呼ばれる仕組みで、画像や動画などのファイルを速く届けるサービスです。世界中の拠点からユーザーに近い場所から配信してくれます。

7. ELB
ELB（Elastic Load Balancer）は、アプリへのアクセスを複数のサーバーに振り分けてくれるサービスです。アクセスが集中したときも、サーバーへの負荷を分散して安定動作を保ちます。

8. Route 53
Route 53は、DNS（ドメイン名システム）のサービスで、ドメインの管理やルーティングを行います。ドメイン名にアクセスしたとき、どのサーバーに接続するかを決める役割を持っています。

セキュリティ

9. Cognito
Cognitoは、アプリにログイン機能を簡単に追加できるサービスです。ユーザーのIDを安全に管理し、GoogleやFacebookなどのアカウントでのログインもサポートします。

10. WAF
WAF（Web Application Firewall）は、ウェブサイトを攻撃から守るための防御システムです。不正なアクセスを防ぎ、アプリを安全に保ちます。

アプリ統合

11. SNS
SNS（Simple Notification Service）は、通知を送るためのサービスです。メールやSMSでユーザーにお知らせを送ったり、他のシステムと連携することができます。

12. SQS
SQS（Simple Queue Service）は、データを順番に並べて待たせるためのサービスです。複数のシステム間でデータをやり取りするときに便利で、処理が遅れてもデータを失わないようになっています。

機械学習

13. SageMaker
SageMakerは、AIモデルを作ったり学習させたりできるサービスです。AIを使ったアプリを簡単に開発し、実際に動かすための環境を提供してくれます。

14. Bedrock
Bedrockは、文章を生成するAIモデルなど、さまざまなAI技術を使いやすくするサービスです。複雑な設定なしで、大規模なAIモデルをアプリに組み込むことができます。


AWSにはここで紹介しきれないほど豊富なサービスが存在しています。使いたいサービスがある場合は公式サイトのドキュメントを参考にしてみましょう。



終わりに
いかがだったでしょうか？この記事ではAWSを使えるようになるための10の重要概念・サービスを解説しました。この記事で紹介した概念をしっかりと理解して実践に繋げてみてください！


弊社Nucoでは、他にも様々なお役立ち記事を公開しています。よろしければOrganizationのページも覗いてみてください。
また、Nucoでは一緒に働く仲間も募集しています！興味をお持ちいただいた方は、ぜひこちらまでご連絡ください。


  AWSはAmazonが提供している便利なクラウドサービスとして有名ですが、初めて使おうと思うと何やら知らない言葉が沢山出てきて圧倒されてしまう人もいるのではないでしょうか？ そのような方々のために、この記事ではAWSを使うにあたって最低限知っておきたい10の重要概念・サービスをピックアップして解説します！ 紹介するのは以下の概念・サービスです。 ここで紹介する重要概念・サービスを理解すればAWSを使っていくための土台が出来上がります。ぜひこの機会にAWSの根幹をなす概念・サービスを抑えてみましょう！ このくらいは当然知っていると思われた方向けに、おまけとしてその他のよく使うサービスの紹介も行います。おまけで紹介しているサービスもよく使われるものばかりなので知らないものがあれば、この機会に触れてみてはいかがでしょうか？ 

弊社Nucoでは、他にも様々なお役立ち記事を公開しています。よろしければOrganizationのページも覗いてみてください。
また、Nucoでは一緒に働く仲間も募集しています！興味をお持ちいただいた方は、ぜひこちらまでご連絡ください。

  
弊社Nucoでは、他にも様々なお役立ち記事を公開しています。よろしければOrganizationのページも覗いてみてください。
また、Nucoでは一緒に働く仲間も募集しています！興味をお持ちいただいた方は、ぜひこちらまでご連絡ください。
 弊社Nucoでは、他にも様々なお役立ち記事を公開しています。よろしければOrganizationのページも覗いてみてください。
また、Nucoでは一緒に働く仲間も募集しています！興味をお持ちいただいた方は、ぜひこちらまでご連絡ください。  AWS（Amazon Web Services）は一言で説明すると、
システム運用に必要な様々な機能を提供しているクラウドサービス
です。  クラウドサービスとはインターネット経由で提供されるサービスの総称です。 AWSのようなクラウドサービスは世界中にデータセンターを保有しており、これらの計算資源を適切に管理することでサービスを提供しています。これにより、サービス利用者は 自身で物理サーバなどを管理することなく計算資源にアクセスする ことが出来るようになります。 クラウドサービスには SaaS、PaaS、IaaSの分類がありますが、AWSは使う計算資源を細かく管理できる IaaS（Infrastructure as a Service）に該当します。AWSは IaaSの世界シェア1位 の最も知名度の高いクラウドサービスの一つとなっています。  AWSが提供しているサービスの中には などのウェブアプリに必須のものだけなく、 を行うサービスまで用意されており、2024年10月現在では328種類ものサービスが提供されています。  AWSの基本的な理解が出来たところで本題に入ります。 実際に手を動かすことが出来る方は、時間のある時にでも自分で手を動かしてみてください。自分の手で操作することで学習効果を更に高めることが出来るでしょう。  一言で言うと、マネジメントコンソールはAWSの操作画面のこと です。ここではアカウントで利用しているサービスの利用状況や設定・料金などをまとめて管理できます。 リソース（計算資源）をIaCでコード管理する場合を除けば、ほとんどのインフラ構築の作業はマネジメントコンソールで完結します。規模の大きいプロジェクトではリソースが非常に多くなり、ヒューマンエラーが増えるのでIaCでリソース管理することが推奨されます。 


補足：IaCとは
Infrastructure as Codeの略で、インフラ構築の際の設定項目をコードとして管理することで開発環境から本番環境への移行時に設定ミスを減らすことなどが目的。

  

補足：IaCとは
Infrastructure as Codeの略で、インフラ構築の際の設定項目をコードとして管理することで開発環境から本番環境への移行時に設定ミスを減らすことなどが目的。
  Infrastructure as Codeの略で、インフラ構築の際の設定項目をコードとして管理することで開発環境から本番環境への移行時に設定ミスを減らすことなどが目的。  AWSアカウントを持っている場合はここからログインすることが出来ます。AWSアカウントを持っていない場合は 新しいAWSアカウントを作成 から作成することが出来ます。 無料枠もあるのでまだ持っていない方は一度自分でアカウントを作ってみることをおすすめします！ 初めてログインすると以下のような画面が表示されます。この画面からAWSのサービスを選択して使用する方法はこれ以降の章で説明していきます。   AWSの仕組みを理解するための鍵となる考えにリージョンとアベイラビリティゾーンがあります。 本記事の初めで、AWSは世界中にデータセンターを保有していてそれらの計算資源を管理してユーザに提供している、という話をしました。これについて、より詳細に解説します。 リージョンとは、AWSが契約しているデータセンターが集中的に存在している地域のこと です。2024年10月現在では、世界で34の地域でAWSが提供されています。それぞれのリージョンの中には概ね3つのアベイラビリティゾーンが含まれます。 アベイラビリティゾーンとは、1つ以上のデータセンターを有するそれぞれが独立したデータセンター群のこと です。複数のデータセンター群を使うことで自然災害などの障害に強いクラウドサービスを作ることが出来ます。 これらの情報を視覚化すると以下の図のように表すことができます。
注：AZはアベイラビリティゾーン、DCはデータセンターの略  


補足：データセンターとは
サーバやネットワーク機器などの装置を設置・運用することに特化した建物のこと。大量のコンピュータがラックに収納されている。

  

補足：データセンターとは
サーバやネットワーク機器などの装置を設置・運用することに特化した建物のこと。大量のコンピュータがラックに収納されている。
  サーバやネットワーク機器などの装置を設置・運用することに特化した建物のこと。大量のコンピュータがラックに収納されている。  EC2 は Elastic Compute Cloud の略で、その名の通り柔軟に計算資源を管理することが出来るサービス となっています。 自分で使いたい計算資源のインスタンスタイプを選択することでコストを最適化することが出来るほか、一時的なイベントのためにサイトを用意する場合にもインスタンスサイズを大きく設定することで簡単に計算資源を調達することが出来ます。 インスタンスタイプによって、CPU・メモリ・ストレージ・ネットワーク帯域幅のどれに特化しているかが変わるので用途に応じて適切なタイプを選択することが出来ます。メモリを最適化したい場合やGPUを用いた高速な計算をしたい場合などで選ぶべきインスタンスタイプは異なります。 インスタンスの性能とサイズに応じて料金は高くなりますが、見積りが難しい場合にも簡単に作って壊すことが出来る点は便利な点の一つです。 また、インスタンスの作成時にはマシンイメージを指定することでOSやアプリケーションソフトウェアを導入した状態で仮想マシンを使うことが出来ます。 


補足：インスタンスとは
AWS上で稼働している仮想サーバのこと。
ユーザ視点では一つの物理サーバのように扱うことが出来る。

  

補足：インスタンスとは
AWS上で稼働している仮想サーバのこと。
ユーザ視点では一つの物理サーバのように扱うことが出来る。
  AWS上で稼働している仮想サーバのこと。
ユーザ視点では一つの物理サーバのように扱うことが出来る。  まずマネジメントコンソールでサービス一覧または検索バーからEC2のダッシュボードを開きます。  この画面で「インスタンスを起動」をクリックします。すると以下のような画面に遷移し、インスタンスの設定を行うことが出来ます。  名前は"TestApplicationServer"とし、マシンイメージで用いるOSはデフォルトのままAmazon Linuxを使用します。さらにインスタンスタイプもt2.micro、VPCもデフォルトの設定でストレージも最小の8GBとします。 キーペアには新しく作成したキーペアを用います。また、セキュリティグループの設定はあとでSSH接続が出来るように自分のIPからのSSHを許可するようにします。  ここまでの設定が済むとEC2を作成することが出来ます。「インスタンスを起動」をクリックし、正常に起動すると以下のような画面が表示されます。   次のステップと書かれている下の「インスタンスに接続する」をクリックします。  ここではSSH接続によってアクセスを試みます。上の画像に示されているコマンドを参考にしてターミナルで以下のコマンドを入力することでインスタンスへの接続を行うことが出来ました。 > ssh -i {作成したキーペアのファイルのパス} ec2-user@{パブリック IPv4 DNS}
 > ssh -i {作成したキーペアのファイルのパス} ec2-user@{パブリック IPv4 DNS}
   S3 は Simple Storage Service の略で、様々な用途に応じてデータを保管することが出来るサービスになっています。 機械学習などのために用いる大規模データを保存したり、ログを長期間使用しないまま保管しておいたり、すぐに使いたいデータを一時的に保存しておくといった場合でもそれぞれの用途でコスト効率の高い選択肢が用意されています。S3のコストは保存容量＋転送量で決定されるのでそれらのコストのバランスが適したストレージクラスを選ぶことが大切です。 例）長期間の保存用 →｛保存容量コスト：低，転送量コスト：高｝ S3ではバケットと呼ばれる格納場所に任意の形式のファイル（オブジェクトとも呼ばれます）を保存することが出来ます。バケットは後からスケールアップ・ダウンが可能です。 S3にはオブジェクトを静的Webサイトとして公開したり、直感的なUIでクエリ操作を行えたり、アクセス権限を細かく設定することが出来るといった便利な機能がいくつも備わっています。 EC2の時と同様にS3の画面に移動し、「バケットを作成」をクリックします。以下の画面に辿り着いたら設定項目を入力していきます。  バケットタイプは汎用、バケット名は"testappbucket-1"とし、ACL無効、パブリックアクセスはブロック、バージョニングは有効、暗号化はS3のマネージドキーで行うように設定をしてバケットを作成しました。   次にバケットの名前をクリックして以下の画面に移動します。  「アップロード」を押して以下の画面で「ファイルを追加」をクリックすることでローカルからファイルをアップロードすることが出来ます。  以下のような画面になればファイルをアップロード出来ていることになります。ここでアップロードしたファイルはローカルへのダウンロードや静的Webサイトとしてインターネット上に公開することが出来ます。   VPCはAWSが提供する仮想ネットワークサービスであり、Virtual Private Cloudの略です。EC2のインスタンスなどをインターネットに接続するためのネットワークの設定を担っています 。一つのVPCの中には複数のサブネットを配置することが出来ます。 インターネットに接続するためにはインターネットゲートウェイとルーティングの設定を行う必要があります。セキュリティ対策も当然可能で、インスタンスに対するファイアウォールとして セキュリティグループ を設定し、サブネットに対する ネットワークACL を設定することが出来ます。 


ファイアウォールとは
内部のネットワークに外部からアクセスする通信を許可・ブロックする仕組み。

ACLとは
Access Control Listの略。特定のデバイスに対するアクセスを制御する仕組み。

  

ファイアウォールとは
内部のネットワークに外部からアクセスする通信を許可・ブロックする仕組み。

ACLとは
Access Control Listの略。特定のデバイスに対するアクセスを制御する仕組み。
  内部のネットワークに外部からアクセスする通信を許可・ブロックする仕組み。  Access Control Listの略。特定のデバイスに対するアクセスを制御する仕組み。 初めにVPCのダッシュボードに移動し、「VPCを作成」をクリックします。  以下の画面に移動したらVPCの設定を行います。「VPCなど」を選択するとデフォルトで2つのAZにプライベート・パブリックの2つのサブネットを配置するような構成になっています。この画面からネットワーク構成を選択するだけでDNSホスト名の有効化・DNS解決の有効化・インターネットゲートウェイの作成と配置・ルートテーブルの作成までを1クリックで行ってくれます。  先程EC2を起動した際にはデフォルトVPCを利用しましたが、今回のような手順で作成したVPCをEC2の配置場所として指定することも出来るようになります。  RDSは代表的なリレーショナルデータベースのサービスである MySQL、MariaDB、PostgreSQL、Oracle Database、SQL Server、Db2、Amazon Auroraの7種類のサービスをクラウド上で利用できるサービスです。 RDSで作成できるデータベースインスタンスはEC2などのように用途に応じたインスタンスクラスとサイズを設定することが出来ます。RDSはマネージドサービスであるため、データベースサービスのアップデートは自動で行われます。 一般的なインフラ構成の例として、EC2にソフトウェアを配置してデータベースをRDSに構築してこれらを連携させるというものが考えられます。RDSの特徴としては、自動バックアップ機能と負荷分散機能による応答の高速化があります。 RDSはEC2インスタンスと同様にVPCのサブネットに配置することができます。これで適切なソフトウェアを走らせるEC2インスタンスからアクセスできるようになります。 以下はAWSの公式に想定されている一般的な構成の例です。  以下では、このような構成でインフラ構築を行う方法を解説します。  前項で作成したVPCのサブネットにはインターネットからのリクエストを処理するためのパブリックサブネットとVPC内部からのリクエストを処理するプライベートサブネットが存在しています。 パブリックサブネットの設定はEC2の項で扱ったように自分のIPからSSH接続を許可するようにします。ここではプライベートサブネットの設定も行います。 VPCのダッシュボードからセキュリティグループに移動し、「セキュリティグループを作成」をクリックします。  セキュリティグループの名前を "test-private-sg" として、作成済みのVPCを選択します。  インバウンドルールを編集し、タイプに "MySQL/Aurora" を選択することでEC2インスタンスから MySQL のトラフィックを許可する設定に出来ます。 次にDBインスタンス用のサブネットグループを作成し、VPC内にRDSを配置します。まずRDSのダッシュボードを開き、サイドバーから「サブネットグループ」を選択します。  この画面から「DBサブネットグループを作成」をクリックし、以下の画面でサブネットグループの設定を行います。  名前と説明を適切に設定して、VPCの項で作成したものを選択します。更に「サブネットを追加」の項ではプライベートに設定してあるサブネットの識別子を選択します。設定が完了したら作成を行い、以下のような画面に遷移したらOKです。   RDSのサイドバーから「データベース」を選択し、下の画面で「データベースの作成」をクリックします。  データベースの作成では、「接続」の項で予め作成したEC2インスタンスとの接続を行い、予め作成したDBサブネットグループとVPCのセキュリティグループを設定することでEC2インスタンスとの接続が可能になります。 ここまでで初めに述べたインフラの構成が完成したことになります。ここでは解説はしませんが、この状態からEC2インスタンスにウェブサーバをインストールすることでDBインスタンスと接続することが出来ます。  LambdaはAWSのサービスの中でも非常に便利なサービスの一つです。Lambdaを使うことでサーバを全く意識せずに計算資源を用いてコードを実行することが可能になります。 Lambdaの実行は予め設定したトリガーとなるイベントの発生によって自動で行われます。リクエストに応じてスケーリングは自動で行われるのでサーバの負荷などを注意深く監視しておく必要もありません。 Lambdaのようなコードを配置するだけで自動で実行してくれるサービスをFunction as a Service（FaaS）と呼ぶこともあります。管理に手間がかからないだけでなく、Lambdaは従量課金制なので使われていない間はコストもかかりません。 初めにLambdaのダッシュボードにアクセスし、「関数の作成」をクリックします。  「一から作成」を選択して関数の作成を行うと以下の画面に遷移します。  デフォルトでは以下のようなコードがLambda関数に設定されています。ここではこの関数を実行してその結果を見ます。  テストタブで空のイベントJSONを用いてテストを実行すると以下のように実行結果が返ってきます。  このLambda関数にはもちろんライブラリなどを用いることも可能になっており、様々な場面で柔軟にアプリの機能を実現させることが出来ます。  AWSのサービスを使う中で重要になってくる概念がこのIAMです。IAMはIdentity and Access Management の略です。 IAMはユーザやアプリケーションがどのAWSリソースにアクセスすることが出来るかを管理します。 より具体的には、リソースへのアクセスを求めるIAMユーザ・フェデレーションユーザ・IAMロール・アプリケーション（公式ドキュメントではこれらを総称してプリンシパルと呼んでいます）が各リソースへのアクセスを許可されているか確認する役割を果たしているのがIAMです。 IAMユーザとは、ルートユーザ以外のAWSアカウントに対して付与することが出来る権限で、ルートユーザやIAM管理者によって作成されます。
フェデレーションユーザとはSSOによってAWSリソースにアクセスするユーザのことです。AWSはSAML2.0の認証に対応しているので同じくSAMLに対応しているGoogle WorkspaceやSlackなどのユーザであればIAMロールを付与することが出来ます。
IAMロールとは、IAMユーザやIAMユーザグループで管理されていないプリンシパルに対して付与する権限のことを指します。 アクセス権限のデフォルトでは、ルートユーザに全てのリソースへのアクセスを許可し、それ以外のユーザには全てのリソースへのアクセスを拒否しています。最小権限の原則に基づき、必要なだけの権限を付与することが推奨されています。 アクセスの許可を付与する方法は以下の3通りです。 なお、上記のIAMロール・IAMユーザグループ・IAMユーザの権限はIAMポリシーを紐づけることで管理することが出来ます。ポリシーにはユーザに対してリソースへのアクセス権限を定義するIDベースのポリシーとリソースに対して信頼するユーザの条件を定義するリソースベースのポリシーの2種類があります。このうち、よく使われるのは直感的にも分かりやすいIDベースのポリシーです。 これらの概念を整理するために以下の図を参考にしてみてください。   CloudWatchはAWSリソースの監視、異常検知と通知、最適なリソース使用の促進をするためのサービスです。 AWSでは利用する仮想的な計算資源のスペックを指定することで物理サーバと同等の可用性を確保することが出来ますが、このリソースのメモリ使用率などをモニタリングして適切なスペックを決めるために用いるのがこのCloudWatchです。 CloudWatchはマネジメントコンソール上でリアルタイムのログを表示するインタフェースであると同時にそのログから監視したいデータを自動的に数値化してくれます。更にこれらの数値変動に対してアラームを発生させるように設定することも出来ます。このアラーム機能を用いることで、他のAWSサービスと統合した際に多くの機能を実現することが出来るようになります。 CloudWatchの機能の一つであるログ機能をAWS Lambdaの例で確認します。 以下のLambdaの実行画面から「ログ」と記されている箇所をクリックします。  遷移先の画面で下にスクロールし、該当する時刻のログストリームをクリックします。  ログストリームではLambda関数の実行開始時間や終了時間、エラーがある場合はそのメッセージなども確認することが出来ます。   おまけとして、よく使われているサービス14選を簡単に紹介します。上の10個では物足りなかったという方はこちらもチェックしてみてください。   CLIはAWS特有の呼称というわけではなく、Command Line Interfaceの略です。 画面をクリックして操作する代わりに全ての操作をキーボードの操作によるコマンド入力で行うことができる操作画面のことをCLIと呼びます。逆に、画面をクリックして操作するマネジメントコンソールのような操作画面は GUI(Graphical User Interface) と呼びます。 先程インフラ構築の作業はほとんどマネジメントコンソールで完結すると言いましたが、AWS CLIを使うことでも同じ操作を実行できます。   ECS（Elastic Container Service）は、アプリケーションをコンテナで実行するためのサービスです。コンテナとは、アプリを小さな単位でまとめて動かす技術で、ECSを使うとその管理をクラウド上で簡単に行うことが出来ます。 EC2やFargateのインスタンスから実行をすることが出来ます。  Fargateは、サーバの管理が不要な場合に用いられるコンテナサービスです。アプリをコンテナで実行するときに必要なインフラを自動で管理してくれます。   RDB（Relational Database）とは異なる、NoSQLと呼ばれるデータベースの一種で、素早くデータの読み書きができます。オンラインゲームやチャットアプリなど、多くのユーザーが同時にアクセスする場面で活躍します。  ElastiCacheは、データを一時的に保存するキャッシュ用のサービスです。頻繁に使うデータをキャッシュに置くことで、アプリの動作を速くできます。   CloudFrontは、CDN（コンテンツ配信ネットワーク）と呼ばれる仕組みで、画像や動画などのファイルを速く届けるサービスです。世界中の拠点からユーザーに近い場所から配信してくれます。  ELB（Elastic Load Balancer）は、アプリへのアクセスを複数のサーバーに振り分けてくれるサービスです。アクセスが集中したときも、サーバーへの負荷を分散して安定動作を保ちます。  Route 53は、DNS（ドメイン名システム）のサービスで、ドメインの管理やルーティングを行います。ドメイン名にアクセスしたとき、どのサーバーに接続するかを決める役割を持っています。   Cognitoは、アプリにログイン機能を簡単に追加できるサービスです。ユーザーのIDを安全に管理し、GoogleやFacebookなどのアカウントでのログインもサポートします。  WAF（Web Application Firewall）は、ウェブサイトを攻撃から守るための防御システムです。不正なアクセスを防ぎ、アプリを安全に保ちます。   SNS（Simple Notification Service）は、通知を送るためのサービスです。メールやSMSでユーザーにお知らせを送ったり、他のシステムと連携することができます。  SQS（Simple Queue Service）は、データを順番に並べて待たせるためのサービスです。複数のシステム間でデータをやり取りするときに便利で、処理が遅れてもデータを失わないようになっています。   SageMakerは、AIモデルを作ったり学習させたりできるサービスです。AIを使ったアプリを簡単に開発し、実際に動かすための環境を提供してくれます。  Bedrockは、文章を生成するAIモデルなど、さまざまなAI技術を使いやすくするサービスです。複雑な設定なしで、大規模なAIモデルをアプリに組み込むことができます。 

AWSにはここで紹介しきれないほど豊富なサービスが存在しています。使いたいサービスがある場合は公式サイトのドキュメントを参考にしてみましょう。

  
AWSにはここで紹介しきれないほど豊富なサービスが存在しています。使いたいサービスがある場合は公式サイトのドキュメントを参考にしてみましょう。
 AWSにはここで紹介しきれないほど豊富なサービスが存在しています。使いたいサービスがある場合は公式サイトのドキュメントを参考にしてみましょう。  いかがだったでしょうか？この記事ではAWSを使えるようになるための10の重要概念・サービスを解説しました。この記事で紹介した概念をしっかりと理解して実践に繋げてみてください！ 

弊社Nucoでは、他にも様々なお役立ち記事を公開しています。よろしければOrganizationのページも覗いてみてください。
また、Nucoでは一緒に働く仲間も募集しています！興味をお持ちいただいた方は、ぜひこちらまでご連絡ください。

  
弊社Nucoでは、他にも様々なお役立ち記事を公開しています。よろしければOrganizationのページも覗いてみてください。
また、Nucoでは一緒に働く仲間も募集しています！興味をお持ちいただいた方は、ぜひこちらまでご連絡ください。
 弊社Nucoでは、他にも様々なお役立ち記事を公開しています。よろしければOrganizationのページも覗いてみてください。
また、Nucoでは一緒に働く仲間も募集しています！興味をお持ちいただいた方は、ぜひこちらまでご連絡ください。 39Go to list of users who liked47comment0Go to list of comments 39Go to list of users who liked47comment0Go to list of comments 39Go to list of users who liked  39Go to list of users who liked 39Go to list of users who liked Go to list of users who liked 47 47 comment0Go to list of comments comment Go to list of comments  Register as a new user and use Qiita more convenientlyYou get articles that match your needsYou can efficiently read back useful informationYou can use dark themeWhat you can do with signing upSign upLogin Register as a new user and use Qiita more conveniently Sign upLogin

URL: https://i-think-it.net/how-to-aws/
ホーム IT AWS 
絶対に知っておきたいAWSの使い方10選。3年使ってみて感じたこと。

2020-04-21


  
絶対に知っておきたいAWSの使い方10選。3年使ってみて感じたこと。

2020-04-21

 
2020-04-21
 


SHARE







ポスト




 シェア





はてブ





LINE





 

SHARE







ポスト




 シェア





はてブ





LINE




  SHARE 
 




ポスト




 シェア





はてブ





LINE



 ポスト シェア はてブ LINE 
記事内に広告を含みます
この記事には広告を含む場合があります。
記事内で紹介する商品を購入することで、当サイトに売り上げの一部が還元されることがあります。

 
記事内に広告を含みます
この記事には広告を含む場合があります。
記事内で紹介する商品を購入することで、当サイトに売り上げの一部が還元されることがあります。

 記事内に広告を含みます
この記事には広告を含む場合があります。
記事内で紹介する商品を購入することで、当サイトに売り上げの一部が還元されることがあります。
 
この記事には広告を含む場合があります。
記事内で紹介する商品を購入することで、当サイトに売り上げの一部が還元されることがあります。
 この記事には広告を含む場合があります。 記事内で紹介する商品を購入することで、当サイトに売り上げの一部が還元されることがあります。 

 

 
本記事対象
Amazon Web Servicesを利用する上で知っておくべきポイントを抑えておきたい方
 本記事対象 Amazon Web Servicesを利用する上で知っておくべきポイントを抑えておきたい方 ども。あいしんくいっと（@ithinkitnet）です。 オンプレからクラウドへの脱却。 オンプレからクラウドへの脱却。 オンプレからクラウドへの脱却。 オンプレ クラウド 脱却。 
AWS(Amazon Web Services)のメリット
AWSはスモールスタートが可能であり、スケールアップ、スケールアウトが容易であることが一番だと感じてます。
それでいて、不要になったらすぐに契約解除出来るといったところでしょうか。
（リザーブドの類はおいておく）
 AWS(Amazon Web Services)のメリット AWSはスモールスタートが可能であり、スケールアップ、スケールアウトが容易であることが一番だと感じてます。
それでいて、不要になったらすぐに契約解除出来るといったところでしょうか。
（リザーブドの類はおいておく） クラウドという言葉が一般的に使われるようになってからかなりの時間が経ちました。
「圧倒的なスケールメリット」や「使いたい時に好きなだけ使える従量課金」といったメリットを武器にしたAWSを筆頭としたクラウドサービスですが、ここに来て多くの企業が導入し始めているようです。 クラウド 「圧倒的なスケールメリット」 「使いたい時に好きなだけ使える従量課金」 最近だと、プライベートクラウド（オンプレ）とパブリッククラウドの両方を組み合わせた「ハイブリッドクラウド」なんて言葉も当たり前のように耳にします。
要は良いとこどりしたいんですよね。オンプレ、クラウドのどちらにもメリット・デメリットはありますから。 そして私のAWSエンジニアとしてのキャリアも、はや3年が過ぎようとしています。(余談ですｗ) という訳で今回は「初心者がAWSを使う時に知っておきたい10の事」として、AWSキャリア2年になった私が「コレは知っておかないと」と思う10の事を挙げておきたいと思います。
（追記したので14になってますw） 「初心者がAWSを使う時に知っておきたい10の事」 10 クラウド利用者なら「そんなの知ってて当たり前！」といったものもあるかとは思いますが、初心者の方にとって参考になれば幸いです。 


 


 クリック可能な目次絶対に知っておきたいAWSの使い方10選従量課金の重みを知り、EC2サービス利用は控えるスモールスタートを心掛けるべしEBSは多様せず、S3を活用すべしリージョンを意識すべしEIPはこまめにリリースすべしセキュリティグループを制するものはAWSのセキュリティを制すrootアカウントにはAPIキーを設定するべからずCloudTrailを活用すべしAWSコンソールログインにはMFAを設定すべし課金料金にアラート通知を設定しておくと幸せになれるかも2015/4/17追記：EC2インスタンスには「Termination Protection」を2017/4/20追記：管理者グループ以外にrootアカウントは渡さないこと！2017/4/20追記：EC2の計画停止は意識しておこう2019/2/10追記：ドメイン管理はRoute53が超絶便利！ クリック可能な目次 絶対に知っておきたいAWSの使い方10選 10 従量課金の重みを知り、EC2サービス利用は控える 従量課金とは、 
「使ったら、使った分だけ料金を支払う」
ことを指します。
当たり前のことなんですけど、何よりもこれは重要だと認識しています。
AWSだと、EC2によく当てはまる事ですが、EC2インスタンスが起動している限り、課金は発生しますので「使う時だけ起動」と「不要になったら停止」は必ず心掛けて下さい。
（止められない本番環境は除く）
ちなみにAWSで発生する課金の割合で言えば環境にも寄りますが、大体の課金はEC2サービスによる事が多いです。
あるカンファレンスに参加した時には「EC2を使ったら負け」と言われている講師の方も居ましたので、そういう意味では極力、EC2サービスは使わない構成にした方が良いかも知れません。
（DBはRDS、ストレージはs3といったように”いかにEC2サービスを使わないか”が非常に重要）
   AWSのEC2でWordPressデモサイト構築。インスタンス構築の流れから料金まで      EC2インスタンスに接続出来ない時に確認したい項目      EC2デフォルトログインユーザについて【Windows/Linux】  
また、AWS利用料金の目安を計算出来るサイトもあるので、ざっくり概算を算出するのも良いですね。
   AWSの利用費用をザックリと見積もる方法について  
スモールスタートを心掛けるべし
AWSは簡単にスケールアップ、スケールアウトを行う事が可能ですので極力、最小構成でのスタートアップをオススメします。
その方が断然、料金を低く抑える事が出来ます。
料金を考えるなら、リザーブドインスタンスやスポットインスタンスも検討材料にした方が良いとは思います。
まぁ、クラウドの利点である「使わなくなったら解約」なんてことも出来るので、そこまで意固地になる必要はないですけどね。
そういや以前、個人ブログをAWS上に移行して痛い目に遭いました。。
   個人ブログ運営にAWSの料金は高すぎるのかも知れない・・・。  
そんな時、すぐに撤退出来るのもAWSのメリットの一つw
EBSは多様せず、S3を活用すべし
EBS（Elastic Block Store）とは、永続的なブロックストレージを指します。
簡単に言えば、仮想ハードディスク的なものになります。
EBSはSSD、Magnetic（HDD相当）に関わらず高額です。
ですので、大容量のデータはS3に置くなどしてなるべくEBSは使わない設計にすべきです。
しかも、EBSだと容量に制限があるので、そういった点でも容量使い放題のS3を使うべきだと思います。
参考　Amazon Elastic Block Store(Amazon EBS)
EBSは手軽に使えて便利なのですが、費用面を考えるとなるべく使うのは避けたいところですね。
（なかなかそう上手くは行かないのですが・・・）
   EC2のLinuxでEBSルートボリュームを拡張する手順（AmazonLinux編）      【AWS】EBS Magneticを上限を超えて使う。1TB上限何てなんのその！      AWSのEBSボリュームを使う場合、性能劣化を防ぐなら事前ウォーミングは忘れずに！（Windows編）  
リージョンを意識すべし
AWSではリージョンと呼ばれる物理的なデータセンターが全世界に存在します。
特別な理由が無いのであれば、東京リージョンを選んでおけば良いと思います。
DRの場合は東京と他のリージョンを組み合わせると良いと思います。
2018/10/28現在、日本国内で選べるリージョンは以下の通りです。



コード
名前


ap-northeast-1
アジアパシフィック (東京)


ap-northeast-3
アジアパシフィック (大阪: ローカル)



デフォルトの状態だとリージョンはOREGONになっているので注意が必要です。
そのまま利用するとOREGONで利用となってしまいますので。
参考　リージョン

利用するリージョンによって料金が微妙に異なるので、用途にあわせて最適なリージョンを選定したいですね。
   AWSの利用費用をザックリと見積もる方法について      【AWS】EBSのリージョン間コピーをやってみた  
EIPはこまめにリリースすべし
AWSではEC2に対して外部から接続する場合、EIP(ElasticIPアドレス)と呼ばれるグローバルIPアドレスの様なものを使ってアクセスを行います。
（ダイレクトコネクトとかは除く）
EIPは起動しているEC2インスタンスに割り当てる分には無料なのですが、停止してしているインスタンスに割り当てたり、EC2インスタンスに割り当てずに確保した状態だと課金が発生するので注意が必要です。
ですので、EIPはこまめにリリースした方が良いと思います。（よく開放するの忘れますw）
参考　Elastic IP アドレス（EIP）
セキュリティグループを制するものはAWSのセキュリティを制す
AWSではセキュリティグループと呼ばれるステートフルなファイアウォール機能が用意されています。
他にもネットワークACLといった機能もあるにはあるのですが、一般的にはセキュリティグループを使うケースが多いです。
ですが、このセキュリティグループの管理は大変で数が増えるに従って、管理は複雑になりがちです。
最初の設計がしっかりしていればどうって事は無いのでしょうが、私の経験上では苦労する事が多くて頭痛の種になってしまっています。
ですので、アウトバウンドは制御せずにインバウンドのみで制御する、といったように運用ポリシーをキチンと立てておいた方が良いと思います。
参考　Linux インスタンスの Amazon EC2 セキュリティグループ
rootアカウントにはAPIキーを設定するべからず
ここで言うrootアカウントとは、AWSコンソールにログインする時にメールアドレスを指定してログインするユーザーを指します。
rootユーザーは権限が強くて危険なのでAPIキーの発行は出来るだけ避けて下さい。
きっとIAMユーザーで事足りる筈ですから。
参考　IAM とは?
   【AWS】IAMで便利な使い方、やっておいた方が良いこと3選！  
CloudTrailを活用すべし
CloudTrailと呼ばれるサービスを設定する事により、APIの履歴といったコンソールログが取得出来ます。
何かあった場合の解析手段として使えるかも知れないので、設定しておく事をオススメします。
参考　AWS CloudTrail
AWSコンソールログインにはMFAを設定すべし
MFAとは、いわゆる多要素認証になります。
このMFAは認証方式がソフトウェアのもの、ハードウェアのものの2種類が用意されています。
ソフトウェアの方は「Google Authenticator」といったスマホ用のアプリで認証する事が出来たり、逆にハードウェアの方は専用のハードウェアデバイスで認証したりする事が出来ます。
参考　Multi-Factor Authentication
課金料金にアラート通知を設定しておくと幸せになれるかも
AWSの課金額がある一定まで達したら、アラートを通知させるといった設定が出来ます。
任意の料金でアラート通知するように設定しておけば使い過ぎを防げるかも知れません。
参考　アラートと通知で請求額を監視
   AWSで料金アラート通知する方法（設定した金額を超えたらメール通知）  
2015/4/17追記：EC2インスタンスには「Termination Protection」を
これ、大事です。
AWSコンソールだと、右クリックからのオペレーションで簡単にインスタンス削除出来てしまうので、削除したくないEC2インスタンス（本番用とか）は「Termination Protection」を有効化しておきましょう。
2017/4/20追記：管理者グループ以外にrootアカウントは渡さないこと！
AWS管理者の方以外にrootアカウント（登録時のメールアドレスのやつ）は渡しちゃ駄目！
必ず、IAMユーザーに必要な権限だけ付けて渡す。コレ、鉄則！
後で後悔しますよ。
2017/4/20追記：EC2の計画停止は意識しておこう
まれにAWSからEC2インスタンスの停止依頼が来ることがあります。
内容的には、「EC2インスタンスが乗っている仮想ホストを再起動したいから、EC2インスタンスを停止・起動してほしい」といった内容のものです。
停止、起動することによって仮想ホスト上のEC2インスタンスが別のホストに移るんでしょうね。
さすがに”明日までに！”といったことはないのですが、2週間後までにといった依頼があったりするので、出来る限り冗長な構成を心掛けておくと良いかも知れません。
   スマホアプリからEC2インスタンスを起動・停止する方法      PowerShellでEC2インスタンスを起動させる方法（タグ名を使って）  
2019/2/10追記：ドメイン管理はRoute53が超絶便利！
独自ドメインを取得したら、Route53に権限委譲して管理するのが便利なのでオススメです。
私もお名前.comで独自ドメインを取得していますが、Route53で管理しています。
もちろん、本ブログ（あいしんくいっと）のi-think-it.netもRoute53で管理しています。
   ドメイン管理はAWSのRoute53で行うのが良い。管理が簡単でオススメ。      Route53のヘルスチェックでHTTPポート監視してみる  

いかがだったでしょうか。
普段からAWSを利用している人からしたら、大した事は無い内容ばかりであると思いますが、これさえ押さえておけばそれなりに何とかなるように思います。（適当ｗ）

ithinkit

これであなたもAWSエンジニアの仲間入り、出来るかも知れないですね。

以上、あいしんくいっとでした( ..)φメモメモ













 「使ったら、使った分だけ料金を支払う」 ことを指します。 当たり前のことなんですけど、何よりもこれは重要だと認識しています。
AWSだと、EC2によく当てはまる事ですが、EC2インスタンスが起動している限り、課金は発生しますので「使う時だけ起動」と「不要になったら停止」は必ず心掛けて下さい。
（止められない本番環境は除く） 「使う時だけ起動」 「使う時だけ起動」 「不要になったら停止」 「不要になったら停止」 ちなみにAWSで発生する課金の割合で言えば環境にも寄りますが、大体の課金はEC2サービスによる事が多いです。
あるカンファレンスに参加した時には「EC2を使ったら負け」と言われている講師の方も居ましたので、そういう意味では極力、EC2サービスは使わない構成にした方が良いかも知れません。
（DBはRDS、ストレージはs3といったように”いかにEC2サービスを使わないか”が非常に重要）
   AWSのEC2でWordPressデモサイト構築。インスタンス構築の流れから料金まで      EC2インスタンスに接続出来ない時に確認したい項目      EC2デフォルトログインユーザについて【Windows/Linux】   「EC2を使ったら負け」 「EC2を使ったら負け」   AWSのEC2でWordPressデモサイト構築。インスタンス構築の流れから料金まで    EC2インスタンスに接続出来ない時に確認したい項目    EC2デフォルトログインユーザについて【Windows/Linux】  また、AWS利用料金の目安を計算出来るサイトもあるので、ざっくり概算を算出するのも良いですね。
   AWSの利用費用をザックリと見積もる方法について     AWSの利用費用をザックリと見積もる方法について  スモールスタートを心掛けるべし AWSは簡単にスケールアップ、スケールアウトを行う事が可能ですので極力、最小構成でのスタートアップをオススメします。
その方が断然、料金を低く抑える事が出来ます。
料金を考えるなら、リザーブドインスタンスやスポットインスタンスも検討材料にした方が良いとは思います。
まぁ、クラウドの利点である「使わなくなったら解約」なんてことも出来るので、そこまで意固地になる必要はないですけどね。 簡単にスケールアップ、スケールアウトを行う事が可能 簡単にスケールアップ、スケールアウトを行う事が可能 最小構成でのスタートアップ 最小構成でのスタートアップ そういや以前、個人ブログをAWS上に移行して痛い目に遭いました。。
   個人ブログ運営にAWSの料金は高すぎるのかも知れない・・・。  
そんな時、すぐに撤退出来るのもAWSのメリットの一つw   個人ブログ運営にAWSの料金は高すぎるのかも知れない・・・。  EBSは多様せず、S3を活用すべし EBS（Elastic Block Store）とは、永続的なブロックストレージを指します。
簡単に言えば、仮想ハードディスク的なものになります。
EBSはSSD、Magnetic（HDD相当）に関わらず高額です。
ですので、大容量のデータはS3に置くなどしてなるべくEBSは使わない設計にすべきです。
しかも、EBSだと容量に制限があるので、そういった点でも容量使い放題のS3を使うべきだと思います。
参考　Amazon Elastic Block Store(Amazon EBS)
EBSは手軽に使えて便利なのですが、費用面を考えるとなるべく使うのは避けたいところですね。
（なかなかそう上手くは行かないのですが・・・）
   EC2のLinuxでEBSルートボリュームを拡張する手順（AmazonLinux編）      【AWS】EBS Magneticを上限を超えて使う。1TB上限何てなんのその！      AWSのEBSボリュームを使う場合、性能劣化を防ぐなら事前ウォーミングは忘れずに！（Windows編）   EBSはSSD、Magnetic（HDD相当）に関わらず高額 高額 参考 参考 Amazon Elastic Block Store(Amazon EBS)   EC2のLinuxでEBSルートボリュームを拡張する手順（AmazonLinux編）    【AWS】EBS Magneticを上限を超えて使う。1TB上限何てなんのその！    AWSのEBSボリュームを使う場合、性能劣化を防ぐなら事前ウォーミングは忘れずに！（Windows編）  リージョンを意識すべし AWSではリージョンと呼ばれる物理的なデータセンターが全世界に存在します。
特別な理由が無いのであれば、東京リージョンを選んでおけば良いと思います。
DRの場合は東京と他のリージョンを組み合わせると良いと思います。 2018/10/28現在、日本国内で選べるリージョンは以下の通りです。 コード 名前 デフォルトの状態だとリージョンはOREGONになっているので注意が必要です。
そのまま利用するとOREGONで利用となってしまいますので。
参考　リージョン 参考 参考 リージョン 
利用するリージョンによって料金が微妙に異なるので、用途にあわせて最適なリージョンを選定したいですね。
   AWSの利用費用をザックリと見積もる方法について      【AWS】EBSのリージョン間コピーをやってみた     AWSの利用費用をザックリと見積もる方法について    【AWS】EBSのリージョン間コピーをやってみた  EIPはこまめにリリースすべし AWSではEC2に対して外部から接続する場合、EIP(ElasticIPアドレス)と呼ばれるグローバルIPアドレスの様なものを使ってアクセスを行います。
（ダイレクトコネクトとかは除く） EIP(ElasticIPアドレス) EIPは起動しているEC2インスタンスに割り当てる分には無料なのですが、停止してしているインスタンスに割り当てたり、EC2インスタンスに割り当てずに確保した状態だと課金が発生するので注意が必要です。 EIPは起動しているEC2インスタンスに割り当てる分には無料 EIPは起動しているEC2インスタンスに割り当てる分には無料 停止してしているインスタンスに割り当てたり、EC2インスタンスに割り当てずに確保した状態だと課金が発生 停止してしているインスタンスに割り当てたり、EC2インスタンスに割り当てずに確保した状態だと課金が発生 ですので、EIPはこまめにリリースした方が良いと思います。（よく開放するの忘れますw）
参考　Elastic IP アドレス（EIP） 参考 参考 Elastic IP アドレス（EIP） セキュリティグループを制するものはAWSのセキュリティを制す AWSではセキュリティグループと呼ばれるステートフルなファイアウォール機能が用意されています。
他にもネットワークACLといった機能もあるにはあるのですが、一般的にはセキュリティグループを使うケースが多いです。 セキュリティグループ ステートフルなファイアウォール機能 ネットワークACL 一般的にはセキュリティグループを使うケースが多い ですが、このセキュリティグループの管理は大変で数が増えるに従って、管理は複雑になりがちです。
最初の設計がしっかりしていればどうって事は無いのでしょうが、私の経験上では苦労する事が多くて頭痛の種になってしまっています。 ですので、アウトバウンドは制御せずにインバウンドのみで制御する、といったように運用ポリシーをキチンと立てておいた方が良いと思います。
参考　Linux インスタンスの Amazon EC2 セキュリティグループ 参考 参考 Linux インスタンスの Amazon EC2 セキュリティグループ rootアカウントにはAPIキーを設定するべからず ここで言うrootアカウントとは、AWSコンソールにログインする時にメールアドレスを指定してログインするユーザーを指します。
rootユーザーは権限が強くて危険なのでAPIキーの発行は出来るだけ避けて下さい。
きっとIAMユーザーで事足りる筈ですから。
参考　IAM とは?
   【AWS】IAMで便利な使い方、やっておいた方が良いこと3選！   参考 参考 IAM とは?   【AWS】IAMで便利な使い方、やっておいた方が良いこと3選！  CloudTrailを活用すべし CloudTrailと呼ばれるサービスを設定する事により、APIの履歴といったコンソールログが取得出来ます。
何かあった場合の解析手段として使えるかも知れないので、設定しておく事をオススメします。
参考　AWS CloudTrail 参考 参考 AWS CloudTrail AWSコンソールログインにはMFAを設定すべし MFAとは、いわゆる多要素認証になります。
このMFAは認証方式がソフトウェアのもの、ハードウェアのものの2種類が用意されています。
ソフトウェアの方は「Google Authenticator」といったスマホ用のアプリで認証する事が出来たり、逆にハードウェアの方は専用のハードウェアデバイスで認証したりする事が出来ます。
参考　Multi-Factor Authentication 参考 参考 Multi-Factor Authentication 課金料金にアラート通知を設定しておくと幸せになれるかも AWSの課金額がある一定まで達したら、アラートを通知させるといった設定が出来ます。
任意の料金でアラート通知するように設定しておけば使い過ぎを防げるかも知れません。
参考　アラートと通知で請求額を監視
   AWSで料金アラート通知する方法（設定した金額を超えたらメール通知）   参考 参考 アラートと通知で請求額を監視   AWSで料金アラート通知する方法（設定した金額を超えたらメール通知）  2015/4/17追記：EC2インスタンスには「Termination Protection」を これ、大事です。
AWSコンソールだと、右クリックからのオペレーションで簡単にインスタンス削除出来てしまうので、削除したくないEC2インスタンス（本番用とか）は「Termination Protection」を有効化しておきましょう。 「Termination Protection」 「Termination Protection」 2017/4/20追記：管理者グループ以外にrootアカウントは渡さないこと！ AWS管理者の方以外にrootアカウント（登録時のメールアドレスのやつ）は渡しちゃ駄目！
必ず、IAMユーザーに必要な権限だけ付けて渡す。コレ、鉄則！
後で後悔しますよ。 AWS管理者の方以外にrootアカウント（登録時のメールアドレスのやつ）は渡しちゃ駄目！ AWS管理者の方以外にrootアカウント（登録時のメールアドレスのやつ）は渡しちゃ駄目！ 2017/4/20追記：EC2の計画停止は意識しておこう まれにAWSからEC2インスタンスの停止依頼が来ることがあります。
内容的には、「EC2インスタンスが乗っている仮想ホストを再起動したいから、EC2インスタンスを停止・起動してほしい」といった内容のものです。
停止、起動することによって仮想ホスト上のEC2インスタンスが別のホストに移るんでしょうね。
さすがに”明日までに！”といったことはないのですが、2週間後までにといった依頼があったりするので、出来る限り冗長な構成を心掛けておくと良いかも知れません。
   スマホアプリからEC2インスタンスを起動・停止する方法      PowerShellでEC2インスタンスを起動させる方法（タグ名を使って）     スマホアプリからEC2インスタンスを起動・停止する方法    PowerShellでEC2インスタンスを起動させる方法（タグ名を使って）  2019/2/10追記：ドメイン管理はRoute53が超絶便利！ 独自ドメインを取得したら、Route53に権限委譲して管理するのが便利なのでオススメです。
私もお名前.comで独自ドメインを取得していますが、Route53で管理しています。
もちろん、本ブログ（あいしんくいっと）のi-think-it.netもRoute53で管理しています。
   ドメイン管理はAWSのRoute53で行うのが良い。管理が簡単でオススメ。      Route53のヘルスチェックでHTTPポート監視してみる     ドメイン管理はAWSのRoute53で行うのが良い。管理が簡単でオススメ。    Route53のヘルスチェックでHTTPポート監視してみる  いかがだったでしょうか。
普段からAWSを利用している人からしたら、大した事は無い内容ばかりであると思いますが、これさえ押さえておけばそれなりに何とかなるように思います。（適当ｗ） 
ithinkit

これであなたもAWSエンジニアの仲間入り、出来るかも知れないですね。
 ithinkit ithinkit 
これであなたもAWSエンジニアの仲間入り、出来るかも知れないですね。
 これであなたもAWSエンジニアの仲間入り、出来るかも知れないですね。 以上、あいしんくいっとでした( ..)φメモメモ 












 












 












 




 




 

SHARE 



ポスト




 シェア





はてブ





LINE










この記事が気に入ったらフォローしよう
フォローする 





CATEGORY :

AWS 
TAGS :
aws知っておきたいこと豆知識 

関連する記事たち 





EC2デフォルトログインユーザについて【Windows/Linux】









AWSCLIバージョンアップ手順 Windows/Linux(Raspberrypi2)









【AWS】IAMで便利な使い方、やっておいた方が良いこと3選！









EC2でデスクトップに表示される情報(ウォールペーパー)をカスタマイズする方法









ロリポップ！からAWSにサーバ移行して苦労した点と所感について。









【AWS】S3アップロードツールを試してみた！



  
SHARE 



ポスト




 シェア





はてブ





LINE



 SHARE ポスト シェア はてブ LINE 





この記事が気に入ったらフォローしよう
フォローする 



 




この記事が気に入ったらフォローしよう
フォローする 


 

 
この記事が気に入ったらフォローしよう
フォローする 

 この記事が気に入ったらフォローしよう フォローする   
CATEGORY :

AWS 
TAGS :
aws知っておきたいこと豆知識 
 CATEGORY : 
TAGS :
aws知っておきたいこと豆知識  TAGS :  





EC2デフォルトログインユーザについて【Windows/Linux】









AWSCLIバージョンアップ手順 Windows/Linux(Raspberrypi2)









【AWS】IAMで便利な使い方、やっておいた方が良いこと3選！









EC2でデスクトップに表示される情報(ウォールペーパー)をカスタマイズする方法









ロリポップ！からAWSにサーバ移行して苦労した点と所感について。









【AWS】S3アップロードツールを試してみた！



 
EC2デフォルトログインユーザについて【Windows/Linux】
 EC2デフォルトログインユーザについて【Windows/Linux】 
AWSCLIバージョンアップ手順 Windows/Linux(Raspberrypi2)
 AWSCLIバージョンアップ手順 Windows/Linux(Raspberrypi2) 
【AWS】IAMで便利な使い方、やっておいた方が良いこと3選！
 【AWS】IAMで便利な使い方、やっておいた方が良いこと3選！ 
EC2でデスクトップに表示される情報(ウォールペーパー)をカスタマイズする方法
 EC2でデスクトップに表示される情報(ウォールペーパー)をカスタマイズする方法 
ロリポップ！からAWSにサーバ移行して苦労した点と所感について。
 ロリポップ！からAWSにサーバ移行して苦労した点と所感について。 
【AWS】S3アップロードツールを試してみた！
 【AWS】S3アップロードツールを試してみた！ 




この記事を書いた人


 



あいしんくいっと


エンジニアブロガー



サラリーマン ／ ブロガー ／『あいしんくいっと』運営。
思ったこと、感じたことを記事にしています。
Twitterフォローお気軽に！

X
Feedly




 



この記事を書いた人


 



あいしんくいっと


エンジニアブロガー



サラリーマン ／ ブロガー ／『あいしんくいっと』運営。
思ったこと、感じたことを記事にしています。
Twitterフォローお気軽に！

X
Feedly



 


この記事を書いた人


 



あいしんくいっと


エンジニアブロガー



サラリーマン ／ ブロガー ／『あいしんくいっと』運営。
思ったこと、感じたことを記事にしています。
Twitterフォローお気軽に！

X
Feedly


 

この記事を書いた人


 



あいしんくいっと


エンジニアブロガー

 
この記事を書いた人
 この記事を書いた人 
  あいしんくいっと 
サラリーマン ／ ブロガー ／『あいしんくいっと』運営。
思ったこと、感じたことを記事にしています。
Twitterフォローお気軽に！

X
Feedly

 サラリーマン ／ ブロガー ／『あいしんくいっと』運営。
思ったこと、感じたことを記事にしています。
Twitterフォローお気軽に！ 
X
Feedly
 

コメントを残す コメントをキャンセルメールアドレスが公開されることはありません。 * が付いている欄は必須項目ですコメント * 名前 * 
メールアドレス * 
サイト 
 

email confirm*
post date*
日本語が含まれない投稿は無視されますのでご注意ください。（スパム対策） 
 
コメントを残す コメントをキャンセルメールアドレスが公開されることはありません。 * が付いている欄は必須項目ですコメント * 名前 * 
メールアドレス * 
サイト 
 

email confirm*
post date*
日本語が含まれない投稿は無視されますのでご注意ください。（スパム対策）  メールアドレスが公開されることはありません。 * が付いている欄は必須項目です メールアドレスが公開されることはありません。 * が付いている欄は必須項目です * コメント *  * 名前 *  * メールアドレス *  * サイト   

 email confirm*
 * post date*
 * 日本語が含まれない投稿は無視されますのでご注意ください。（スパム対策）