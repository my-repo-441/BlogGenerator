### Aurora DSQLを体験！くれとむとチーズくんの冒険

**くれとむ**：「最近発表されたAurora DSQLについて知ってる？これは分散型SQLデータベースで、驚異的な可用性を実現しているんだ！」  
**チーズくん**：「それは興味深いね！普通のSQLデータベースと何が違うの？」  
**くれとむ**：「特にサーバーレスで利用でき、マルチリージョン対応だから、開発者には大きなメリットがあるよ。さあ、早速試してみよう！」

---

### Aurora DSQLの基本情報

2024年12月3日に発表されたAmazon Aurora DSQLのプレビュー版についてご紹介します。この革新的なサービスは、データの一貫性を維持しつつ、アクティブ/アクティブの高可用性を実現する分散型SQLデータベースです。「DSQL」は「ディー・シークウェル」と発音されることも覚えておいてください。

この記事では、Aurora DSQLに接続し、実際にデータベースを操作する手順を詳しく解説します。

### クラスターの作成と接続方法

まず、AWSマネジメントコンソールにログインし、Aurora DSQLのクラスターを作成します。今回はバージニア北部リージョンを選択しました。以下の手順に従ってください。

1. **AWSマネジメントコンソールでAurora DSQLを選択**  
2. **「Create Cluster」をクリックし、デフォルト設定でクラスターを作成**  

約1分後、クラスターは無事に作成されました。

次に、クラスターに接続します。CloudShellを使用して以下のコマンドを入力します。

```bash
PGSSLMODE=require \
psql --dbname postgres \
--username admin \
--host [エンドポイントをここに]
```

接続が成功すると、「postgres=>」というプロンプトが表示されます。この時、AWSから取得した認証トークンを使用してください。

### データベース操作の実施

クラスターに接続したら、早速SQLコマンドを実行してみましょう。

1. **スキーマの作成**
   ```sql
   CREATE SCHEMA example;
   ```

2. **請求書テーブルの作成**
   ```sql
   CREATE TABLE example.invoice(
       id UUID PRIMARY KEY DEFAULT gen_random_uuid(), 
       created TIMESTAMP, 
       purchaser INT, 
       amount FLOAT
   );
   ```

3. **インデックスの作成**
   ```sql
   CREATE INDEX invoice_created_idx ON example.invoice(created);
   ```

4. **部門テーブルの作成**
   ```sql
   CREATE TABLE example.department(
       id INT PRIMARY KEY UNIQUE, 
       name TEXT, 
       email TEXT
   );
   ```

これでデータをインポートする準備が整いました！

### データのインポート手順

次に、GitHubからサンプルデータをダウンロードしてCloudShellにアップロードし、データをインポートします。

5. **ファイルのアップロード**
   ```bash
   wget [ファイルのURL] -O department-insert-multirow.sql
   ```

6. **データの挿入**
   ```sql
   \include department-insert-multirow.sql
   \copy example.invoice(created, purchaser, amount) FROM 'invoice.csv' CSV;
   ```

これで部門テーブルと請求書テーブルが作成され、データが正常に挿入されました。

### 複数リージョンでのデータ一貫性確認

次に、オハイオリージョンのエンドポイントに接続し、同様のクエリを実行してデータの整合性を確認します。

```sql
SELECT name, SUM(amount) AS sum_amount
FROM example.department 
LEFT JOIN example.invoice ON department.id = invoice.purchaser
GROUP BY name
HAVING SUM(amount) > 0
ORDER BY sum_amount DESC;
```

オハイオリージョンでも同じ出力が得られ、データの一貫性が確保されていることが確認できました。

### まとめ

**くれとむ**：「どうだった、チーズくん？」  
**チーズくん**：「すごく簡単に使えたし、分散処理が正しく機能することも確認できたよ！もっと試してみたくなった！」  
**くれとむ**：「良かった！これからの開発にぜひ活用してね！次はLambdaとの連携にも挑戦してみよう！」

今回はAurora DSQLの基本操作について紹介しましたが、この分散SQLの特性を活かすことで、多様なユースケースに対処できる可能性を感じました。次回もお楽しみに！

---

### Lambdaとの連携への第一歩

**くれとむ**：「次は、Aurora DSQLとAWS Lambdaを連携させて、サーバーレスのアプリケーションを構築してみよう！」  
**チーズくん**：「サーバーレスアーキテクチャの利点を最大限に活用できるね。始めるにはどうしたらいいの？」  
**くれとむ**：「まずはLambda関数を作成して、Aurora DSQLと通信できるように設定する必要があるよ。」

---

### Lambda関数の作成とデプロイ

AWSマネジメントコンソールにログインし、次の手順に従ってLambda関数を作成します。

1. **AWSマネジメントコンソールでLambdaを選択**  
2. **「Create function」をクリック**  
3. **「Author from scratch」を選択し、関数名を入力**  
4. **ランタイムはPython 3.xを選択**  
5. **ロールは新規作成の「Create a new role with basic Lambda permissions」を選択**  

関数が作成されたら、次にAurora DSQLへの接続設定を行います。

### 環境変数の設定

Lambda関数の環境変数に、Aurora DSQLの接続情報を設定します。

- **DB_HOST**: Aurora DSQLのエンドポイント
- **DB_NAME**: データベース名（この場合はpostgres）
- **DB_USER**: ユーザー名（admin）
- **DB_PASSWORD**: AWSから取得した認証トークン

### Lambda関数コードの作成

作成したLambda関数に以下のコードを追加します。これはデータベースから部門名とその請求額を取得する簡単な例です。

```python
import json
import os
import psycopg2

def lambda_handler(event, context):
    connection = psycopg2.connect(
        host=os.environ['DB_HOST'],
        database=os.environ['DB_NAME'],
        user=os.environ['DB_USER'],
        password=os.environ['DB_PASSWORD']
    )
    
    cursor = connection.cursor()
    
    query = """
        SELECT name, SUM(amount) AS sum_amount
        FROM example.department 
        LEFT JOIN example.invoice ON department.id = invoice.purchaser
        GROUP BY name
        HAVING SUM(amount) > 0
        ORDER BY sum_amount DESC;
    """
    
    cursor.execute(query)
    results = cursor.fetchall()
    
    cursor.close()
    connection.close()
    
    return {
        'statusCode': 200,
        'body': json.dumps(results)
    }
```

### Lambda関数のテスト

作成したLambda関数は、画面上部の「Test」ボタンをクリックしてテストできます。テストイベントは特に入力する必要はありませんが、関数が正しくデータを取得できるかを確認します。

### 結果の確認

テストイベントが成功すると、結果がJSON形式で表示されるはずです。その中に部門名と請求額の合計が確認できるでしょう！

**チーズくん**：「この結果を確認するのが本当に楽しみだね！大量のデータも簡単に取得できるのが分かるよ！」  
**くれとむ**：「そうだね！将来的にはこのデータをフロントエンドで可視化したり、他のサービスと連携させたりすることもできるよ。」

### 各種プロジェクトへの応用

Aurora DSQLとLambdaの組み合わせにより、さまざまなユースケースが考えられます。例えば、リアルタイム分析システムや、イベントドリブンなアプリケーションの構築が可能です。

**チーズくん**：「次回は、このデータを使ってどんなアプリケーションが作れるか考えてみたいな！」  
**くれとむ**：「それは素晴らしいアイデアだね！ぜひ一緒にブレインストーミングしよう！」

### まとめ

Aurora DSQLの特性を活かすことで、分散処理と高可用性を簡単に実現できます。また、AWS Lambdaとの連携により、サーバーレスでスケーラブルなアプリケーションを構築できることを実感しました。次回の冒険もお楽しみに！
### 最後に

この冒険を通じて、Aurora DSQLとAWS Lambdaの強力な組み合わせが多くの開発者にとっての夢の実現に近づくことを願っています。特に、サーバーレスアーキテクチャを利用することで、インフラ管理の負担を減らし、ビジネスのコアに集中できるようになります。次回は、実際の開発でどのように応用できるか、リアルなビジネスシナリオを見ていきましょう！

### プロジェクトの可能性

**くれとむ**：「これらの技術を使ってどんなプロジェクトに挑戦してみたい？」  
**チーズくん**：「個人的には、オンラインストアの管理システムを作ってみたいな！通常の請求書発行機能だけでなく、リアルタイムの在庫管理も組み込みたい！」  
**くれとむ**：「それはいいアイデアだね！傷んどくる在庫情報を可視化し、類似商品やおすすめ商品を提案する機能もあったら面白いね。」

このプロジェクトを実現するためには、まずはデータ収集、分析、表示の段階を考えなければなりません。特に、リアルタイムのデータ分析や通知機能は、顧客のエクスペリエンスを向上させるためには重要です。

### データ分析の実装

データを取得したら、AWS Lambdaのトリガーを使って定期的にデータベースの情報を更新し、データ分析を行います。結果をダッシュボードに表示することで、運営側が迅速にアクションを取れるようになるでしょう。

### フロントエンドの統合

今度はフロントエンドの開発が必要です。ReactやVue.jsなどのフレームワークを利用して、ユーザーインターフェースを設計しましょう。商品リストや詳細画面、カート機能を持たせることが大切です。

**チーズくん**：「UI/UXの設計は非常に重要だね！使いやすさが顧客の満足度にもつながるし。」  
**くれとむ**：「その通りだよ！ユーザーが欲しい情報に簡単にアクセスできるよう心掛けないとね。」

### 次のステップ

次回の冒険では、実際にこのようなプロジェクトの設計やセットアップに入る予定です。ユースケースを考え、どのようにこれらのサービスを統合していくかを詳しく見ていきましょう。

ご期待ください！

---

楽しんでいただけましたでしょうか？あなたも、自分自身のプロジェクトをAurora DSQLやAWS Lambdaを使って実現してみませんか？これからも新しい発見がありそうですね。次回のご報告をお楽しみに！