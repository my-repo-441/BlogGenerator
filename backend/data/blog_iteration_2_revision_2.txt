### Aurora DSQLを触ってみた！くれとむとチーズくんの挑戦

くれとむ「新しく発表されたAurora DSQLって知ってる？分散SQLで、超高可用性なんだとか。」
チーズくん「それって、ただのSQLデータベースとは違うの？」
くれとむ「そう、特にサーバーレスで使えて、しかもマルチリージョン対応だから、開発者には強い味方だよ！早速試してみようよ！」

---

### Aurora DSQLの概要

2024年12月3日にAmazon Aurora DSQLのプレビュー版が発表されました。このサービスは、強力なデータの一貫性を持ちつつ、アクティブ/アクティブの高可用性を実現した分散SQLデータベースです。ところで、DSQLという呼称は「ディー・シークウェル」と発音されることを忘れずに。

このブログでは、先日発表されたAurora DSQLに接続し、実際にデータベースに操作を加えてみる過程を紹介します。

### クラスターの作成と接続

まず、AWSマネジメントコンソールにログインして、Aurora DSQLのクラスターを作成します。私たちの場合はバージニア北部リージョンを選択しました。以下の手順でクラスターを立ち上げてみましょう：

1. **マネジメントコンソールでAurora DSQLを開く**
2. **「Create Cluster」を選択し、デフォルト設定でクラスター作成**

1分ほど待つと、クラスターが成功裏に作成されました！

次に、クラスターに接続します。以下のコマンドでCloudShellを使います。

```bash
PGSSLMODE=require \
psql --dbname postgres \
--username admin \
--host [エンドポイントをここに]
```

接続が完了すると、「postgres=>」と表示されます。この時、AWSから取得した認証トークンを使用します。

### データベース操作

クラスターに接続したら、さっそくSQLコマンドを実行していきましょう！

1. **スキーマの作成**
   ```sql
   CREATE SCHEMA example;
   ```
   
2. **請求書テーブルの作成**
   ```sql
   CREATE TABLE example.invoice(id UUID PRIMARY KEY DEFAULT gen_random_uuid(), created timestamp, purchaser int, amount float);
   ```

3. **インデックスの作成**
   ```sql
   CREATE INDEX invoice_created_idx on example.invoice(created);
   ```

4. **部門テーブルの作成**
   ```sql
   CREATE TABLE example.department(id INT PRIMARY KEY UNIQUE, name text, email text);
   ```

実行が成功すると、さまざまなデータをインポートして使うことができます。

### データのインポート

次に、データのインポートです。GitHubからサンプルデータをダウンロードし、CloudShellにアップロードします。

5. **ファイルのアップロード**
   ```bash
   # GitHubからのダウンロードコマンド
   wget [ファイルのURL] -O department-insert-multirow.sql
   ```

6. **データを挿入する**
   ```sql
   \include department-insert-multirow.sql
   \copy example.invoice(created, purchaser, amount) from 'invoice.csv' csv
   ```

これで部門テーブルと請求書テーブルが作成され、データが挿入されました。

### 複数リージョンでのデータ確認

次に、オハイオリージョンのエンドポイントで接続し、同じクエリを実行することで、データの整合性を確認します。

```sql
SELECT name, sum(amount) AS sum_amount
FROM example.department 
LEFT JOIN example.invoice ON department.id=invoice.purchaser
GROUP BY name
HAVING sum(amount) > 0
ORDER BY sum_amount DESC;
```

オハイオリージョンでも同様の出力が確認でき、データの一貫性が保たれていることが確認できました。

### まとめ

くれとむ「どうだった、チーズくん？」
チーズくん「とても簡単に使えたね！しかも、分散処理がきちんと機能しているのが分かって、ますます興味が湧いてきたよ！」
くれとむ「これからの開発にぜひ活用してみてね。次はLambdaとの連携も試してみよう！」

今回は、Aurora DSQLの基本的な操作に触れてみましたが、分散SQLという特性のおかげで、さまざまなユースケースに利用できそうです。次回も楽しみにしていてください！